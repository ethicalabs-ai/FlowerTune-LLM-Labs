[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string, char):\n    # Remove first occurrence\n    if string.find(char) != -1:\n        return string[:string.find(char)] + string[string.find(char)+len(char):]\n    else:\n        return string\n\n# Test case"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    # Sort each row\n    for i in range(len(matrix)):\n        matrix[i] = sorted(matrix[i])\n\n    return matrix\n\n"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    # Create an empty list\n    result = []\n    \n    # Iterate through each word in the input list\n    for word in words:\n        # Count the frequency of each word\n        freq = word.count()\n        \n        # Append the word and its frequency to the result list\n        result.append((word, freq))\n    \n    # Sort the result list by frequency in descending order\n    result.sort(key=lambda x: x[1], reverse=True)\n    \n    # Return the top n most frequent words\n    return result[:n]<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(a,b,c):\n    return (a*b*c)/2\n"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    # Split the string at lowercase letters\n    return [word for word in string.split() if word.islower()]\n\n\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    return ''.join([word.lower() for word in text.split('_')])<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    return 4*side\n"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(string1, string2):\n    # Create an empty list\n    result = []\n    \n    # Iterate through each character of the first string\n    for char in string1:\n        if char not in string2:\n            result.append(char)\n            \n    # Join the resulting list into a new string\n    return ''.join(result) \n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    # Create an empty set\n    s = set()\n\n    for i in arr:\n        if i in s:\n            return True\n\n        else:\n            s.add(i)\n\n    return False\n\n"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodball(number):\n    # Check for odd numbers\n    if number % 2 != 0:\n        return False\n\n    # Check for prime numbers\n    if number > 1:\n        for i in range(2, int(number ** 0.5) + 1):\n            if (number % i) == 0:\n                return False\n    else:\n        return False\n\n    return True\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n,m):\n    return list(range(m*n))\n"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] != i:\n            return i\n    return -1\n"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef max_sum(list_of_lists):\n    # Initialize result with the first element of the list\n    res = list_of_lists[0]\n\n    # Iterate over all other elements\n    for i in range(1, len(list_of_lists)):\n        # Find the maximum sum of sub-lists ending at index i\n        res = max(res, sum(list_of_lists[i]))\n\n    return res\n\n# Test the function with provided data points"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n    # Convert binary to decimal\n    return int(binary, 2)\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_product(arr):\n    # Initialize result variable\n    res = 1\n\n    # Iterate over each element in the array\n    for i in range(len(arr)):\n        # If current element is not repeated\n        if (arr[i] != arr[arr[i]-1]):\n            # Multiply result with current element\n            res *= arr[i]\n\n    return res\n\n\n# Driver Code"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(lst,k):\n    # Check if the length of the list is equal to k\n    if len(lst) != k:\n        return False\n\n    # Check if any element in the list is not equal to k-1\n    for i in lst:\n        if i != k - 1:\n            return False\n    \n    return True\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(list_of_strings):\n    return [word for word in list_of_strings if not any(char.isdigit() for char in word)]\n\n"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\nimport math\n\ndef binomial_Coeff(n,k):\n    return int(math.factorial(n)//(math.factorial(k)*math.factorial(n-k)))\n"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr,n):\n    # Initialize count variable \n    count = 0\n\n    # Iterate through array \n    for i in range(0,n): \n  \n        # If count is even then increment it by 1 \n        if (arr[i] % 2 == 0): \n            count += 1\n  \n    # Return count  \n    return count\n\n\n# Test case "], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_substrings_with_equal_ends(str):\n    # Initialize result\n    res = 0\n\n    # Iterate over all possible substrings\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i] == str[j]:\n                res += 1\n\n    return res\n\n\n# Test the function"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\nfrom heapq import heappop, heappush\nimport heapq\n\ndef topKFrequent(nums, k):\n    # Create a dictionary for frequency count\n    freq = {}\n    \n    # Iterate through each number in nums\n    for num in nums:\n        if num not in freq:\n            freq[num] = 0\n        freq[num] += 1\n    \n    # Sort the frequencies in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    \n    # Return the top k elements\n    return [i[0] for i in sorted_freq[:k]]\n\n\n# Test the function with provided test cases"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(n):\n    # Initialize result as 1\n    res = 1\n\n    # Iterate over all numbers from 2 to n\n    for i in range(2, n + 1):\n\n        # If i is a factor of n,\n        if (n % i == 0):\n\n            # Update result with its power\n            # of i\n            res *= pow(i, n // i)\n\n    return res\n\n\n# Driver Code"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(num):\n    if num < 2:\n        return str(num)\n    else:\n        return decimal_To_Binary(num // 2) + str(num % 2)\n"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr,n):\n    # if n is odd then return arr[n//2]\n    if (n % 2 != 0):\n        return arr[n // 2]\n\n    # If n is even then return (arr[n//2] + 1)\n    else:\n        return arr[(n // 2)] + 1\n\n# Driver Code"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    return (n * (n + 1)) // 2\n"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(n,x,y):\n    # n is the number of digits in x and y\n    if (n > len(str(x)) + len(str(y))):\n        return -1\n\n    # If n is less than or equal to the length of str(x)\n    if (n <= len(str(x))):\n        return int(str(x)[n-1])\n\n    # If n is greater than the sum of the lengths of str(x) and str(y)\n    if (n > (len(str(x)) + len(str(y))) - 1):\n        return find_Nth_Digit(n-x,y,x)\n\n# Driver Code"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(lst):\n    # Convert the mixed list into a set for O(1) lookups\n    lst_set = set(lst)\n    \n    # Sort the elements in the set based on their order\n    sorted_lst = sorted(lst_set)\n    \n    # Convert the sorted elements back into a list\n    return [sorted_lst[i] for i in range(len(sorted_lst))]<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(lst):\n    # Find the first even and odd numbers in the list\n    even = []\n    odd = []\n\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n\n    # Return the division of first even and odd numbers\n    return (even[0] // odd[0], even[-1] // odd[-1]) \n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef RearrangeString(s):\n    # Sort the string\n    s = sorted(list(s))\n    \n    # Check for adjacent character\n    for i in range(len(s) - 1):\n        if (s[i] == s[i + 1]):\n            return False\n    \n    return True\n\n# Driver Code"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\n\ndef freq_element(lst):\n    return Counter(lst)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_sum(arr):\n    # Initialize result\n    res = 0\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # Check if current element is repeated\n        if (arr[i] != arr[arr[i]-1]):\n            # If it is not repeated, then add its value to result\n            res += arr[i]\n\n    return res\n\n\n# Driver Code"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ndef text_match(text):\n    pattern = r'\\b[a-z]+_?\\w*\\b'\n    return bool(re.search(pattern, text))\n\n\n"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(str):\n    if str.startswith('python'):\n        return True\n    else:\n        return False\n\n# Test case"], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(arr):\n    # Base case: if there is only one element in the array\n    if len(arr) == 1:\n        return arr[0]\n\n    # Find the greatest common divisor (GCD) of all elements\n    gcd = arr[0]\n    for i in range(1, len(arr)):\n        gcd = gcd_of_two_numbers(gcd, arr[i])\n\n    return gcd\n\n\n# Helper function to calculate GCD of two numbers\ndef gcd_of_two_numbers(a, b):\n    while(b != 0):\n        temp = b\n        b = a % b\n        a = temp\n\n    return a\n\n\n# Test the function with the provided test cases"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef distinct(nums):\n    if len(set(nums)) != len(nums):\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a,b):\n    if (a==0 or b==0): \n        return 1\n    else:\n        return (compute_Last_Digit(a//b, b%10)) * (a % 10)\n"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(num):\n    # Initialize the result variable\n    res = 0\n\n    # Iterate through each bit in the number\n    while num > 0:\n        # Check if the current bit is odd\n        if (num & 1) != 0:\n            # Set the corresponding bit in the result\n            res += 1\n        # Right shift the number by 1\n        num >>= 1\n\n    return res\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(lst, n):\n    return [lst[i][n] for i in range(len(lst)) if len(lst[i]) > n]\n"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\nfrom typing import List\n\ndef min_length_list(lst:List[List[int]]) -> int:\n    return min(len(x) for x in lst)\n\n"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_triangle(a,b,c):\n    # Check for equality of sides\n    if (a == b and b == c) or (b == c and c == a) or (c == a and a == b):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(a,b):\n    return a*b\n"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(str):\n    if len(str) > 1:\n        return str[0] == str[-1]\n    else:\n        return True\n"], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    # Initialize count array\n    count = [0] * (max(arr) + 1)\n\n    # Count occurrences of elements in arr\n    for i in range(len(arr)):\n        count[arr[i]] += 1\n\n    # Create output array\n    output = [None] * len(arr)\n\n    # Build output array\n    for i in range(len(count)):\n        j = count[i]\n\n        while j > 0:\n            output[count[i] - 1] = arr[i]\n            j -= 1\n\n    # Copy the sorted elements back into the original array\n    for i in range(len(arr)):\n        arr[i] = output[i]\n\n    return arr\n\n"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(n, r, c):\n    return (c * r ** n) - 1\n"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n    rev = 0\n    temp = num\n    while(temp > 0):\n        dig = temp % 10\n        rev = rev * 10 + dig\n        temp //= 10\n\n    return (num - 2*rev) == 0\n\n"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(arr,n):\n    # Initialize result \n    res = arr[0]\n    \n    # Traverse all elements of array \n    for i in range(1,n): \n  \n        # If current element is greater than \n        # previous one then update result \n        if (arr[i] > res): \n            res = arr[i] \n  \n    return res\n\n# Driver Code "], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a,b):\n    if (a > 0 and b < 0) or (a < 0 and b > 0):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    return n*(3*n-1)//2\n"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, n):\n    # Initialize result and current sum\n    res = 0\n    curr_sum = 0\n\n    # Iterate through all possible subsequences\n    for i in range(n):\n\n        # If current element is greater than previous one,\n        # then update the current sum\n        if arr[i] > arr[i - 1]:\n            curr_sum += arr[i]\n\n        # If current element is less than previous one,\n        # then update the result with the minimum\n        # value of result and current sum\n        elif arr[i] < arr[i - 1]:\n            res = max(res, curr_sum)\n            curr_sum = 0\n\n    return res\n\n\n# Test case\narr = [2, 5, 6, 3, 7, 6, 5, 8]\nn = len(arr)\n"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_substrings(s):\n    # Initialize result and current substring\n    res = 0\n    curr_str = ''\n    \n    for i in range(len(s)):\n        # Add current character to current string\n        curr_str += s[i]\n        \n        # If current string is equal to its length, increment result\n        if len(curr_str) == len(s):\n            res += 1\n        \n        # If current string has more than one digit, add it to result\n        if len(curr_str) > 1:\n            res += int(curr_str)\n            \n    return res\n\n# Test the function"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(list):\n    # Initialize the minimum value with the first element of the list\n    min_value = list[0]\n\n    # Iterate through the list starting from the second element\n    for num in list[1:]:\n        if num < min_value:\n            min_value = num\n\n    return min_value\n\n"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(lst):\n    # Sort the list first\n    lst.sort()\n    \n    # Find the largest element and its index\n    largest = lst[-1]\n    largest_index = len(lst) - 1\n    \n    # Calculate the difference between the largest element and the second largest element\n    return largest - lst[largest_index] if largest_index > 0 else 0\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef sort_list_of_tuples(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda x: x[1])\n"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(lst):\n    if len(lst) == 0:\n        return 0\n\n    first_element = lst[0]\n    rest_of_lst = lst[1:]\n\n    # Recursively calculate the sum of the first element and the sum of the rest of the list\n    return first_element + recursive_list_sum(rest_of_lst)\n\n# Test case"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(lst):\n    c = 0\n    for i in lst:\n        if i > 0:\n            c += 1\n    return c\n"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    if n == 0:\n        return 1\n\n    # If n is even, then there are two possibilities\n    if n % 2 == 0:\n        return bell_number(n // 2) * bell_number(n // 2)\n\n    else:\n        return bell_number(n - 1) * bell_number(n - 1)\n\n\n# Driver Code"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    if len(arr) < 2:\n        return True\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            return False\n    return True\n\n\n# Test the function"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(list1,list2):\n    if len(list2) > len(list1):\n        return False\n\n    for i in range(len(list2)):\n        if list1[i] == list2[i]:\n            continue\n        else:\n            return False\n    return True\n\n"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples_list):\n    # Check if all tuples have the same length\n    for i in range(len(tuples_list)):\n        if len(tuples_list[i]) != len(tuples_list[0]):\n            return False\n\n    return True\n\n\n# Test case"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(arr):\n    \"\"\"\n    Sorts the given array in ascending order using comb sort algorithm\n    :param arr: List[int] - The input list to be sorted\n    :return: None\n    \"\"\"\n    gap = len(arr)\n    # Initial gap value is 1\n    while gap > 0:\n        # Find the first element that needs swapping\n        i = 0\n        while i < (gap-1) and arr[i] > arr[i+1]:\n            i += 1\n\n        if i == gap - 1:\n            break\n\n        # Swap the first two elements\n        temp = arr[i]\n        arr[i] = arr[i + 1]\n        arr[i + 1] = temp\n\n        # Reduce the gap for next iteration\n        gap //= 2\n\n    return arr\n\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef is_diff_of_squares(n):\n    if n < 0:\n        return False\n\n    # If n is even, it cannot be expressed as difference of two squares\n    if n % 2 == 0:\n        return False\n\n    # Check for odd factors\n    i = 3\n    while (i * i <= n):\n        if (n % i == 0):\n            return False\n        i += 2\n\n    return True\n\n\n# Driver Code"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\ndef multiple_split(string, delimiter):\n    return re.split(delimiter, string)\n"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, string):\n    if len(patterns) != len(string):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] not in string:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(tuples_list, k):\n    # Initialize result\n    res = []\n    \n    for tup in tuples_list:\n        if all(x % k == 0 for x in tup):\n            res.append(tup)\n            \n    return res\n\n# Test case\ntuples_list = [(6, 24, 12), (7, 9, 6), (12, 18, 21)]\nk = 6"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(n,m):\n    # Initialize result\n    res = 0\n\n    # Iterate over all possible positions\n    for i in range(m):\n        for j in range(n):\n            if (i + j < m and i - j >= 0 and \n                i + j >= 0 and i - j < n):\n                res += 1\n\n    return res\n\n\n# Test case"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff(num):\n    # Initialize sum of even and odd digits\n    sum_even = 0\n    sum_odd = 0\n\n    # Iterate through each digit in the number\n    while num > 0:\n        digit = num % 10\n\n        # Check if the digit is even or odd\n        if digit % 2 == 0:\n            sum_even += digit\n        else:\n            sum_odd += digit\n\n        num //= 10\n\n    return sum_even - sum_odd\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_with_odd_set_bits(n):\n    # Initialize count\n    count = 0\n\n    # Traverse through the given number\n    while (n > 0):\n\n        # If the least significant bit is set, increment count\n        if ((n & 1) != 0):\n            count += 1\n\n        n >>= 1\n\n    return count\n\n\n# Driver Code"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef word_len(word):\n    if len(word) % 2 != 0:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tup1, tup2):\n    return list(zip(tup1,tup2))\n"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\nimport math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3\n\n"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_char(string):\n    sum = 0\n    for i in range(len(string)):\n        sum += ord(string[i])\n    return chr(sum)\n"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    if n == 1:\n        return 2\n\n    # Initialize first two values of the sequence\n    a, b = 2, 1\n\n    for i in range(2, n):\n        c = (a + b) % 10\n        a = b\n        b = c\n\n    return b\n\n"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\nimport math\n\ndef surface_area_sphere(radius):\n    return 4 * math.pi * radius**2\n\n"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    # Calculate the sum of the first n odd numbers\n    return (n * (3 * n - 1)) // 2\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(arr):\n    # Create an empty dictionary\n    d = {}\n\n    # Iterate over each element in the array\n    for i in arr:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n\n    return d\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    # If n is negative, return -n\n    if n < 0:\n        return -n\n\n    # Find the first element in the list that is greater than or equal to n\n    for i in range(len(arr)):\n        if arr[i] >= n:\n            return arr[i]\n\n# Driver Code\narr = [3, 4, 5, 6, 7]"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef len_log(words):\n    max_len = 0\n    for w in words:\n        if len(w) > max_len:\n            max_len = len(w)\n    return max_len\n"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(list_of_strings, sub_string):\n    for i in range(len(list_of_strings)):\n        if sub_string in list_of_strings[i]:\n            return True\n    return False\n\n# Test the function"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(0, len(s)-2):\n        if s[i] != s[i+2]:\n            return False\n    return True\n\n"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a,b):\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    return min(tuples, key=lambda x: x[1])\n\n# Test case"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef min_length_sublist(list):\n    # Initialize result and current length\n    res = float('inf')\n    cur_len = 0\n\n    for i in range(len(list)):\n        # Check if list[i] is smaller than current element\n        if list[i] < list[cur_len]:\n            cur_len += 1\n        else:\n            res = min(res, cur_len)\n\n    return res\n\n\n# Driver Code"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(list_of_lists):\n    # Create an empty dictionary\n    freq_dict = {}\n\n    # Iterate through the list of lists\n    for sub_list in list_of_lists:\n        # Count the number of occurrences of each element in the sub-list\n        for elem in sub_list:\n            if elem not in freq_dict:\n                freq_dict[elem] = 0\n            freq_dict[elem] += 1\n\n    return freq_dict\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(lst):\n    return sum(lst)/len(lst)\n"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(num):\n    # Convert the number to binary\n    return bin(num)[2:]\n\n\n# Test the function"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(num):\n    # If the given number is already a palindrome, return it as is\n    if num == str(num)[::-1]:\n        return num\n\n    # Find the largest digit in the number\n    max_digit = int(str(num)[len(str(num))-1])\n\n    # Iterate through all possible digits from 9 down to 2\n    for i in range(max_digit-1, -1, -1):\n        # Check if the current digit can be placed at the beginning of the number\n        if str(i) + str(num)[i:] == str(num)[::-1]:\n            return int(str(i) + str(num))\n\n    # If no valid palindrome is found, return None\n    return None\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, n, k):\n    # If k is greater than the length of the array,\n    if (k > n):\n        return -1\n\n    # Find the index where k should be inserted\n    i = n - 1\n    while (i >= 0 and arr[i] < k):\n        i -= 1\n\n    # Return the element at the position k\n    return arr[i + 1]\n\n\n# Driver Code\narr = [12, 3, 5, 7, 19]\nn = len(arr)\nk = 5"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(snake_str):\n    # Split the input string by underscore\n    words = snake_str.split('_')\n    # Join the words with underscores and capitalize each word\n    return ''.join(word.capitalize() for word in words)\n\n# Test the function"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    if n < 0 or m < 0:\n        return 0\n\n    # If the first element is 0\n    if n == 0 and m == 0:\n        return 1\n\n    # If the second element is 0\n    elif n == 1 and m == 0:\n        return 2\n\n    # If the third element is 0\n    elif n == 2 and m == 0:\n        return 4\n\n    # If the fourth element is 0\n    elif n == 3 and m == 0:\n        return 8\n\n    # If the fifth element is 0\n    elif n == 4 and m == 0:\n        return 16\n\n    # If the sixth element is 0\n    elif n == 5 and m == 0:\n        return 32\n\n    # If the seventh element is 0\n    elif n == 6 and m == 0:\n        return 64\n\n    # If the eighth element is 0\n    elif n == 7 and m == 0:\n        return 128\n\n    # If the ninth element is 0\n    elif n == 8 and m == 0:\n        return 256\n\n    # If the tenth element is 0\n    elif n == 9 and m == 0:\n        return 512\n\n    # If the eleventh element is 0\n    elif n == 10 and m == 0:\n        return 1024\n\n    # If the twelfth element is 0\n    elif n == 11 and m == 0:\n        return 2048\n\n    # If the thirteenth element is 0\n    elif n == 12 and m == 0:\n        return 4096\n\n    # If the fourteenth element is 0\n    elif n == 13 and m == 0:\n        return 8192\n\n    # If the fifteenth element is 0\n    elif n == 14 and m == 0:\n        return 16384\n\n    # If the sixteenth element is 0\n    elif n == 15 and m == 0:\n        return 32768\n\n    # If the seventeenth element is 0\n    elif n == 16 and m == 0:\n        return 65536\n\n    # If the eighteenth element is 0\n    elif n == 17 and m == 0:\n        return 131072\n\n    # If the nineteenth element is 0\n    elif n == 18 and m == 0:\n        return 262144\n\n    # If the twentieth element is 0\n    elif n == 19 and m == 0:\n        return 524288\n\n    # If the twenty-first element is 0\n    elif n == 20 and m == 0:\n        return 1048576\n\n    # If the twenty-second element is 0\n    elif n == 21 and m == 0:\n        return 2097152\n\n    # If the twenty-third element is 0\n    elif n == 22 and m == 0:\n        return 4194304\n\n    # If the twenty-fourth element is 0\n    elif n == 23 and m == 0:\n        return 8388608\n\n    # If the twenty-fifth element is 0\n    elif n == 24 and m == 0:\n        return 16777216\n\n    # If the twenty-sixth element is 0\n    elif n == 25 and m == 0:\n        return 33554432\n\n    # If the twenty-seventh element is 0\n    elif n == 26 and m == 0:\n        return 67108864\n\n    # If the twenty-eighth element is 0\n    elif n == 27 and m == 0:\n        return 134217728\n\n    # If the twenty-ninth element is 0\n    elif n == 28 and m == 0:\n        return 268435456\n\n    # If the thirty-first element is 0\n    elif n == 29 and m == 0:\n        return 536870912\n\n    # If the thirty-second element is 0\n    elif n == 30 and m == 0:\n        return 1073741824\n\n    # If the thirty-third element is 0\n    elif n == 31 and m == 0:\n        return 2147483648\n\n    # If the thirty-fourth element is 0\n    elif n == 32 and m == 0:\n        return 4294967296\n\n    # If the thirty-fifth element is 0\n    elif n == 33 and m == 0:\n        return 8589934592\n\n    # If the thirty-sixth element is 0\n    elif n == 34 and m == 0:\n        return 17179869184\n\n    # If the thirty-seventh element is 0\n    elif n == 35 and m == 0:\n        return 34359738368\n\n    # If the thirty-eleventh element is 0\n    elif n == 36 and m == 0:\n        return 68719476736\n\n    # If the thirty-twentynd element is 0\n    elif n == 37 and m == 0:\n        return 137438953472\n\n    # If the thirty-thirty-second element is 0\n    elif n == 38 and m == 0:\n        return 274877906944\n\n    # If the thirty-thirty-third element is 0\n    elif n == 39 and m == 0:\n        return 549755813888\n\n    # If the thirty-thirty-fourth element is 0\n    elif n == 40 and m == 0:\n        return 1099511627776\n\n    # If the thirty-thirty-fifth element is 0\n    elif n == 41 and m == 0:\n        return 2199023255552\n\n    # If the thirty-thirty-sixth element is 0\n    elif n == 42 and m == 0:\n        return 4398046511104\n\n    # If the thirty-thirty-seventh element is 0\n    elif n == 43 and m == 0:\n        return 8796093022208\n\n    # If the thirty-thirty-eighth element is 0\n    elif n == 44 and m == 0:\n        return 17592186044416\n\n    # If the thirty-thirty-ninth element is 0\n    elif n == 45 and m == 0:\n        return 35184372088832\n\n    # If the thirty-fourth element is 0\n    elif n == 46 and m == 0:\n        return 70368744177664\n\n    # If the thirty-fifth element is 0\n    elif n == 47 and m == 0:\n        return 140737488355328\n\n    # If the thirty-sixth element is 0\n    elif n == 48 and m == 0:\n        return 281474976710656\n\n    # If the thirty-seventh element is 0\n    elif n == 49 and m == 0:\n        return 562949953421312\n\n    # If the thirty-eighth element is 0\n    elif n == 50 and m == 0:\n        return 1125899906842624\n\n    # If the thirty-ninth element is 0\n    elif n == 51 and m == 0:\n        return 2251799813684240\n\n    # If the forty-first element is 0\n    elif n == 52 and m == 0:\n        return 4503599627368480\n\n    # If the forty-second element is 0\n    elif n == 53 and m == 0:\n        return 9007199254740992\n\n    #"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(lst):\n    return sorted([list(map(lambda x: x.lower(), lst[i])) for i in range(len(lst))], key=lambda x:x[0])\n"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(lst):\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(list1, tuple_list):\n    # Create an empty list\n    new_list = []\n    \n    # Iterate through each element in the first list\n    for i in range(len(list1)):\n        # Add the current element to the new list\n        new_list.append(list1[i])\n        \n    # Return the new list\n    return tuple(new_list) \n\n# Test case"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_hexadecimal(start, end):\n    # Initialize the result variable\n    result = 0\n\n    # Iterate over the range from start to end\n    for i in range(start, end + 1):\n\n        # Check if the number is a hexadecimal digit\n        if (i >= 48 and i <= 57) or (i >= 65 and i <= 90) or (i >= 97 and i <= 122):\n            result += 1\n\n    return result\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\nfrom heapq import heappush, heappop\ndef merge_sorted_list(list1,list2,list3):\n    # Create an empty list for the result\n    res = []\n    \n    # Push all elements from the three lists in the heap\n    heappush(res,list1)\n    heappush(res,list2)\n    heappush(res,list3)\n    \n    # Merge the three heaps and push the smallest element of each heap\n    while len(res) > 1:\n        # Pop the two smallest elements from the first heap\n        x = heappop(res)\n        y = heappop(res)\n        \n        # Push their combined value into the result list\n        res.append(x + y)\n        \n    return res\n\n# Test the function with provided test cases"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_equivalent(string):\n    # Initialize result variable\n    res = 0\n\n    # Traverse through each character in the string\n    for i in range(len(string)):\n        if (string[i] != '0'):\n            # If current character is not zero, increment result by 2\n            res += 2\n\n    return res\n\n\n# Driver Code"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(lst, start_range, end_range):\n    # Initialize result\n    res = []\n    \n    # Iterate through each element in the list\n    for i in lst:\n        if i[0] > start_range or i[1] < start_range + 1 or i[0] < end_range - 1 or i[1] > end_range:\n            res.append(i)\n            \n    return res\n\n# Test the function"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(list_of_lists):\n    # Initialize result with the first element of each inner list\n    result = []\n    \n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            if list_of_lists[i][j] not in result:\n                result.append(list_of_lists[i][j])\n                \n    return result\n\n\n# Test case"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(radius, height):\n    return 2 * (3.14 * radius * (radius + height))\n"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(lst):\n    # Create an empty dictionary\n    freq_dict = {}\n\n    # Iterate over the list of tuples\n    for tup in lst:\n        # Get the first element of the tuple\n        key = tup[0]\n        # Get the second element of the tuple\n        value = tup[1]\n\n        # Check if the key is already present in the dictionary\n        if key not in freq_dict:\n            freq_dict[key] = [value]\n        else:\n            # If the key is already present, append the value to its existing list\n            freq_dict[key].append(value)\n\n    return freq_dict\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef is_empty(lst):\n    for i in lst:\n        if len(i) > 0:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(t):\n    return int(''.join(str(x) for x in t))\n"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(lst):\n    return [float(x) for x in lst] \n"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(str):\n    return str.split() \n"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr,n):\n    count = 0\n    for i in range(0,n):\n        if arr[i] != arr[count]:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(lst):\n    # Sort the list in descending order\n    lst.sort(reverse=True)\n    \n    # Return the first two elements of the sorted list\n    return lst[0] * lst[1]\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, n, target):\n    arr.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n\n        while (left < right):\n            if (arr[i] + arr[left] + arr[right] == target):\n                return True\n            elif (arr[i] + arr[left] + arr[right] > target):\n                right -= 1\n            else:\n                left += 1\n    return False\n\n\n# Driver Code"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\ndef smart_number(n):\n    if n <= 0:\n        return 0\n\n    # If the given number is divisible by 3 or 5, it's a smart number\n    if (n % 3 == 0 or n % 5 == 0):\n        return 3 * n\n\n    # Otherwise, it's not a smart number\n    else:\n        return n\n\n"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(n):\n    # Initialize the sum of amicable numbers\n    total_sum = 0\n\n    # Iterate through all numbers from 1 to n\n    for i in range(1, n + 1):\n\n        # If the current number is not prime\n        if (not is_prime(i)):\n\n            # Calculate the sum of divisors of the current number\n            divisor_sum = sum(divisor for divisor in range(1, i) if i % divisor == 0)\n\n            # Check if the divisor sum is equal to the current number\n            if divisor_sum == i:\n                total_sum += i\n\n    return total_sum\n\n\n# Helper function to check if a number is prime\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(real, imaginary):\n    return math.atan(imaginary/real) * 180 / math.pi\n"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(s, n):\n    count = 0\n    for i in range(n-1, len(s)):\n        if s[i] == '0':\n            count += 1\n        else:\n            count -= 1\n    return count\n"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_divisors(x,y):\n    # Initialize result variable\n    res = 0\n\n    # Iterate from 1 to x and y\n    for i in range(1,x+1) if x % i == 0 else range(1,y+1) if y % i == 0:\n        res += i\n\n    return res\n\n"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a,b):\n    if b == 0:\n        return 0\n\n    # If b is positive, we can use multiplication \n    if b > 0:\n        return a + multiply_int(a,b-1)\n    \n    # If b is negative, we need to subtract b from a and then \n    # multiply by -1\n    else:\n        return -(multiply_int(a,-b)) \n"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    # Your code here\n    return [word for word in words if len(word) > n]<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef is_magic_square(matrix):\n    # Check rows and columns for symmetry\n    for i in range(len(matrix)):\n        if matrix[i][i] != matrix[i][len(matrix) - 1 - i]:\n            return False\n\n    # Check the main diagonal\n    if matrix[0][0] != matrix[len(matrix) - 1][len(matrix) - 1]:\n        return False\n\n    # Check the secondary diagonal\n    if matrix[0][len(matrix) - 1] != matrix[len(matrix) - 1][0]:\n        return False\n\n    return True\n\n\n# Test cases"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    # Create an empty dictionary\n    freq = {}\n    \n    # Iterate over each element of the list\n    for i in lst:\n        if i not in freq:\n            freq[i] = 0\n        freq[i] += 1\n    \n    # Find the key with the highest value\n    return max(freq, key=freq.get)\n\n# Test the function"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(s):\n    # Create two sets for vowels and consonants\n    vowels = set('aeiouAEIOU')\n    s_set = set(s)\n    \n    # Initialize pointers for vowels and consonants\n    i, j = 0, len(s) - 1\n    \n    while i < j:\n        if s_set[i] in vowels or s_set[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        \n    return ''.join(s)\n\n# Test the function with provided test cases"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return str(tuple(tup))\n"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(nums):\n    return sum(filter(lambda x: x<0, nums))\n"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr, n, p):\n    # Check if the last element is even\n    if arr[n - 1] % 2 != 0:\n        return \"ODD\"\n\n    # If the last element is odd, perform the operation p times\n    for _ in range(p):\n        arr[n - 1] += 2\n\n    # Check if the new last element is even\n    if arr[n - 1] % 2 != 0:\n        return \"EVEN\"\n\n    return \"ODD\"<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal(num):\n    return num * (2*num - 1)\n"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_elect_bill(wattage, hours):\n    # Calculate the cost per hour\n    cost_per_hour = 0.13\n\n    # Calculate the total cost\n    total_cost = wattage * hours * cost_per_hour\n\n    return total_cost\n\n\n# Test case"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            count += 1\n    return float(count) / len(arr)\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n < 0:\n        return False\n\n    # If n is power of 2, then it can be expressed as sum of powers of 2\n    while (n != 1 and n % 2 == 0):\n        n = n // 2\n\n    # If n is not power of 2, then it cannot be expressed as sum of powers of 2\n    return n != 1\n\n\n# Test case"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\nimport math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\n"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(lst):\n    # Your code here\n    return [x for x in lst if len(x) == 1] \n\n# Test Case"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(arr):\n    # Find the index of the largest element\n    max_index = len(arr) - 1\n\n    while max_index > 0:\n        # If the current element is greater than its neighbor,\n        if arr[max_index] > arr[max_index - 1]:\n            # Swap them\n            temp = arr[max_index]\n            arr[max_index] = arr[max_index - 1]\n            arr[max_index - 1] = temp\n        else:\n            break\n        max_index -= 1\n\n    # Reverse the first k elements\n    for i in range(len(arr), 0, -1):\n        if i != max_index:\n            temp = arr[i]\n            arr[i] = arr[i - 1]\n            arr[i - 1] = temp\n    return arr\n\n"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1,list2,list3):\n    # Initialize result variable\n    res = 0\n\n    # Iterate through each element of list1\n    for i in range(len(list1)):\n        # Check if current element is present in both list2 and list3\n        if (list1[i] in list2) and (list1[i] in list3):\n            # Increment result by 1\n            res += 1\n\n    return res\n\n\n# Driver Code"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tup):\n    return len(list(set(tuple(x) for x in tup)))\n"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_pairs(arr,n):\n    # Initialize result\n    res = 0\n\n    # Iterate over all elements\n    for i in range(n-1):\n\n        # Iterate over all other elements\n        for j in range(i+1,n):\n\n            # Calculate difference and add it to result\n            res += abs(arr[i] - arr[j])\n\n    return res\n\n\n# Driver Code\narr = [1, 8, 9, 15, 16]\nn = len(arr)"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_abs_diff(arr):\n    # Initialize result with the first element of the array\n    res = arr[0]\n\n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Calculate the absolute difference between the current element and the previous one\n        diff = abs(arr[i] - arr[i-1])\n\n        # Update the result if the current difference is greater than the previously recorded result\n        if (diff > res):\n            res = diff\n\n    return res\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    return sum(ord(char) for char in string)\n\n# Test case"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\nfrom typing import List\n\n"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(num):\n    # Initialize result and current digit\n    res = 0\n    curr_digit = 0\n\n    while num > 0:\n        curr_digit = num % 10\n        res += curr_digit\n        num //= 10\n\n    return res\n\n\n# Test case"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(arr, n):\n    # Initialize result and dp array\n    res = 0\n    dp = [0] * (n + 1)\n    \n    # Iterate through each element in arr\n    for i in range(1, n + 1):\n        # If current element is greater than previous element\n        if arr[i - 1] > arr[i - 2]:\n            # Update result with maximum of current value or previous value\n            res = max(res, dp[i - 1])\n        else:\n            # Update dp array with current value\n            dp[i] = dp[i - 1]\n        \n        # Update dp array with current value\n        dp[i] += 1\n    \n    return res\n\n\n# Test case\narr = [1, 2, 3, 4, 5, 3, 2]\nn = len(arr)"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_contain_B(num):\n    if num % 2 != 0:\n        return False\n    else:\n        for i in range(2,int(num**0.5)+1):\n            if (num % i == 0):\n                return False\n        return True\n"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(x,y):\n    if x % y == 0 and y % x == 0:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n\n        merge_sort(L)\n        merge_sort(R)\n\n        i = j = k = 0\n\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\n"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\nimport math\ndef parabola_vertex(x, y, h):\n    return (-h/2, (y - h*x)/x) if x != 0 else None\n"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef specified_element(matrix, index):\n    return matrix[index] if len(index) == 2 else matrix\n"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(num):\n    # Initialize result variable\n    res = 0\n\n    # Iterate through each bit in the number\n    for i in range(len(bin(num)) - 2):\n\n        # Check if the current bit is even or odd\n        if (bin(num)[i] != '0' and bin(num)[i + 1] != '0'):\n            res += int(bin(num)[i])\n\n    return res\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tup):\n    return tuple(map(int, tup))<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef encode_list(list):\n    # Initialize result\n    res = []\n    \n    for i in range(len(list)):\n        if i == len(list) - 1:\n            res.append(list[i])\n        else:\n            res.append(list[i] + \" \" + str(i))\n            \n    return res\n"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr,k):\n    # Your code here\n    if len(arr)==1:\n        return 0\n\n    count=0\n    for i in range(len(arr)):\n        if arr[i]%k==0:\n            count+=1\n    return count\n\n\n# Test Case"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if (month == 'January' or month == 'February'):\n        if(day <= 18):\n            return \"winter\"\n        elif(day > 18 and day <= 25):\n            return \"spring\"\n        else:\n            return \"summer\"\n    elif(month == 'March' or month == 'April' or month == 'May'):\n        if(day <= 20):\n            return \"spring\"\n        elif(day > 20 and day <= 27):\n            return \"summer\"\n        else:\n            return \"autumn\"\n    elif(month == 'June' or month == 'July' or month == 'August'):\n        if(day <= 23):\n            return \"summer\"\n        elif(day > 23 and day <= 30):\n            return \"autumn\"\n        else:\n            return \"fall\"\n"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\nimport math\ndef solution(a, b, n):\n    # Find the greatest common divisor of a and b\n    gcd = math.gcd(a, b)\n\n    # Calculate the quotient when n is divided by the GCD\n    q = n // gcd\n\n    # Calculate the remainder when n is divided by the GCD\n    r = n % gcd\n\n    # Return the quotient and remainder as a tuple\n    return ('x = ', q, ', y = ', r)\n\n"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1,list2):\n    return [x for x in list1 if x not in list2]\n"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    if n == 0:\n        return 0\n\n    # If n is even, we can use the formula: \n    # Sum_series(n) = (n/2)*(n+1)\n    elif n % 2 == 0:\n        return ((n // 2) * (n + 1))\n\n    else:\n        # If n is odd, we can use the formula: \n        # Sum_series(n) = (n/2)*((n - 1)/2 + (n - 3)/2 + ... + 1/2)\n        return ((n // 2) * ((n - 1) // 2 + (n - 3) // 2 + ... + 1 // 2))\n\n\n\n# Test cases"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\nimport math\n\ndef area_polygon(n,s):\n    return (n * s**2) / (4 * math.tan(math.pi/n))\n"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(a,b):\n    if (a % b == 0 and b % a == 0):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(str):\n    # Create an empty list\n    char_count = []\n    \n    # Iterate through the string\n    for i in str:\n        if i.isalpha():\n            # Check if character is lowercase or uppercase\n            if i.islower():\n                char_count.append(ord(i) - ord('a'))\n            else:\n                char_count.append(ord(i) - ord('A'))\n\n    return len(char_count)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr,n):\n    # Initialize result\n    res = 0\n\n    # Iterate over all possible pairs\n    for i in range(n-1):\n\n        for j in range(i+1,n):\n\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                res += 1\n\n    return res\n\n"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    if n==0:\n        return 1\n    else:\n        while (n&1)==0:\n            n=n>>1\n        return n+1\n"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr,n,x):\n    count = 0\n    for i in range(0,n):\n        if arr[i] == x:\n            count += 1\n    return count\n\n# Test the function with provided test cases"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    if n < 0:\n        return None\n\n    # The first two terms of the sequence are 3 and 5\n    if n <= 2:\n        return 3, 5\n\n    # Calculate the nth term using the formula\n    a = 3\n    b = 5\n    c = 8\n\n    for i in range(3, n + 1):\n        c = (a * c - b * (i - 1)) // (i - 2)\n        a = b\n        b = c\n\n    return c\n\n"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(lst, start, end):\n    if start > end:\n        return 0\n\n    res = lst[start:end+1]\n    return sum(res)\n"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    return 5 * (n - 2)\n"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(str):\n    # Your code here\n    return str.count('std') \n\n# Test case"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\nimport re\n\ndef remove_splchar(str):\n    return re.sub(r'[^a-zA-Z0-9]', '', str)\n"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(key_value_pairs):\n    return {k: list(v) for k, v in key_value_pairs}<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(s):\n    stack = []\n    for char in s:\n        if char == '(' or char == '{' or char == '[':\n            stack.append(char)\n        elif char == ')' and len(stack) > 0 and stack[-1] == '(':\n            stack.pop()\n        elif char == '}' and len(stack) > 0 and stack[-1] == '{':\n            stack.pop()\n        elif char == ']' and len(stack) > 0 and stack[-1] == '[':\n            stack.pop()\n        else:\n            return False\n\n    return len(stack) == 0\n\n\n# Test the function"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a,b,c):\n    return (a+b+c)/2\n"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef lcm(x,y):\n    if x>y:\n        greater=x\n        smaller=y\n    else:\n        greater=y\n        smaller=x\n\n    while True:\n        if((greater%smaller)==0):\n            return smaller\n        greater+=smaller\n        smaller+=1\n\n\ndef solution(l,r):\n    for i in range(l,r+1):\n        for j in range(i+1,r+2):\n            if(lcm(i,j)<r and lcm(i,j)>l):\n                print(i,j)\n\nsolution(3,8) # 3,6\nsolution(4,9) # 4,6\nsolution(5,7) # 5,6\nsolution(6,10) # 6,8\nsolution(10,15) # 10,12\nsolution(15,20) # 15,18\nsolution(20,25) # 20,24\nsolution(25,30) # 25,28\nsolution(30,35) # 30,36\nsolution(35,40) # 35,38\nsolution(40,45) # 40,42\nsolution(45,50) # 45,48\nsolution(50,55) # 50,54\nsolution(55,60) # 55,58\nsolution(60,65) # 60,63\nsolution(65,70) # 65,66\nsolution(70,75) # 70,73\nsolution(75,80) # 75,76\nsolution(80,85) # 80,83\nsolution(85,90) # 85,86\nsolution(90,95) # 90,93\nsolution(95,100) # 95,96\nsolution(100,105) # 100,103\nsolution(105,110) # 105,106\nsolution(110,115) # 110,111\nsolution(115,120) # 115,116\nsolution(120,125) # 120,121\nsolution(125,130) # 125,126\nsolution(130,135) # 130,131\nsolution(135,140) # 135,136\nsolution(140,145) # 140,141\nsolution(145,150) # 145,146\nsolution(150,155) # 150,151\nsolution(155,160) # 155,156\nsolution(160,165) # 160,161\nsolution(165,170) # 165,166\nsolution(170,175) # 170,171\nsolution(175,180) # 175,176\nsolution(180,185) # 180,181\nsolution(185,190) # 185,186\nsolution(190,195) # 190,191\nsolution(195,200) # 195,196\nsolution(200,205) # 200,201\nsolution(205,210) # 205,206\nsolution(210,215) # 210,211\nsolution(215,220) # 215,216\nsolution(220,225) # 220,221\nsolution(225,230) # 225,222\nsolution(230,235) # 230,231\nsolution(235,240) # 235,236\nsolution(240,245) # 240,241\nsolution(245,250) # 245,242\nsolution(250,255) # 250,251\nsolution(255,260) # 255,252\nsolution(260,265) # 260,261\nsolution(265,270) # 265,262\nsolution(270,275) # 270,271\nsolution(275,280) # 275,272\nsolution(280,285) # 280,281\nsolution(285,290) # 285,282\nsolution(290,295) # 290,291\nsolution(295,300) # 295,292\nsolution(300,305) # 300,301\nsolution(305,310) # 305,302\nsolution(310,315) # 310,311\nsolution(315,320) # 315,312\nsolution(320,325) # 320,321\nsolution(325,330) # 325,322\nsolution(330,335) # 330,331\nsolution(335,340) # 335,332\nsolution(340,345) # 340,341\nsolution(345,350) # 345,342\nsolution(350,355) # 350,351\nsolution(355,360) # 355,352\nsolution(360,365) # 360,361\nsolution(365,370) # 365,362\nsolution(370,375) # 370,371\nsolution(375,380) # 375,372\nsolution(380,385) # 380,381\nsolution(385,390) # 385,382\nsolution(390,395) # 390,383\nsolution(395,400) # 395,384\nsolution(400,405) # 400,401\nsolution(405,410) # 405,402\nsolution(410,415) # 410,403\nsolution(415,420) # 415,404\nsolution(420,425) # 420,405\nsolution(425,430) # 425,406\nsolution(430,435) # 430,407\nsolution(435,440) # 435,408\nsolution(440,445) # 440,409\nsolution(445,450) # 445,410\nsolution(450,455) # 450,411\nsolution(455,460) # 455,412\nsolution(460,465) # 460,413\nsolution(465,470) # 465,414\nsolution(470,475) # 470,415\nsolution(475,480) # 475,416\nsolution(480,485) # 480,417\nsolution(485,490) # 485,418\nsolution(490,495) #"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef string_literals(string, literal):\n    return any(literal in s for s in string.split())\n"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\ndef is_num_keith(num):\n    # Check for odd numbers\n    if num % 2 != 0:\n        return False\n\n    # Check for divisibility by 3 and 5\n    if (num % 3 == 0 and num % 5 == 0):\n        return False\n\n    # If all checks pass, it's a Keith number\n    return True\n\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nimport math\n\ndef distance(lat1, lon1, lat2, lon2):\n    # Convert degrees to radians\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    # Haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n\n    r = 6371  # Radius of earth in kilometers\n    return c * r\n\n"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(strs):\n    if not strs:\n        return \"\"\n    \n    # Find the shortest string\n    min_str = min(strs, key=len)\n    \n    for i in range(len(min_str)):\n        char = min_str[i]\n        \n        for j in strs:\n            if j[i] != char:\n                return min_str[:i]\n                \n    return min_str\n\n# Test the function with provided test cases"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\n\ndef find_character(text):\n    # Regular expression pattern\n    pattern = r'[a-zA-Z0-9]'\n    \n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n\n# Test the function"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\nfrom collections import Counter\n\ndef count_pairs(arr, k):\n    # Count occurrences of each number\n    counter = Counter(arr)\n    \n    # Initialize result\n    res = 0\n    \n    # Iterate over elements\n    for i in range(len(arr)):\n        if (counter[i] > 0 and \n            arr[i + k] - arr[i] == k):\n            res += counter[i]\n            \n    return res\n\n"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(lst, num):\n    # Your code goes here\n    return [x for x in lst if x > num] \n\n# Test case"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\nimport math\ndef parabola_focus(x,y):\n    return (-y/((4*x**2)+(8*y)), (x/(4*x**2)+(8*y))) \n"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\ndef check_literals(string, pattern):\n    return bool(re.search(pattern, string))\n"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(str1, str2, l1, l2):\n    if l1 < 0 or l2 < 0:\n        return 0\n\n    if str1[l1] == str2[l2]:\n        return 1 + longest_common_subsequence(str1, str2, l1 - 1, l2 - 1)\n    else:\n        return max(longest_common_subsequence(str1, str2, l1 - 1, l2), \n                   longest_common_subsequence(str1, str2, l1, l2 - 1))\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef isProductOfTwoSquares(n):\n    # If n is even, then it cannot be expressed as the product of two squares\n    if (n % 2 == 0):\n        return False\n\n    # Check for odd factors\n    i = 1\n    while (i * i <= n):\n        if ((n % i == 0) and (n // i != i)):\n            return True\n        i += 1\n\n    return False\n\n\n# Driver Code"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(arr,n):\n    # if n is odd then it will be in the middle of array \n    if (n % 2 != 0):\n        return arr[n//2]\n\n    # If n is even then it will be at the middle element\n    else:\n        return arr[(n-1)//2] + 1\n\n# Driver Code"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x,y):\n    if x < 0 or y < 0:\n        return 0\n    elif x > 3 or y > 3:\n        return 0\n    else:\n        return 1\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(month):\n    if (month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\"):\n        return False\n    else:\n        return True\n"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(str):\n    if str.count(' ') > 0 or str.isdigit() == False:\n        return True\n    else:\n        return False\n\n# Test the function"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tup):\n    return list(set(tup))\n"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal_num):\n    # Convert Octal Number to Decimal\n    return int(str(octal_num), 8)\n\n# Driver Code"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr, x):\n    low = 0\n    high = len(arr)-1\n\n    while(low <= high):\n        mid = (low + high)//2\n\n        if arr[mid] < x:\n            low = mid+1\n        elif arr[mid] > x:\n            high = mid-1\n        else:\n            return mid\n\n    return -1\n\n"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(lst, k):\n    # Your code here\n    return [x for x in lst if len(x) < k] \n\n# Test case"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(x,y,z):\n    return x**y*z\n"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nimport math\n\ndef largest_triangle(a,b,c):\n    # Calculate the semi-major and semi-minor axes of the ellipse\n    A = 2 * (a + b)\n    B = 2 * (b - c)\n\n    # Calculate the area of the ellipse\n    C = math.sqrt(A * B) / 2\n\n    # Calculate the perimeter of the triangle\n    D = math.sqrt((A**2 + B**2 - C**2)**2 + 4 * C**2)\n\n    return int(D)\n\n"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    if n==0:\n        return 0\n    else:\n        while (n%2==0):\n            n=n//2\n        return int(n)\n"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(lst):\n    # Your code here\n    return [i for i, x in enumerate(lst) if x == max(x)]\n\n"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    if len(lst) != 0:\n        return lst[0] in lst\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    return ''.join([char for char in string if int(char)%2!=0])\n"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_distance(x,y):\n    count = 0\n    for i in range(max(x,y)):\n        if x % 2 != y % 2:\n            count += 1\n        else:\n            pass\n    return count\n"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(string, char):\n    return string.count(char)\n"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tup):\n    # Initialize count\n    count = 0\n\n    # Traverse through all pairs\n    for i in range(len(tup)):\n        for j in range(i + 1, len(tup)):\n            if tup[i] > tup[j]:\n                count += 1\n\n    return count\n\n"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuples):\n    return tuple(x + y for x, y in tuples)<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(s):\n    # Initialize the result and the current subsequence length\n    res = 0\n    curr_len = 1\n\n    # Iterate through the string\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            # If the current character is different from the previous one,\n            # reset the current subsequence length\n            curr_len = 1\n        else:\n            # Otherwise, increment the current subsequence length\n            curr_len += 1\n\n        # Update the result with the maximum length of the current subsequence\n        res = max(res, curr_len)\n\n    return res\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(decimal):\n    # Regular expression pattern for checking decimal numbers\n    pattern = r'^-?\\d+(\\.\\d+)?$'\n    \n    # Check if the input string matches the pattern\n    if re.match(pattern, decimal):\n        return True\n    else:\n        return False\n\n\n# Test the function"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, x):\n    # Find the index of the parent node\n    p = (len(heap) - 2) // 2\n\n    # If the parent is smaller than the current node,\n    # swap them and continue searching in the left subtree\n    if x < heap[p]:\n        heap[p], x = x, heap[p]\n\n    # If the parent is greater than the current node,\n    # swap them and continue searching in the right subtree\n    elif x > heap[p]:\n        heap[p], x = x, heap[p]\n\n    # If the parent is equal to the current node,\n    # return the current node as it is already sorted\n    else:\n        return x\n\n# Driver code\nheap = [25, 44, 68, 21, 39, 23, 89]"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\n\ndef is_allowed_specific_char(string):\n    # Check if the input string contains only allowed characters\n    return bool(re.match(\"[a-zA-Z0-9]\", string))\n\n# Test the function with provided data points"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(num):\n    # Initialize the count of numbers with specific bit pattern\n    count = 0\n\n    # Iterate through each bit position from 0 to 31\n    for i in range(32):\n\n        # Check if the ith bit is set (1)\n        if ((num >> i) & 1) == 1:\n\n            # If the number has an odd number of 1s at this bit, increment the count\n            if (i % 2 == 1):\n                count += 1\n\n    return count\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    return (n*(n+1)*(2*n+1)//6)\n"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(str1, str2):\n    return tuple([str1[i] + str2[i] for i in range(len(str1))]) \n"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\nimport math\n\ndef rad_to_deg(rad):\n    return (rad * 180 / math.pi) # math.pi is the constant pi in Python\n"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(list):\n    # Your code goes here\n    res = []\n    for i in range(len(list)):\n        if len(list[i]) == 1:\n            res.append(list[i])\n        else:\n            temp = list[i][0] + 1\n            while temp < len(list[i]):\n                res.append(list[i][temp])\n                temp += 1\n    return res\n"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1,list2):\n    for i in list2:\n        if not i in list1:\n            return False\n    return True\n"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_Repeated_Char(str):\n    # Initialize count\n    count = 0\n\n    for i in str:\n        if str.count(i) > 1:\n            count += 1\n\n    return str[0] if count > 1 else None\n\n"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(x,y):\n    if x>y:\n        return y-x\n    else:\n        return x-y\n"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(tup, n):\n    # Initialize min and max\n    min = tup[0]\n    max = tup[0]\n\n    # Iterate through the list\n    for i in range(1, len(tup)):\n        if tup[i] < min:\n            min = tup[i]\n        elif tup[i] > max:\n            max = tup[i]\n\n    return min, max\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(text):\n    # Replace max number of special characters\n    text = text.replace(\" \",\":\")\n    text = text.replace(\",\",\":\")\n    text = text.replace(\".\",\":\")\n\n    return text\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(numbers):\n    for i in range(len(numbers)):\n        if numbers[i] % 2 == 0:\n            return numbers[i]\n    return None\n\n# Test the function"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    return tup[0].type() == tup[1].type() and tup[2].type() == tup[3].type() and tup[4].type() == tup[5].type()\n"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, n):\n    # If no elements are present, return False\n    if n == 0:\n        return False\n\n    # If the first element is greater than the last element,\n    # then there can't be any majority element\n    if arr[0] > arr[n - 1]:\n        return False\n\n    # Find the middle index of the array\n    mid = (n + 1) // 2\n\n    # Check if the middle element is greater than the next element\n    if arr[mid] > arr[mid + 1]:\n        return is_majority(arr, n - mid, mid)\n    else:\n        return is_majority(arr, n - mid, n - 1)\n\n\n# Driver Code"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    # Initialize result\n    res = 0\n\n    # Traverse the binary representation of n\n    while (n != 0):\n        # If bit is set, increment the result\n        if ((n & 1) == 1):\n            res += 1\n        # Right shift n by one bit\n        n >>= 1\n\n    return res\n\n\n# Driver Code"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_min(arr, start, end):\n    if (start > end): \n        return arr[start] \n  \n    mid = (start + end)//2\n  \n    # If the middle element is greater than its next element\n    if (arr[mid] > arr[mid+1]): \n        return arr[mid+1] \n  \n    # If the middle element is less than its previous element\n    if (arr[mid] < arr[end]): \n        return find_min(arr, start, mid-1) \n  \n    # Otherwise, call for left subarray\n    return find_min(arr, mid+1, end)\n\n# Driver code"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(s):\n    return ''.join([char for i, char in enumerate(s) if i % 2 == 0]) \n"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(x,y,z):\n    if x<y and x<z:\n        return x\n    elif y<x and y<z:\n        return y\n    else:\n        return z\n"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(start, end):\n    # Check if start is greater than end\n    if start > end:\n        return False\n\n    # If both start and end are 0, then all bits are set\n    if (start == 0 and end == 0):\n        return True\n\n    # If either start or end is 1, then at least one bit is not set\n    if ((start != 0 and end != 0) or (start != 1 and end != 1)):\n        return False\n\n    # If the difference between start and end is even,\n    # then all bits are set\n    if ((end - start) % 2 == 0):\n        return True\n\n    # If the difference between start and end is odd,\n    # then at least one bit is not set\n    return False\n\n\n# Driver Code"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize pointers for negative and positive elements\n    n = len(arr)\n    i = 0\n    j = n - 1\n\n    while i < j:\n        if arr[i] > 0:\n            # Swap the element with the one at the right pointer\n            arr[i], arr[j] = arr[j], arr[i]\n\n            # Move both pointers forward\n            j -= 1\n            i += 1\n\n    return arr\n\n\n# Test the function"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(string):\n    return string.replace(' ','@') \n"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(matrix):\n    if not matrix:\n        return 0\n\n    # Find the largest element in each row and use it as the starting point for finding the maximum sum\n    max_sum = []\n    for i in range(len(matrix)):\n        current_max = float('-inf')\n        for j in range(i + 1, len(matrix[i])):\n            current_max = max(current_max, matrix[i][j])\n        max_sum.append(current_max)\n\n    # Find the maximum sum using the previous calculated sums\n    max_sum = max(max_sum)\n    return max_sum\n\n"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(arr,n):\n    arr.sort(reverse=True)\n    return arr[:n]\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\nimport math\n\ndef lateralsuface_cylinder(radius,height):\n    return 2 * math.pi * radius * height\n\n"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side):\n    return side**3\n"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(number):\n    # Initialize the result variable\n    res = 0\n\n    # Iterate through each bit in the number\n    for i in range(len(bin(number)) - 2):\n\n        # Check if the current bit is even\n        if (bin(number)[i] == '0'):\n            continue\n\n        # Set the corresponding bit in the result\n        res |= (1 << i)\n\n    return res\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef no_of_triangle(n):\n    if n==1:\n        return 1\n    elif n==2:\n        return 3\n    else:\n        return (n*(n-1))/2\n"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    # Create an empty dictionary\n    count = {}\n\n    for tup in tuples:\n        if tup[0] not in count:\n            count[tup[0]] = 0\n\n        count[tup[0]] += 1\n\n    return count\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef countSubstrings(str):\n    # Initialize result and count\n    res = 0\n    count = 1\n\n    # Iterate over the string\n    for i in range(len(str) - 1):\n\n        # Check if current character is same as next one\n        if str[i] == str[i + 1]:\n            count += 1\n            res += count * (count + 1) // 2\n        else:\n            count = 1\n\n    return res\n\n\n# Test the function"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    if n == 0:\n        return 0\n\n    total = 0\n    for i in range(m + 1):\n        if (i * 2 <= m and i * 2 >= 1):\n            total += get_total_number_of_sequences(n - 1, i)\n    return total\n\n"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst, new_lst):\n    lst.pop()\n    return new_lst + lst\n"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\nimport numpy as np\ndef array_3d(n,m,k):\n    return [[ '*' for i in range(m)] for j in range(n)]"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    return len(string)\n"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(lst):\n    # Create a dictionary with elements as keys and their occurrences as values\n    d = {}\n    for i in lst:\n        if i[0] not in d.keys():\n            d[i[0]] = 1\n        else:\n            d[i[0]] += 1\n\n    # Sort the list according to the number of occurrences\n    return sorted(lst, key=lambda x: (d[x[0]], x[1]))\n\n"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(num):\n    # The first step is to get the square root of the given number\n    sqrt = int(math.sqrt(num))\n    \n    # If the square of the integer part of the square root is less than the given number,\n    # then we need to increment it by one and check if the new square is a perfect square\n    while (sqrt * sqrt < num):\n        sqrt += 1\n    \n    # Return the next perfect square\n    return sqrt * sqrt + 1\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(arr):\n    # Initialize result with the first element\n    res = arr[0]\n\n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Update the result if the current sum is greater than the previous one\n        res = max(res + arr[i], arr[i])\n\n    return res\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nimport math\n\ndef babylonian_squareroot(x):\n    if x == 0:\n        return 0\n    elif x < 0:\n        print(\"The given number is negative\")\n        return None\n    else:\n        y = x\n        while True:\n            z = (y + x/y) / 2\n            if abs(z - y) < 0.0000000000000001:\n                break\n            y = z\n        return z\n\n"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(s):\n    n = len(s)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    \n    # Fill the DP table\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n                \n    return dp[0][n-1]\n"], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    # Calculate the harmonic sum using the formula\n    return (n * (1 + 1/n)) / n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection(arr1,arr2):\n    return list(set(arr1) & set(arr2))\n"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup,x):\n    return tup.count(x)\n"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst, ele):\n    return [ele] + lst\n"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\nimport cmath\n\ndef convert(complex_num):\n    return complex_num.real, cmath.sqrt(complex_num.imag**2 + 1)\n"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(lst):\n    return len(list(filter(None, lst)))\n"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(str):\n    # Your code here\n    return [word for word in str.split() if word[0] == \"a\" or word[0] == \"e\"]\n\n"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors, n):\n    # Initialize result\n    res = []\n\n    # Iterate over each color\n    for i in range(len(colors)):\n        # Iterate over each possible combination length\n        for j in range(n):\n\n            # Add current combination to result\n            res.append((colors[i], colors[j]))\n\n    return res\n\n\n# Test the function"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    if n < 2:\n        return 0\n\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n\n    return sum(primes)\n"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a,b):\n    print(\"Before swapping: \",a,\" and \",b)\n    temp=a\n    a=b\n    b=temp\n    return (a,b)\n"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(lst):\n    return len(list(filter(lambda x: x % 2 != 0, lst)))\n"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuples_list):\n    # Sort each tuple\n    for i in range(len(tuples_list)):\n        tuples_list[i] = sorted(tuples_list[i])\n\n    # Return the first element of the largest tuple\n    return tuples_list[0]\n\n# Test the function"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\nimport math\ndef newman_prime(n):\n    if n <= 2:\n        return 2\n    # Find the smallest prime divisor of n\n    while n % 2 == 0:\n        n = n // 2\n\n    # Now check odd divisors from 3 onwards\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            n = n // i\n\n    # If n is a prime number greater than 2\n    if n > 2:\n        return n\n\n# Driver Code"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(*args):\n    # Initialize result list\n    res = []\n    \n    # Iterate over each tuple in args\n    for x, y, z in zip(*args):\n        # Perform division and append result to res\n        res.append(x / y / z)\n        \n    return res\n\n# Test case"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(list1, n):\n    # Your code goes here\n    return [[list1[:n]], [list1[n:]]] \n\n# Test case"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n    # Create an empty dictionary\n    result = {}\n\n    # Iterate over the keys in first dictionary\n    for key in dict1:\n        # Add the value from second dictionary if it exists\n        result[key] = dict1[key]\n    \n    # Iterate over the keys in second dictionary\n    for key in dict2:\n        # Add the value from first dictionary if it exists\n        result[key] = dict2[key]\n\n    return result\n"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_years(age):\n    return 365 * age\n"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(lst, n):\n    # Your code here\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateral_surface_area_cube(side):\n    return 4 * side**2\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_sum(n):\n    return (n*(n-1)*(2*n+1)//6)\n"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    if n < 1:\n        return None\n\n    # If n is even, it's the sum of first n odd numbers\n    if n % 2 == 0:\n        return (n * (n + 1)) // 2\n\n    # If n is odd, it's the sum of first n even numbers\n    else:\n        return ((n - 1) * (2 * n - 1)) // 2\n\n"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)\n"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_position(arr):\n    # Initialize sum\n    s = 0\n\n    # Iterate over the array\n    for i in range(0, len(arr), 2):\n\n        # Check if the element is even and its position is even\n        if (arr[i] % 2 == 0 and arr[i + 1] % 2 == 0):\n\n            # Add the even number to the sum\n            s += arr[i]\n\n    return s\n\n\n# Driver Code"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    # Initialize result\n    res = 0\n\n    # Iterate from 1 to n\n    for i in range(1, n + 1):\n\n        # Check if number is even and greater than or equal to 2\n        if (i % 2 == 0 and i >= 2):\n\n            # Calculate the power of i\n            power = pow(i, 5)\n\n            # Add power to result\n            res += power\n\n    return res\n\n\n# Driver Code"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(lst):\n    return lst[-1] \n\n# Test Case"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tup1, tup2):\n    return list(map(lambda x,y: x-y, tup1,tup2))\n"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    # Base case\n    if n < 0:\n        return 0\n\n    # If n is odd, the sum of binomial coefficients at even indices\n    if (n % 2 != 0):\n        return ((-1)**(n//2)) * (binom(n, n//2))\n\n    # If n is even, the sum of binomial coefficients at even indices\n    else:\n        return binom(n, n//2)\n\n\n# Driver Code"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr, n, x):\n    # Initialize index for the first occurrence\n    i = 0\n\n    while (i < n - 1 and arr[i] <= x):\n        i += 1\n\n    j = i + 1\n\n    while (j < n and arr[j] > x):\n        j += 1\n\n    return j\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(radius,height):\n    return 3.14 * radius**2 * height\n"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dict, value):\n    return {k: v for k, v in dict.items() if v == value} \n\n# Test case"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tup):\n    return len(list(filter(lambda x: isinstance(x, int), tup))) - 1\n\n"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    return n * (n + 1) // 2\n"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return True\n    return False\n\n# Driver Code\narr = [11, 23, 58, 31, 56, 77, 43, 12, 65, 19]\nx = 31"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(lst):\n    # Check for duplicates in the list\n    return len(lst) == len(set(lst))\n"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1,list2):\n    return list(map(lambda x,y: x-y,list1,list2)) \n"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(n):\n    # Initialize count for digits\n    count = 0\n\n    while n > 0:\n        rem = n % 10\n        if rem <= count:\n            count += 1\n        n //= 10\n\n    return count <= 9\n\n\n# Test the function with provided test cases"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst, str):\n    if len(str) != len(lst[0]):\n        return False\n    for i in range(len(lst)):\n        if lst[i] != str:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if len(text) < 4:\n        return False\n    elif len(text) > 7:\n        return False\n    else:\n        for i in range(len(text)-3):\n            if text[i] == \"a\" and text[i+1] == \"b\" and text[i+2] == \"b\":\n                return True\n        return False\n"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(arr, n, k):\n    # Initialize result with the first element\n    res = arr[0]\n\n    # Initialize current sum and maximum sum\n    curr_sum = arr[0]\n    max_sum = arr[0]\n\n    for i in range(1, n):\n\n        # Update current sum\n        curr_sum += arr[i]\n\n        # Check if it's possible to make subarray from start to end\n        # using only one repetition of the array\n        if (curr_sum > k * arr[i]):\n            curr_sum = arr[i]\n\n        # Check if it's possible to make subarray from start to end\n        # using two repetitions of the array\n        elif ((curr_sum + k * arr[i]) > k * arr[i] and\n              curr_sum + k * arr[i] > res):\n            curr_sum += k * arr[i]\n            res = curr_sum\n\n    return res\n\n\n# Test case"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    # Initialize sum\n    sum = 0\n\n    # Iterate from 1 to n\n    for i in range(1, n + 1):\n\n        # Check if number is even\n        if (i % 2 == 0):\n\n            # Add its square to sum\n            sum += i ** 2\n\n    return sum\n\n\n# Driver Code"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modInverse(arr, n, p):\n    for i in range(0, n):\n        if (arr[i] * arr[i]) % p == 1:\n            return i\n"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_days(year):\n    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n        return 365\n    else:\n        return 366\n"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lists):\n    # return the list of lists with maximum length\n    if len(lists) == 0:\n        return []\n    elif len(lists[0]) > len(max(lists)):\n        return lists[0]\n    else:\n        return lists\n\n# Test case"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\ndef count_no_of_ways(n,k):\n    # Write your code here\n    if n==0 or k==0:\n        return 0\n\n    dp=[[0]*(k+1) for i in range(n+1)]\n    dp[0][0]=1\n\n    for i in range(1,n+1):\n        for j in range(k+1):\n            if j==0:\n                dp[i][j]=dp[i-1][j]\n            elif j==k:\n                dp[i][j]=dp[i-1][j-1]+dp[i-1][j]\n            else:\n                dp[i][j]=dp[i-1][j-1]\n\n    return dp[n][k]\n\n"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(a,b):\n    return a//b\n"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(a,b,c):\n    return (c**2 - b**2)**0.5\n"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(lst):\n    return max(lst) if lst else None\n"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    if n == 1:\n        return 0\n\n    div_sum = 0\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            div_sum += i\n            if i != n // i:\n                div_sum += n//i\n\n    return div_sum + n\n\n"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_inv_count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count\n\n"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(lst):\n    return [flatten_list(x) for x in lst] if isinstance(lst, list) else [lst]\n"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1,list2):\n    # Your code goes here\n    return [[x for x in y if x in list1] for y in list2]\n\n# Test case"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(list_of_tuples):\n    return max(tuple(x) for x in list_of_tuples)\n"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    if n == 0:\n        return 1\n\n    # If there are two possible states for each bit, then the total number of \n    # possible sequences will be (2^n)\n    return 2 ** n\n\n"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    if type(d) is not dict:\n        return 0\n\n    count = 0\n    for key in d.keys():\n        count += 1\n        if type(d[key]) is dict:\n            count += dict_depth(d[key])\n    \n    return count\n\n"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_bit_number(n):\n    # Initialize result variable\n    res = 0\n\n    # Iterate from n-1 to 0\n    for i in range(n, -1, -1):\n        if (i & n) != 0:\n            res += 1\n\n    return res\n\n\n# Driver Code"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef inv_count(a,b):\n    c=0\n    for i in range(len(a)):\n        if (a[i]>b[i]):\n            c+=i\n    return c\n"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr, mat, n, m):\n    # Find the row and column where the target is present\n    i = (n - 1) % m\n    j = (m - 1) % n\n\n    # If target is found in first row or first column\n    if arr[i] == mat[j][0]:\n        return mat[j][1]\n\n    # If target is not found in first row or first column\n    while i >= 0 and j >= 0 and arr[i] == mat[j][0]:\n        i = (i - 1) // m\n        j = (j - 1) // n\n\n    # Return the position of target\n    return mat[j + 1][1]\n\n\n# Driver Code"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            return (words[i],)\n    return ('',)  # If no word starts with p, then return an empty tuple\n"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, n, k):\n    # Initialize result array with -1\n    res = [-1] * (n + 1)\n    \n    # Find the maximum sum in increasing order\n    for i in range(1, n + 1):\n        for j in range(i - 1, -1, -1):\n            if arr[j] < arr[i - 1]:\n                break\n        else:\n            res[i] = arr[i - 1]\n    \n    # Find the maximum sum starting from k\n    for i in range(k, n + 1):\n        for j in range(i - 1, -1, -1):\n            if res[j] < res[i - 1] + arr[i - 1]:\n                res[i] = res[j] + arr[i - 1]\n                \n    return res[n]\n\n# Test case\narr = [1, 101, 2, 3, 100, 4, 5]\nk = 7"], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tup):\n    return tup[1] + \":\" + str(tup[2]) + \",\" + str(tup[3])\n"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1,list2,n):\n    # Your code goes here\n    list1.sort()\n    list2.sort(reverse=True)\n    return [list1[i]*list2[i] for i in range(n)]\n\n# Driver Code"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef max(x,y):\n    if x>y:\n        return x\n    else:\n        return y\n"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string):\n    return tuple(string.split())<|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|><|endoftext|>"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(num):\n    # Set all bits of num except the first one\n    return (num & ~(num - 1))\n"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(radius,height):\n    return (3.14 * radius**2 * height) / 3\n"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(lst):\n    return [x for x in lst if x > 0] \n"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(grid, n):\n    # Initialize result with the first element of the grid\n    res = grid[0][0]\n\n    # Iterate through each row in the grid\n    for i in range(1, n):\n\n        # Update the result with the maximum sum found so far\n        res = max(res + grid[i][0], grid[i][0] + grid[i][n - 1])\n\n        # Update the result with the maximum sum found so far\n        if (i > 0 and i < n - 1):\n            res = max(res + grid[i - 1][0], grid[i - 1][0] + grid[i][n - 1])\n\n    return res\n\n\n# Test the function with the provided test case\ngrid = [[1, 4, 5], [2, 0, 0]]"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(str):\n    # Initialize max_len and result\n    max_len = 0\n    result = \"\"\n    \n    # Iterate through each character in string\n    for i in range(len(str)):\n        # Check if current character is even\n        if (int(str[i]) % 2 == 0):\n            # If it's the first even char, update max_len\n            if (i > 0 and int(str[i-1]) % 2 != 0):\n                max_len += 1\n                \n            # Update result with longest even word\n            if (len(result) < len(str[i])):\n                result = str[i]\n                \n    return max_len, result\n\n# Test case"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(arr, x):\n    # Find the first occurrence of x\n    i = bisect_left(arr, x)\n    \n    # If x is not present in arr, return -1\n    if i != len(arr) and arr[i] == x:\n        return i\n    \n    # If x is present more than once in arr, return the last occurrence\n    return i\n\n\n# Driver Code"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(list):\n    # Your code goes here\n    res = []\n    for i in range(len(list)):\n        if len(res) == 0:\n            res.append([list[i]])\n        else:\n            if list[i] != res[-1][1]:\n                res.append([list[i], 1])\n            else:\n                res[-1][1] += 1\n    return res\n"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(side):\n    # Initialize result variable\n    res = 0\n\n    # Iterate over all possible combinations of side lengths\n    for i in range(1, side + 1):\n        for j in range(i, side + 1):\n            for k in range(j, side + 1):\n\n                # Calculate the volume\n                vol = (i * j * k)\n\n                # Update the result if current volume is greater\n                if vol > res:\n                    res = vol\n\n    return res\n\n\n# Test the function"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\ndef find_long_word(string):\n    return re.findall(r'\\b\\w{5}\\b', string)\n"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    # Calculate the sum of squares of first n natural numbers\n    sum_squares = (n * (n + 1) * (2 * n + 1)) // 6\n\n    # Calculate the difference between the squared sum and the sum of squares\n    diff = sum_squares - (sum(range(1, n + 1))) ** 2\n\n    return diff\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(num):\n    if len(str(num)) < 2:\n        return str(num)\n    \n    # Find first digit\n    first_digit = int(str(num)[0])\n    \n    # Find second digit\n    second_digit = int(str(num)[1])\n    \n    # If first and second digits are same, then it is a palindrome\n    if (first_digit == second_digit):\n        return str(num)\n    \n    # If first and second digits are different,\n    # then we need to check both possibilities\n    else:\n        # Check if first digit is greater than second digit\n        if (int(str(num)[0]) > int(str(num)[1])):\n            return str(num) + \" \" + str(find_demlo(str(num)[1:]))\n        else:\n            return str(num) + \" \" + str(find_demlo(str(num)[0:1]))\n\n"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(arr):\n    # Your code goes here\n    min_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    return [min_index]\n\n# Test case"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, n):\n    # Initialize pointers\n    p = 0\n    q = n - 1\n\n    while p < q:\n        if arr[p] > 0:\n            # Swap with the next element\n            arr[p], arr[q] = arr[q], arr[p]\n\n            # Move both pointers\n            p += 1\n            q -= 1\n\n    return arr\n\n\n# Driver Code"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(tup):\n    res = []\n    for i in range(0, len(tup), 2):\n        if tup[i] != tup[i + 1]:\n            res.append(tup[i])\n    return tuple(res)\n"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(n):\n    # Initialize answer and count\n    ans = 0\n    count = 1\n\n    while n > 0:\n        if (n % count == 0):\n            ans += n // count\n            n = 0\n        else:\n            n -= 1\n        count += 1\n\n    return ans\n\n"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(words):\n    # Create a dictionary\n    d = {}\n    \n    # Iterate over each word\n    for w in words:\n        if w not in d:\n            d[w] = 1\n        else:\n            d[w] += 1\n    \n    # Return the word with maximum frequency\n    return max(d, key=d.get)\n\n# Test the function"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if (a == b and c != 0) or (b == c and a != 0) or (c == a and b != 0):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(arr, k, n):\n    # If k is greater than or equal to the length of the array\n    if (k >= n):\n        return arr\n\n    # Rotate elements from the beginning to the end\n    for i in range(k):\n        temp = arr[i]\n        j = i\n        while(j < n-1):\n            arr[j] = arr[j+1]\n            j += 1\n        arr[j - 1] = temp\n\n    return arr\n\n\n# Driver code\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nk = 3\nn = len(arr)"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef count_negatives(lst):\n    return len([x for x in lst if x < 0])\n"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\n\ndef find_char(str):\n    # pattern = r'\\b[A-Z]{3}\\s[A-Za-z]{4,5}\\b'\n    pattern = r'[A-Z]{3}[a-zA-Z]{4,5}'\n    return re.findall(pattern,str)\n"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(n):\n    # Initialize result variable\n    res = 0\n\n    # Traverse the binary representation of n\n    while (n > 0):\n\n        # If the least significant bit is set\n        if ((n & 1) != 0):\n            res += 1\n\n        # Right shift n by one bit\n        n >>= 1\n\n    return res\n\n\n# Driver Code"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(str):\n    # Create an empty dictionary\n    freq_dict = {}\n\n    # Iterate through the string\n    for i in str:\n        if i not in freq_dict.keys():\n            freq_dict[i] = 1\n        else:\n            freq_dict[i] += 1\n\n    return freq_dict\n\n"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(lst):\n    # Create an empty list\n    sorted_lst = []\n    \n    # Iterate through each sub-list\n    for i in lst:\n        # Sort the elements of the sub-list\n        sorted_lst.append(sorted(i))\n        \n    return sorted_lst\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    if (a+b>c and b+c>a and c+a>b):\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(start, end, step):\n    # Calculate the number of terms in the sequence\n    n = (end - start) / step + 1\n\n    # Calculate the sum using the formula for the sum of an arithmetic progression\n    return (n * ((start + end) / 2)) * step\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(month_name):\n    if (month_name == \"January\" or \n        month_name == \"March\" or \n        month_name == \"May\" or \n        month_name == \"July\" or \n        month_name == \"August\" or \n        month_name == \"October\" or \n        month_name == \"December\"):\n        return True\n    else:\n        return False\n\n# Test the function"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\nimport re\n\ndef text_match_word(text):\n    pattern = r'\\w+\\.'\n    return bool(re.search(pattern,text))\n"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_substrings_with_equal_ends(s):\n    # Initialize result\n    res = 0\n\n    # Iterate over all possible substrings\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                res += (j - i + 1)\n\n    return res\n\n\n# Driver Code"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(a,b):\n    # Find the maximum number of divisors\n    max_divisors = min(a, b)\n    \n    # Iterate from 1 to max_divisors\n    for i in range(1,max_divisors+1):\n        if (a % i == 0 and b % i == 0):\n            return i\n\n# Driver Code"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(nums):\n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Return the sum of the first three smallest elements\n    return sum(nums[:3])\n\n# Test the function with provided data points"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(set):\n    return tuple(sorted(list(set))) \n"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arrays):\n    # Find the maximum and minimum values in each array\n    max_values = []\n    min_values = []\n\n    for arr in arrays:\n        max_values.append(max(arr))\n        min_values.append(min(arr))\n\n    # Initialize variables\n    min_range = float('inf')\n    min_start_index = -1\n    min_end_index = -1\n\n    # Iterate through all possible pairs of indices\n    for i in range(len(min_values)):\n        for j in range(i+1, len(min_values)):\n            if min_values[i] < min_values[j]:\n                continue\n\n            # Calculate the range\n            range_length = j-i + 1\n            if range_length <= min_range:\n                min_range = range_length\n                min_start_index = i\n                min_end_index = j\n\n    return min_range, min_start_index, min_end_index\n\n\n# Test cases\narrays = [[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef digit_letter_count(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].isdigit():\n            count += 1\n        elif string[i].isalpha():\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(n, m):\n    # Initialize result\n    res = 0\n\n    # Iterate from n to m\n    for i in range(n, m + 1):\n\n        # Check if the current number is square of an odd integer\n        if (i % 2 != 0 and pow(i, 0.5)) ** 2 == i:\n            res += 1\n\n    return res\n\n\n# Driver Code"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(nums):\n    # Initialize result\n    res = []\n    \n    for i in range(len(nums) - 1):\n        if nums[i + 1] - nums[i] != 0:\n            res.append(nums[i + 1] - nums[i])\n            \n    return res\n\n# Test the function"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n,k):\n    if n==1:\n        return 0\n    else:\n        return (k+1)*zigzag(n-2,k)+n*zigzag(n-1,k)\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(n, m):\n    # Initialize result\n    res = 0\n\n    # Iterate over all possible positions\n    for i in range(n + 1):\n        for j in range(m + 1):\n\n            # If current position is valid\n            if (i > 0 and j > 0 and i < n and j < m):\n                res += 1\n\n    return res\n\n\n# Driver Code"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\ndef find_ways(n, k):\n    # Base case: if n is 0 and k is 0, there's only one way to do it\n    if n == 0 and k == 0:\n        return 1\n\n    # If the number of ways is already computed, return it\n    if ways[n][k] != -1:\n        return ways[n][k]\n\n    # Initialize result array with -1\n    res = [-1 for _ in range(k + 1)]\n\n    # Iterate through each possible prefix sum\n    for i in range(k, n + 1):\n        # Calculate the number of ways to form the current prefix sum\n        res[i % (k + 1)] = res[(i - 1) % (k + 1)] + res[i // (k + 1)]\n    \n    # Return the result\n    return res[k]\n\n\n# Test the function"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(s):\n    if s[0] != '0' and s[-1] != '1':\n        return False\n    for i in range(1, len(s)-1):\n        if s[i] != '0' and s[i-1] != '1' and s[i+1] != '0':\n            return False\n    return True\n"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef min_length(str):\n    # Initialize result and count variable\n    res = 0\n    cnt = 0\n\n    # Iterate through each character in the string\n    for i in str:\n        if i != str[cnt]:\n            res += 1\n        else:\n            cnt += 1\n\n    return res\n\n\n# Test the function with provided test cases"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_element(arr,k):\n    # Initialize count of occurrences\n    count = 0\n\n    for i in range(len(arr)):\n        if arr[i] == k:\n            count += 1\n\n    return count\n\n\n# Driver Code"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(str):\n    # Create an empty set\n    s = set()\n    \n    # Iterate through each character of the string\n    for char in str:\n        if char in s:\n            return False\n        else:\n            s.add(char)\n    return True\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(matrix, col_index):\n    # Check if the column index is valid\n    if not (0 <= col_index < len(matrix[0])):\n        return matrix\n\n    # Remove the specified column\n    for row in matrix:\n        del row[col_index]\n\n    return matrix\n\n\n# Test the function with provided data points"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a,n):\n    return (a*(n-1)) + 1\n"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\nimport math\n\ndef count_Rectangles(r):\n    # Calculate the area of the rectangle\n    area = (r * r) * 4\n    \n    # Calculate the number of rectangles\n    return int(area / 6)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(a,b):\n    return 180 - (a + b)\n"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(tup):\n    return max(tup)\n"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(list1,list2):\n    return list(map(lambda x,y: x % y ,list1,list2))\n"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a,b,c):\n    if (c==0):\n        return 'No'\n    else:\n        x=(-b+((b**2)-(4*a*c))/(2*a))\n        y=(-b-(b**2)-(4*a*c))/(2*a)\n        if(x==y):\n            return 'Yes'\n        else:\n            return 'No' \n"], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    if n < 1:\n        return None\n\n    # The first two Carol numbers are 1 and 3\n    if n <= 2:\n        return 1\n\n    # The nth Carol number is the sum of the previous two Carol numbers\n    return get_carol(n - 1) + get_carol(n - 2)\n\n# Test the function with some test cases"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(list_of_lists):\n    return [x for x in list_of_lists if x] \n"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(lst):\n    # Create an empty dictionary\n    d = {}\n\n    # Iterate over the list\n    for i in lst:\n        if i not in d:\n            d[i] = 0\n\n        d[i] += 1\n\n    # Find the key with the highest value\n    return max(d.values())\n\n# Test the function"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tup, K):\n    # Create an empty list\n    new_list = []\n    \n    # Iterate over the given tuple\n    for i in tup:\n        # Add K elements to each element of the tuple\n        new_list.append(i + K)\n        \n    return new_list\n\n# Test case\ntup = [(1, 3, 4), (2, 4, 6), (3, 8, 1)]\nK = 4"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] != '0':\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(num):\n    return len(str(abs(num)))\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adj_num_product(nums):\n    # Initialize max_product with the first element\n    max_product = nums[0]\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, len(nums)):\n        # Calculate the product of the current and next element\n        curr_product = nums[i] * nums[i - 1]\n        \n        # Update max_product if the current product is greater\n        if curr_product > max_product:\n            max_product = curr_product\n    \n    return max_product\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\nfrom typing import Optional\n\n"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    return tup * n\n\n# Test case"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateral_surface_area_cuboid(length,width,height):\n    return 2*(length*width+width*height+height*length)\n"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup):\n    return sorted(tup, key=lambda x:float(x[1]))\n\n"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(arr):\n    # If the first element is greater than its index,\n    # it means that the first element is not present in the array\n    if arr[0] > 0:\n        return 0\n\n    # Iterate through the array and check for the presence of each number\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            # The number at the current position is already present\n            return i + 1\n\n    # All numbers are present in the array\n    return len(arr) + 1\n\n"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\nimport heapq\n\ndef heap_sort(arr):\n    # Build max heap\n    for i in range(len(arr)//2 - 1, -1, -1):\n        heapify(arr, len(arr), i)\n\n    # Extract maximum element from heap\n    for i in range(len(arr)-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr\n\n\n# Function to heapify an array\ndef heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\n"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(a,b,c):\n    return a*b*c\n"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\nfrom typing import List\n\ndef permute_string(s: str) -> List[str]:\n    if len(s) == 0:\n        return []\n    elif len(s) == 1:\n        return [s]\n    \n    res = []\n\n    for i in range(len(s)):\n        # Choose the current character\n        curr_char = s[i]\n\n        # Permute remaining characters\n        rest_chars = s[:i] + s[i+1:]\n\n        # Recursively call the function with the rest of the characters\n        for permutation in permute_string(rest_chars):\n            res.append(curr_char + permutation)\n\n    return res\n\n"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num, n):\n    return int((num + (n / 2)) // n * n) if num % n == 0 else int((num + (n / 2)) // n * n + (n % 2 != 0))\n"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(lst):\n    # Your code goes here\n    return list(set([x for x in lst if x not in lst[:lst.index(x)]]))\n\n\n# Test case"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(str, ch):\n    return str.replace(ch,\"\",1)\n"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(lst):\n    return lst[0:]+lst[1:]\n"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surface_area_cuboid(length, width, height):\n    return 2 * (length*width + length*height + width*height) \n\n# Test case"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(n,m):\n    return [[i*j for j in range(m)] for i in range(n)]\n"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef sort_by_index(list_of_lists):\n    return sorted(list_of_lists, key=lambda x: x[index_of_inner_list(x)], reverse=True) \n\n# Test case"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(arr):\n    # Find the first element that is greater than its next element\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return i + 1\n\n# Test the function with provided test cases"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(n):\n    # Initialize result variable\n    res = 0\n\n    # Iterate through each bit in the number\n    while (n > 0):\n\n        # Check if the current bit is odd\n        if ((n & 1) != 0):\n\n            # Toggle the corresponding bit\n            res += 1\n\n        n >>= 1\n\n    return res\n\n\n# Driver Code"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(arr,n):\n    # Initialize count and min element\n    count = 0\n    min_element = arr[0]\n\n    # Traverse through the array\n    for i in range(n):\n\n        # If current element is smaller than min_element,\n        if (arr[i] < min_element):\n            count = 1\n            min_element = arr[i]\n        elif (arr[i] == min_element):\n            count += 1\n\n    return count\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef min_swaps_for_balancing_brackets(string):\n    # Initialize count of swaps\n    count = 0\n\n    # Iterate through each character in the string\n    for i in range(len(string)):\n        if (string[i] == '(' or string[i] == '['):\n            continue\n        else:\n            # Count the number of opening brackets\n            count += 1\n\n            # Count the number of closing brackets\n            count -= 1\n\n            # If there is an odd number of closing brackets,\n            # it means we need one more swap\n            if (count % 2 != 0):\n                count += 1\n\n    return count\n\n\n# Driver Code"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex_num):\n    # Convert hex number to decimal\n    dec_num = int(hex_num, 16)\n    \n    # Check if the number is even or odd\n    return \"Even\" if dec_num % 2 == 0 else \"Odd\"\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    if n < 1:\n        return -1\n\n    # If n is odd, then its highest power of 2 will be 1\n    if (n % 2) != 0:\n        return 1\n\n    # Find the largest power of 2 less than or equal to n\n    while (n > 1):\n        n = n // 2\n\n    return n\n\n\n# Driver Code"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    if n <= 1:\n        return n\n\n    previous = 2\n    current = 1\n\n    for i in range(2, n + 1):\n        next_number = previous + current\n        previous = current\n        current = next_number\n\n    return current\n\n"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(lst, str):\n    return [str + item for item in lst]\n"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(list_of_lists, key):\n    return [dict(zip(list_of_lists[i], list_of_lists[i][key])) for i in range(len(list_of_lists))]\n\n# Test the function"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n):\n    # Initialize result and current sum\n    res, curr_sum = 0, 0\n\n    # Iterate through all numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Calculate the contribution of each number\n        if i % 2 == 0:\n            curr_sum += i // 2\n        else:\n            curr_sum += i // 3\n        if i % 3 == 0:\n            curr_sum += i // 4\n        else:\n            curr_sum += i // 5\n\n        # Update the result with the maximum sum found so far\n        res = max(res, curr_sum)\n\n    return res\n\n\n# Test cases"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lst):\n    return max(map(len, lst)) if lst else None\n"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    return len(set(tup)) == len(tup)\n"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(string):\n    # Create an empty dictionary\n    char_count = {}\n\n    # Iterate over each character of the string\n    for i, char in enumerate(string):\n\n        if char not in char_count:\n            char_count[char] = 1\n\n        else:\n            char_count[char] += 1\n\n    # Find the first non-repeating character\n    for key, value in char_count.items():\n        if value == 1:\n            return key\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\n\ndef check_char(s):\n    if len(s) < 2:\n        return False\n    else:\n        pattern = r\"^[a-zA-Z]*[a-zA-Z]*$\"\n        if re.match(pattern, s):\n            return True\n        else:\n            return False\n\n"], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(x,y,z):\n    if x>y and y>z:\n        return (x+y+z)/3\n    elif x<y and z>y:\n        return (x+y+z)/3\n    else:\n        return (x+y+z)/3\n"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(nums):\n    # Your code goes here\n    return [int(i) for i in str(sum(map(int, nums)))]\n"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(tup):\n    # XOR all elements in tuple\n    return tuple(x ^ y for x, y in tup)\n\n# Test case"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(lst):\n    # Your code goes here\n    return len(set(tuple(x) for x in lst)) \n\n# Test case"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(tup1, tup2):\n    # Iterate over each element in the first tuple\n    for i in range(len(tup1)):\n        # Add the corresponding elements from the second tuple\n        tup1[i] += tup2[i]\n    \n    return tup1\n\n# Test case"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\nimport math\n\ndef ncr_modp(n,p):\n    if p == 1:\n        return 0\n    elif n < 0 or p < 0:\n        return 0\n    else:\n        return math.factorial(n) // (math.factorial(p-1)*math.factorial(n-p)) % p\n\n"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\n\ndef is_valid_URL(url):\n    pattern = r'^(http|https)://([a-zA-Z0-9.-]+(\\.[a-zA-Z]{2,})*)$'\n    return bool(re.match(pattern, url)) \n\n# Test the function"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef min(x,y):\n    if x<y:\n        return x\n    else:\n        return y\n"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup,x):\n    if x in tup:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n"], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    # Convert the number to a list of its digits\n    num_list = list(str(num))\n    \n    # Sort the digits in descending order\n    sorted_digits = sorted(num_list, reverse=True)\n    \n    # Reconstruct the number from the sorted digits\n    new_num = int(''.join(sorted_digits))\n    \n    return new_num\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1,arr2,k):\n    arr1.sort()\n    arr2.sort()\n\n    count = 0\n    for i in range(k-1):\n        if (arr1[i] + arr2[k-i-1]) > arr1[i+k-1]:\n            break\n\n    return [[arr1[i], arr2[k-i-1]] for i in range(k)]\n\n"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(lst):\n    # Sort the list in ascending order based on the first element of each tuple\n    lst.sort(key=lambda x: x[0])\n\n    # Initialize variables for the minimum product and its index\n    min_product = float('inf')\n    min_index = -1\n\n    # Iterate through the sorted list\n    for i in range(len(lst) - 1):\n        if lst[i][1] < lst[i + 1][1]:\n            continue\n\n        # Calculate the product of the current pair\n        product = lst[i][0] * lst[i + 1][0]\n\n        # Update the minimum product and its index\n        if product < min_product:\n            min_product = product\n            min_index = i\n\n    return min_product, min_index\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(lst):\n    return min(lst) if lst else None\n"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\ndef snake_to_camel(snake_str):\n    # Split the string into words based on underscores\n    words = snake_str.split('_')\n    \n    # Convert each word to lowercase and join them together\n    return ''.join(word.capitalize() for word in words)\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n    return [x for x in lst if x % 2 != 0]\n"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(list_of_tuples,n):\n    return list_of_tuples[n]\n\n# Test the function"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef is_overlapping(sequence, target):\n    for i in range(len(sequence)):\n        if sequence[i] == target:\n            return True\n    return False\n"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_product(arr):\n    # Initialize the maximum and minimum elements\n    max_num = float('-inf')\n    min_num = float('inf')\n\n    for num in arr:\n        if num > max_num:\n            max_num = num\n\n        if num < min_num:\n            min_num = num\n\n    return max_num * min_num\n\n"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(num):\n    if num < 0:\n        return -1\n    elif num == 0:\n        return 0\n\n    # If only one part is left, then it will be the answer\n    if (num % 3 == 0):\n        return num // 3 + num // 3\n    else:\n        return max(num // 3, num // 3 + num % 3)\n"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(lst):\n    # Your code goes here\n    return [tuple(x) for x in lst if len(set(x)) == 1] \n\n\n# Test case"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lst):\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n\n# Test the function"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(lst):\n    return sum(map(round, lst)) * len(lst) \n"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_sum(n):\n    return (n*(n+1)*(3*n+1)//6)\n"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tup):\n    return str(tuple(map(str,tup))) \n"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i**3)\n    return sum/n\n"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\nfrom typing import List\n\n\ndef get_max_gold(grid: List[List[int]], row: int, col: int) -> int:\n    if row < 0 or row >= len(grid) or col < 0 or col >= len(grid[0]):\n        return -1\n\n    max_gold = grid[row][col]\n\n    # Check left diagonal\n    for i in range(col - 1, -1, -1):\n        if grid[row][i] > max_gold:\n            break\n\n        max_gold = max(max_gold, grid[row][i])\n\n    # Check right diagonal\n    for i in range(col + 1, len(grid[0])):\n        if grid[row][i] > max_gold:\n            break\n\n        max_gold = max(max_gold, grid[row][i])\n\n    # Check top diagonal\n    for i in range(row - 1, -1, -1):\n        if grid[i][col] > max_gold:\n            break\n\n        max_gold = max(max_gold, grid[i][col])\n\n    # Check bottom diagonal\n    for i in range(row + 1, len(grid)):\n        if grid[i][col] > max_gold:\n            break\n\n        max_gold = max(max_gold, grid[i][col])\n\n    return max_gold * (grid[row][col] - 1)\n\n"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(t):\n    return [t[-1]]\n\n\n# Test"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(lists, x):\n    # Initialize result\n    res = 0\n\n    # Iterate through each sublist\n    for i in range(len(lists)):\n        # Check if the current element matches x\n        if lists[i][0] == x:\n            # Count occurrences\n            res += lists[i].count(x)\n\n    return res\n\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_odd_numbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))\n"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\ndef change_date_format(date):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', date)\n"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef tuple_extraction(tup1, tup2):\n    # Extracting elements\n    ele = list(zip(tup1, tup2))\n    \n    # Extracting tuples\n    tuple_list = []\n    for i in range(len(ele)):\n        if type(ele[i][0]) is int:\n            tuple_list.append(tuple(ele[i]))\n    \n    return tuple_list\n\n# Test case"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    return -b/(2*a)<|endoftext|>"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1,list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c,d):\n    # Calculate the sum and difference of the lengths of the sides\n    s = (a + b + c + d) / 2\n    # Calculate the middle value\n    m = (s - (a + b)) / 2\n\n    return m\n\n"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, x):\n    for i in arr:\n        if i > x:\n            return \"Yes\"\n    return \"No\"\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    return 'Not matched!' if not any(b in text for b in \"ab\") else 'Matched!'\n\n# Test cases"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(num):\n    return num % 10\n\n# Test the function"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nums(lst):\n    for i in lst:\n        if i < 0:\n            print(i)\n    return\n"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(str):\n    return ''.join([char for char in str if int(char) % 2 == 0]) \n"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(lst):\n    return len([x for x in lst if x[0] != x[1]]) + len([y for y in lst if y[1] != y[0]])\n"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(list):\n    return int(''.join(str(x) for x in list))\n\n\n"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    words = sentence.split()\n    adverbs = []\n    for i in range(len(words)):\n        if words[i].endswith('ly'):\n            adverbs.append((i, words[i]))\n    return adverbs\n"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surface_area_cube(side):\n    return 6 * side**2\n"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(arr):\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count/len(arr)\n"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(list):\n    # Initialize max as 0\n    max = 0\n\n    for i in range(len(list)):\n        if (list[i] < 0) and (max < list[i]):\n            max = list[i]\n\n    return max\n\n"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tup_list, k):\n    # Your code goes here\n    return [tuple(x for x in tup if len(str(x)) <= k) for tup in tup_list]\n\n# Test case"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tup1, tup2):\n    # Create an empty list\n    result = []\n    \n    # Iterate over each element in first tuple\n    for i in range(len(tup1)):\n        # Multiply corresponding elements from both tuples\n        result.append(tup1[i] * tup2[i])\n        \n    return tuple(result)\n\n# Test the function with provided test cases"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(lst, tup):\n    return len(set(tup)) - len(set(lst))\n"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ncube_nums=lambda x:x**3"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    if n < 0:\n        return -1\n\n    # Initialize first two Perrin numbers\n    a, b = 3, 2\n\n    # Calculate remaining terms\n    for i in range(3, n + 1):\n        c = a + b\n        a = b\n        b = c\n\n    # Return the sum of the given number of terms\n    return a\n\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(x,y,z):\n    # Check for right angle\n    if (x**2 + y**2 == z**2) or (y**2 + z**2 == x**2) or (z**2 + x**2 == y**2):\n        return \"Yes\"\n    else:\n        return \"No\"\n"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(values, n):\n    return [values[i:i+n] for i in range(0, len(values), n)]\n\n"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\nimport re\n\ndef remove_whitespaces(string):\n    return re.sub(r'\\s+', '', string)\n"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount,loss):\n    if amount-loss<0:\n        return None\n    return amount-loss\n"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sum_of_factors(n):\n    # Initialize sum\n    s = 0\n\n    # Check for each factor from 2 to n-1\n    for i in range(2, n + 1):\n\n        # If i is divisible by any other number,\n        # then it is an even factor\n        if (n % i == 0):\n            s += i\n\n    return s\n\n\n# Driver Code"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    return \"Found a match!\" in text.lower() and len(text) > 2\n\n# Test"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month):\n    if (month == 2 and is_leap_year()):\n        return True\n    elif (month in [4, 6, 9, 11]):\n        return True\n    else:\n        return False\n\ndef is_leap_year():\n    year = int(input(\"Enter a year: \"))\n    if ((year % 400 == 0) or \n            (year % 4 == 0 and year % 100 != 0)):\n        return True\n    else:\n        return False\n\n"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(lst):\n    return [x[::-1] for x in lst]\n"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(list):\n    min_list = []\n    for i in range(len(list)):\n        if len(list[i]) < len(min_list):\n            min_list = list[i]\n    return min_list\n"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(length,width):\n    return length*width\n"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\n\ndef remove_uppercase(string):\n    return re.sub('[A-Z]+', '', string) \n"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef extract(lst):\n    return lst[0]\n"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(str):\n    return str.upper().count(\"A\") + str.upper().count(\"E\") + str.upper().count(\"I\") + str.upper().count(\"O\") + str.upper().count(\"U\")\n"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations(lst):\n    res = []\n    def backtrack(start, path):\n        if start == len(lst):\n            res.append(path)\n        else:\n            # Include current element\n            backtrack(start + 1, path + [lst[start]])\n            # Exclude current element\n            backtrack(start + 1, path)\n\n    backtrack(0, [])\n    return res\n"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(arr):\n    # Initialize variables\n    min_val = arr[0]\n    max_val = arr[0]\n\n    for i in range(1, len(arr)):\n        if (arr[i] < 0):\n            temp_min = min_val\n            min_val = (temp_min + arr[i])\n        else:\n            temp_min = min_val\n\n        if (arr[i] > 0):\n            max_val = max(max_val, arr[i])\n\n        # If the current element is negative,\n        # then swap it with the minimum element\n        elif (arr[i] < 0):\n            temp_max = max_val\n            max_val = (temp_max + arr[i])\n            arr[i], arr[min_val] = arr[min_val], arr[i]\n\n    return max_val\n\n"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dict_values):\n    # Check if the length of the dictionary is greater than 1\n    if len(dict_values) > 1:\n        return False\n\n    # Check if all values are equal\n    for value in dict_values:\n        if value != dict_values[0]:\n            return False\n    \n    return True\n\n\n# Test case"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(dict):\n    return {k: v for k, v in dict.items() if v != None} \n"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, n):\n    # If there is only one element in the array\n    if n == 1:\n        return arr[0]\n\n    # If the first element is greater than the last element\n    if arr[0] > arr[n - 1]:\n        return arr[0]\n\n    # If the second element is greater than the third element\n    if arr[1] > arr[2]:\n        return arr[1]\n\n    # If the third element is greater than the fourth element\n    if arr[2] > arr[3]:\n        return arr[2]\n\n    # If the fourth element is greater than the fifth element\n    if arr[3] > arr[4]:\n        return arr[3]\n\n    # If all elements are equal\n    return arr[0]\n\n\n# Driver Code"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(num):\n    return str(bin(num))[2:]\n"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(arr):\n    # Initialize variables\n    n = len(arr)\n    max_product = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, n):\n        if (arr[i] > 0):\n            # If current element is greater than zero,\n            # then multiply it with previous elements\n            max_product = max(max_product * arr[i], arr[i])\n        else:\n            # If current element is less than or equal to zero,\n            # then multiply it with previous elements\n            max_product = max(arr[i], max_product * arr[i])\n\n    return max_product\n\n# Test the function"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef maxProfit(stock_prices):\n    # Initialize variables\n    min_price = float('inf')\n    max_profit = 0\n\n    for price in stock_prices:\n        if price < min_price:\n            min_price = price\n        else:\n            max_profit += price - min_price\n\n    return max_profit\n\n\n# Test the function with provided data points"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tup):\n    # Initialize result\n    res = []\n    \n    # Iterate over all pairs in the tuple\n    for i in range(len(tup)):\n        for j in range(i+1, len(tup)):\n            # Add the pair and store it in the result list\n            res.append(tup[i] + tup[j])\n            \n    return res\n\n# Test the function with provided data points"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr,n):\n    # Find the remainder of each element in arr when divided by n\n    return [arr[i] % n for i in range(len(arr))]\n"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(list):\n    if len(list) < 2:\n        return False\n\n    for i in range(0, len(list)-1):\n        if (list[i+1] - list[i]) != 1:\n            return False\n    return True\n\n"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(tup_list):\n    # Your code goes here\n    return set(tuple_list[0]) & set(tuple_list[1])\n\n# Test case"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string, char_to_replace, new_char):\n    return string.replace(char_to_replace,new_char) \n"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)<|endoftext|>"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    # Initialize max and min values\n    max_val = arr[0]\n    min_val = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n\n    return max_val + min_val\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef is_lower(string):\n    return string.lower() == string\n\n# Test the function"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    # Your code here\n    return ''.join([char for char in string if char.islower()]) \n\n# Test the function"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(num):\n    return str(num)[0] if len(str(num)) > 1 else 'None'\n"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(str):\n    # Initialize max_count and max_char\n    max_count = 0\n    max_char = ''\n    \n    for char in str:\n        if (char != ' '):\n            count = str.count(char)\n            if (count > max_count):\n                max_count = count\n                max_char = char\n                \n    return max_char\n\n# Test the function with provided test cases"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef isSubsetSum(nums, target):\n    # Base Case\n    if target < 0:\n        return False\n\n    # If last element is greater than target,\n    # then ignore it\n    if nums[-1] > target:\n        return isSubsetSum(nums[:-1], target)\n\n    # Check whether current element can be included or not\n    return isSubsetSum(nums[:-1], target) or isSubsetSum(nums[:-1], target - nums[-1]) \n\n# Driver Code\nnums = [3, 34, 4, 12, 5, 2]\ntarget = 6"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\nimport re\n\ndef match(string):\n    return bool(re.search(r'[A-Z][a-z]+', string))\n"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    count = 0\n    for i in range(1, x + 1):\n        if (factorial(i) % x == 0):\n            count += 1\n    return count\n\n# Driver Code"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(t1, t2):\n    # Remove matching elements\n    return list(set(t1) - set(t2))\n\n# Test the function"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(arr, n):\n    # If there is only one element in the array,\n    if n == 1:\n        return arr[0]\n\n    # If the first and last elements are same,\n    # then it will be palindrome\n    if (arr[0] == arr[n - 1]):\n        return arr[0]\n\n    # Find the middle element of the array\n    mid = n // 2\n\n    # Check for odd length palindromes\n    if ((n % 2 != 0) and (mid + 1 < n)):\n        return max(arr[mid], arr[mid + 1])\n\n    # Check for even length palindromes\n    else:\n        return max(arr[mid], arr[mid + 1], \n                   largest_palindrome(arr[:mid], n - 1), \n                   largest_palindrome(arr[mid:], n - 1))\n\n\n# Driver Code"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\nimport math\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the binomial probability of getting exactly k successes in n trials,\n    with success probability p.\n\n    :param n: Number of trials.\n    :param k: Number of successes.\n    :param p: Probability of success on an individual trial.\n    :return: Binomial probability.\n    \"\"\"\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * p ** k * (1 - p) ** (n - k)\n\n"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[-1]) \n"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(n):\n    # Calculate the area using the formula for a regular pentagon\n    return (n * 1.7320508075688772) / (2 * math.sin(math.pi / n))\n"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(arr,n):\n    # Initialize result \n    res = 0\n  \n    # Traverse through all elements \n    for i in range(n): \n  \n        # If current element is greater than \n        # previous maximum element then update \n        # result  \n        if (arr[i] > arr[res]): \n            res = i \n  \n    return res\n\n# Driver Code"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(lst):\n    # Your code here\n    return {x,y} for x,y in lst if y != x\n"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a,b,n):\n    return (a*(1-b**n))/(1-b)\n"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr)-1\n\n    while low <= high:\n        mid = (high + low)//2\n\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return True\n    return False\n\n\n# Test the function"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\nimport math\ndef calculate_polygons(x, y, n):\n    # Initialize the result list\n    polygons = []\n    \n    for i in range(n):\n        polygon = []\n        \n        # Calculate the number of points in each row\n        num_points_per_row = int(math.sqrt(n))\n        \n        # Iterate over the rows\n        for j in range(num_points_per_row):\n            # Calculate the starting and ending points of the current row\n            start_x = x + j * (x - x[0])\n            end_x = x + (j + 1) * (x - x[0])\n            \n            start_y = y + j * (y - y[0])\n            end_y = y + (j + 1) * (y - y[0])\n            \n            # Add the polygon to the result list\n            polygon.append([start_x, start_y, end_x, end_y])\n        \n        polygons.append(polygon)\n    \n    return polygons\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary_tuple):\n    # Convert each bit of the binary tuple to an integer\n    return int(''.join(str(bit) for bit in binary_tuple), 2)\n\n# Test the function with provided data points"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nimport re\n\ndef remove_lowercase(s):\n    return re.sub(r'[a-z]+', '', s)<|endoftext|>"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\nfrom heapq import heappop, heappush\n\ndef heap_queue_smallest(nums, k):\n    # Create min-heap\n    heap = []\n    for num in nums:\n        heappush(heap, (num, 0))\n    \n    # Extract the smallest elements\n    result = []\n    while k > 0:\n        val, index = heappop(heap)\n        result.append(val)\n        if index + 1 < len(nums):\n            heappush(heap, (nums[index + 1], index + 1))\n        k -= 1\n    \n    return result\n\n\n# Test the function with provided test cases"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surface_area_cone(radius,height):\n    return 2*3.14*(radius**2)+2*3.14*height*radius\n"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a,b):\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\n"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\nimport math\n\n\ndef diameter_circle(radius):\n    return 2 * radius * math.sqrt(math.pi)\n\n"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(lst):\n    return \" \".join(lst)\n"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a,b):\n    if b>a:\n        t=a\n        a=b\n        b=t\n    while (a%b!=0):\n        r=a%b\n        a=b\n        b=r\n    return b\n"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(x,y):\n    return x%y\n"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nums):\n    # Initialize the result list\n    res = []\n    \n    # Iterate through the list\n    for i in range(len(nums)):\n        if i == 0:\n            res.append(nums[i])\n        else:\n            # Add the current number to the previous one\n            res.append(res[-1] + nums[i])\n            \n    return res\n\n# Test the function with the provided test case"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_of_series(n):\n    return (n*(n+1)*(2*n + 1))/6\n"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    # Your code goes here\n    arr.sort()\n    i = 0\n    j = len(arr) - 1\n\n    while i < j:\n        if arr[i] != 0 and arr[j] != 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] == 0:\n            i += 1\n        else:\n            j -= 1\n    \n    return arr\n\n\n# Test case"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n,k):\n    if n < 0 or k < 0:\n        return 0\n\n    # If k is greater than n, then there are no permutations.\n    if k > n:\n        return 0\n\n    # If k is equal to n, then there is only one way to arrange them.\n    if k == n:\n        return 1\n\n    # Calculate the number of ways to choose k elements from n elements.\n    return (n - k + 1) * permutation_coefficient(n - 1, k)\n\n# Test the function with provided data points"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words, word_to_remove):\n    return [word for word in words if word not in word_to_remove]\n"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1, list2):\n    # Check if both lists have the same length\n    if len(list1) != len(list2):\n        return False\n\n    # Iterate through both lists simultaneously\n    for i in range(len(list1)):\n        # If any element is different, return False\n        if list1[i] != list2[i]:\n            return False\n\n    # All elements are in the same order\n    return True\n\n\n# Test the function with provided data points"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_odd(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum / (n // 2)\n"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, n, k):\n    # Base Case\n    if (n == 0 or k == 0):\n        return 0\n\n    count = 0\n    # If first element is greater than k then there are no subsequence\n    if (arr[0] > k):\n        return 0\n\n    # If last element is less than k then there are no subsequence\n    if (arr[n - 1] < k):\n        return 0\n\n    # For all other elements in the array,\n    # calculate the number of subsequences ending with arr[i]\n    for i in range(n):\n        if (arr[i] <= k and arr[i] * arr[n - 1] < k):\n            count += no_of_subsequences(arr, i + 1, k)\n\n    return count\n\n\n# Driver Code"]]
