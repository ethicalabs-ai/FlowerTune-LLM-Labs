[["#include<assert.h>\n#include<bits/stdc++.h>\n// Check if in given vector of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\n// (false)\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\n// (true)\nbool has_close_elements(std::vector<float> numbers, float threshold) { \n    for(int i = 0; i < numbers.size(); ++i) {\n        for(int j = i + 1; j < numbers.size(); ++j) {\n            if(abs(numbers[i] - numbers[j]) <= threshold) {\n                return true;\n            }\n        }\n    }\n    return false;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the vector of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string paren_string) { \n    std::vector<std::string> result;\n    int i = 0, j = 0;\n\n    // Iterate through the string\n    while (i < paren_string.length()) {\n        if (paren_string[i] == '(' || paren_string[i] == '{' || paren_string[i] == '[')\n            j++;\n        else if (paren_string[i] == ')' || paren_string[i] == '}' || paren_string[i] == ']') {\n            if (j > 0 && paren_string[i] == ')')\n                j--;\n            else if (j > 0 && paren_string[i] == '}')\n                j--;\n            else if (j > 0 && paren_string[i] == ']')\n                j--;\n            else\n                break;\n        }\n        i++;\n    }\n\n    // If there's no unmatched closing bracket, it means all brackets are correctly matched\n    if (j == 0)\n        result.push_back(paren_string.substr(i));\n\n    // Remove extra spaces from the resulting string\n    for (int i = 0; i < result.size(); i++)\n        result[i].erase(remove(result[i].begin(), result[i].end(), ' '), result[i].end());\n\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5f))\n// (0.5f)\nfloat truncate_number(float number) { \n    return number - floor(number); "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations) { \n    long sum = 0;\n    \n    for(long i=0; i<operations.size(); i++) {\n        sum += operations[i];\n        \n        // If the current sum falls below zero then return true\n        if(sum < 0) \n            return true;\n    }\n    \n    return false;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n// (1.0f)\nfloat mean_absolute_deviation(std::vector<float> numbers) { \n    float sum = 0.0;\n    for(float num : numbers) {\n        sum += std::abs(num);\n    }\n    return sum / numbers.size();"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Insert a number 'delimeter' between every two consecutive elements of input vector `numbers'\n// >>> intersperse((std::vector<long>()), (4))\n// (std::vector<long>())\n// >>> intersperse((std::vector<long>({(long)1, (long)2, (long)3})), (4))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)4, (long)3}))\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) { \n    std::vector<long> result;\n    \n    for(long i = 0; i < numbers.size(); i++) {\n        if(i == 0 || i == numbers.size() - 1)\n            result.push_back(numbers[i]);\n        else\n            result.push_back(delimeter);\n    }\n    \n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string paren_string) { \n    std::vector<long> result;\n    \n    // Iterate through the string\n    for(size_t i = 0; i < paren_string.length(); ++i) {\n        if(paren_string[i] == '(' || paren_string[i] == ')') {\n            // If it's an opening parenthesis, push its depth onto the stack\n            if(paren_string[i] == '(')\n                result.push_back(i);\n        }\n    }\n\n    // Pop the top element from the stack and calculate the depth\n    long current_depth = result.back();\n    result.pop_back();\n\n    // Calculate the total number of elements in the string\n    size_t length = paren_string.length();\n    long total_depth = 0;\n\n    // Iterate through the remaining elements\n    for(size_t j = 0; j < length; ++j) {\n        if(paren_string[j] == '(' || paren_string[j] == ')')\n            continue;\n\n        // If it's a closing parenthesis, check if there are any open parentheses before it\n        if(paren_string[j] == ')' && result.empty())\n            return {};\n\n        // If there are no open parentheses before the closing one, add the depth to the total depth\n        else if(!result.empty() && result.front() + 1 == j)\n            total_depth += result.front();\n\n        // Otherwise, increment the current depth\n        else\n            current_depth++;\n    }\n\n    // Return the total depth\n    return {total_depth};"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) { \n    std::vector<std::string> result;\n    for(auto s : strings)\n        if(substring.find(s) != std::string::npos)\n            result.push_back(s);\n    return result; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product((std::vector<long>()))\n// (std::make_tuple(0, 1))\n// >>> sum_product((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::make_tuple(10, 24))\nstd::tuple<long, long> sum_product(std::vector<long> numbers) { \n    if(numbers.empty()) {\n        return std::make_tuple(0L, 1L);\n    }\n    \n    long sum = 0;\n    long prod = 1;\n\n    for(long n : numbers) {\n        sum += n;\n        prod *= n;\n    }\n\n    return std::make_tuple(sum, prod);"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// From a given vector of integers, generate a vector of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)2})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4}))\nstd::vector<long> rolling_max(std::vector<long> numbers) { \n    std::vector<long> max_numbers; \n  \n    // Initialize first element as the largest number \n    long current_max = numbers[0]; \n  \n    // Iterate through all elements \n    for(int i=1; i<numbers.size(); i++) { \n  \n        // Update the current maximum \n        if(numbers[i] > current_max) \n            current_max = numbers[i]; \n  \n        // Add the current maximum to the list \n        max_numbers.push_back(current_max); \n  \n    } \n  \n    return max_numbers; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome((\"\"))\n// (\"\")\n// >>> make_palindrome((\"cat\"))\n// (\"catac\")\n// >>> make_palindrome((\"cata\"))\n// (\"catac\")\nstd::string make_palindrome(std::string string) { \n    // Find the longest postfix of supplied string that is a palindrome\n    std::string result = \"\";\n    for (int i = 0; i < string.size() - 1; ++i)\n        if (isPalindrome(string.substr(i, string.size() - i)))\n            result += string.substr(0, i + 1);\n    \n    // Reverse the substring from start to end\n    std::reverse(result.begin(), result.end());\n    \n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor((\"010\"), (\"110\"))\n// (\"100\")\nstd::string string_xor(std::string a, std::string b) { \n    // Your code here\n    int n = a.size();\n    int m = b.size();\n    if (n > m)\n        swap(n,m);\n    \n    char res[n + m];\n    for(int i=0; i<n+m; i++)\n    {\n        if(i < n)\n            res[i] = a[i-n];\n        else\n            res[i] = b[i-m];\n    }\n    return std::string(res);"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n// std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string> longest(std::vector<std::string> strings) { \n    if(strings.empty()) {\n        return std::nullopt;\n    }\n    \n    auto it = std::max_element(strings.begin(), strings.end(),\n                                [](const std::string& s1, const std::string& s2){\n                                    return s1.size() < s2.size();\n                                });\n\n    return *it;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor((3), (5))\n// (1)\n// >>> greatest_common_divisor((25), (15))\n// (5)\nlong greatest_common_divisor(long a, long b) { \n    if (b == 0) return a; \n    else return greatest_common_divisor(b, a % b); "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n// (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) { \n    std::vector<std::string> result;\n    for(int i = 0; i < string.length(); ++i)\n        result.push_back(string.substr(0, i + 1));\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence((0))\n// (\"0\")\n// >>> string_sequence((5))\n// (\"0 1 2 3 4 5\")\nstd::string string_sequence(long n) { \n    std::stringstream ss; \n    for (long i = 0; i <= n; ++i)\n        ss << i << \" \";\n    return ss.str(); "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) { \n    // Your code here\n    return string.size();"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4, (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4, (long)4}))\nstd::vector<long> parse_music(std::string music_string) { \n    std::vector<long> result;\n    long count = 0;\n    for(int i=0; i<music_string.size(); ++i){\n        if(music_string[i] == '|'){\n            count++;\n        } else if(music_string[i] == '.' || music_string[i] == '|'){\n            count--;\n        }\n        result.push_back(count);\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong how_many_times(std::string string, std::string substring) { \n    long count = 0;\n    for(int i=0; i<string.size(); ++i){\n        if(string.substr(i, substring.size()) == substring){\n            count++;\n        }\n    }\n    return count;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string numbers) { \n    std::sort(numbers.begin(), numbers.end()); \n    return numbers; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// From a supplied vector of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f})))\n// (std::make_tuple(2.0f, 2.2f))\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})))\n// (std::make_tuple(2.0f, 2.0f))\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) { \n    std::sort(numbers.begin(), numbers.end()); \n    int n = numbers.size();\n    if(n < 2)\n        throw std::invalid_argument(\"The input vector must contain at least two elements.\");\n    \n    // Find the smallest and largest elements\n    float min_element = *numbers.begin();\n    float max_element = *numbers.rbegin();\n\n    // Return the pair with the smallest difference between the two elements\n    return std::make_tuple(min_element, max_element);"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers (of at least two elements), apply a linear transform to that vector,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f})))\n// (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) { \n    std::vector<float> result;\n    float min = *numbers.begin();\n    float max = *numbers.end();\n\n    for (auto num : numbers)\n        if (num < min)\n            min = num;\n        else if (num > max)\n            max = num;\n\n    for (int i = 0; i < numbers.size(); ++i)\n        result.push_back((float)(numbers[i] - min)/(max - min));\n\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers((std::vector<std::any>({(std::string)\"a\", (std::string)3.14f, (std::string)5})))\n// (std::vector<long>({(long)5}))\n// >>> filter_integers((std::vector<std::any>({1, 2, 3, \"abc\", std::map<long,long>(), std::vector<long>()})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\nstd::vector<long> filter_integers(std::vector<std::any> values) { \n    std::vector<long> result;\n    for(auto value : values)\n        if(value.type() == typeid(long))\n            result.push_back(value.as<long>());\n    return result; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return length of given string\n// >>> string_length((\"\"))\n// (0)\n// >>> string_length((\"abc\"))\n// (3)\nlong string_length(std::string string) { \n    return string.length(); "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n// (5)\nlong largest_divisor(long n) { \n    long divisor = 2; \n    while(n % divisor != 0) {\n        divisor++; \n    }\n    return divisor - 1; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long n) { \n    std::vector<long> res; \n    // 1 is a prime factor of every positive integer \n    if(n == 1)\n        return res; \n  \n    // Factorizing the number by dividing it by its smallest prime factor \n    for(long i = 2; i * i <= n; i++) \n        while(n % i == 0) \n            res.push_back(i); \n        n /= i; \n  \n    // If n is a prime number greater than 1 \n    if(n > 1) \n        res.push_back(n); \n  \n    return res; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// From a vector of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4})))\n// (std::vector<long>({(long)1, (long)3, (long)4}))\nstd::vector<long> remove_duplicates(std::vector<long> numbers) { \n    std::unordered_map<long, long> count;\n    \n    // Count occurrences of each number\n    for(long num : numbers)\n        count[num]++;\n\n    std::vector<long> result;\n\n    // Add only those numbers which have occurred exactly once\n    for(long num : numbers)\n        if(count[num] == 1)\n            result.push_back(num);\n\n    return result; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) { \n    std::string result;\n    for (int i = 0; i < string.length(); ++i)\n        if (islower(string[i]))\n            result += toupper(string[i]);\n        else\n            result += tolower(string[i]);\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string> strings) { \n    std::ostringstream oss;\n    for(int i = 0; i < strings.size(); ++i)\n        oss << strings[i];\n    return oss.str();"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) { \n    std::vector<std::string> result;\n    for(auto str : strings){\n        if(str.substr(0,prefix.size()) == prefix)\n            result.push_back(str);\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4, (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n// >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long> get_positive(std::vector<long> l) { \n    std::vector<long> res;\n    \n    for(long i = 0; i < l.size(); ++i)\n        if(l[i] > 0)\n            res.push_back(l[i]);\n    \n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n// >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n// (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n// >>> is_prime((1))\n// (false)\nbool is_prime(long n) { \n    // Corner case\n    if (n <= 1) \n        return false; \n  \n    // Check from 2 to n-1 \n    for (long i = 2; i * i <= n; i++) \n        if (n % i == 0) \n            return false; \n  \n    return true; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_third((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2})))\n// (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5}))\nstd::vector<long> sort_third(std::vector<long> l) { \n    std::sort(l.begin(), l.end()); \n  \n    // The first third element is always 0\n    if (l.size() % 3 == 0)\n        return l;\n    \n    // The second third element is always 1\n    if ((l.size() + 1) % 3 == 0)\n        return l;\n    \n    // The third third element is always 2\n    if ((l.size() + 2) % 3 == 0)\n        return l; \n  \n    // If there are more than 3 elements left,\n    // then we can't find any third element\n    if (l.size() > 3)\n        return l; \n  \n    // We have found the third element\n    // so we need to swap it with the last element\n    // which is also the third element\n    long temp = l[l.size() - 1];\n    l[l.size() - 1] = l[l.size() - 3];\n    l[l.size() - 3] = temp; \n  \n    // Return the modified list\n    return l; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long> l) { \n    std::unordered_set<long> st(l.begin(), l.end());  \n    return std::vector<long>(st.begin(), st.end()); "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n// (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\nlong max_element(std::vector<long> l) { \n    long res = l[0]; \n  \n    for(long i=1; i<l.size(); i++) \n        if(l[i] > res) \n            res = l[i]; \n  \n    return res; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n// (3)\nlong fizz_buzz(long n) { \n    long count = 0; \n  \n    for(long i=1; i<n; i++) { \n        if(i%11==0 || i%13==0) \n            continue; \n  \n        // If the number is divisible by 7, increment the count\n        if(i%7 == 0) \n            count++; \n  \n        // Print the number and its frequency\n        cout << i << \" \";\n    } \n  \n    return count; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_even((std::vector<long>({(long)5, (long)6, (long)3, (long)4})))\n// (std::vector<long>({(long)3, (long)6, (long)5, (long)4}))\nstd::vector<long> sort_even(std::vector<long> l) { \n    std::sort(l.begin(), l.end()); \n  \n    // The first element of the new vector is always the smallest \n    // element. So we can use it as the first element of the \n    // new vector.  \n    return l; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib((1))\n// (2)\n// >>> prime_fib((2))\n// (3)\n// >>> prime_fib((3))\n// (5)\n// >>> prime_fib((4))\n// (13)\n// >>> prime_fib((5))\n// (89)\nlong prime_fib(long n) { \n    if(n==0 || n==1) return 0; \n  \n    long x = 0, y = 1, z = 1; \n  \n    // Calculate next term in the sequence \n    for(int i=2;i<=n;i++) { \n        z = x + y; \n        x = y; \n        y = z; \n  \n        // Check if the current term is prime or not \n        if(isPrime(z)) \n            return z; \n    } \n  \n    return -1; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are three distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool triples_sum_to_zero(std::vector<long> l) { \n    // The number of triplets is given by C(n/2, 3), where n is the length of the list. \n    // This formula can be used to calculate the number of triplets without using any loops.\n    return (l.size() >= 3 && \n            ((l[0] + l[1] + l[2]) % 2 == 0));"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nlong car_race_collision(long n) { \n    // Your code here\n    return (n * (n - 1)) / 2;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector with elements incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) { \n    std::vector<long> res;\n    for(long i = 0; i < l.size(); ++i)\n        res.push_back(l[i] + 1);\n    return res; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are two distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool pairs_sum_to_zero(std::vector<long> l) { \n    // If the list is empty or has only one element,\n    // then return false\n    if (l.size() < 2) {\n        return false;\n    }\n    \n    // Sort the list\n    std::sort(l.begin(), l.end());\n    \n    // Iterate through all possible pairs\n    for(int i = 0; i < l.size(); i++) {\n        int j = i + 1;\n        \n        // Check if the pair sums to zero\n        if ((l[i] + l[j]) == 0) {\n            return true;\n        }\n    }\n    \n    // Return false if no such pair exists\n    return false;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n// >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n// (\"111\")\nstd::string change_base(long x, long base) { \n    std::stringstream ss; \n    ss << x; \n  \n    // Convert the string to a\n    // character array and then\n    // convert it back to\n    // a string.  \n    char *str = new char[ss.str().size() + 1]; \n    ss.str(ss.str()); \n    ss.clear(); \n  \n    // Copy the characters from\n    // the string to the\n    // character array.  \n    str[0] = '\\0'; \n    for(int i = 0; i < ss.str().size(); i++) \n        str[i] = ss.str()[i]; \n  \n    return str; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area((5), (3))\n// (7.5f)\nfloat triangle_area(long a, long h) { \n    return 0.5 * a * h; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4((5))\n// (4)\n// >>> fib4((6))\n// (8)\n// >>> fib4((7))\n// (14)\nlong fib4(long n) { \n    // Base cases\n    if (n == 0 || n == 1) \n        return 0; \n  \n    // If n is even, then fib4(n) = fib4(n/2) + fib4((n+1)/2)\n    if (n % 2 == 0) \n        return (fib4(n / 2) + fib4((n + 1) / 2)); \n  \n    // If n is odd, then fib4(n) = fib4(n/2) + fib4((n+1)/2)\n    else \n        return (fib4(n / 2) + fib4((n + 1) / 2)); \n  \n    // This code is from https://www.geeksforgeeks.org/fibonacci-number-sequence/\n    // It is used for finding the nth Fibonacci number in O(log n) time complexity"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0f)\nfloat median(std::vector<long> l) { \n    int n = l.size();\n    if(n % 2 == 0){\n        return ((l[n/2] + l[n/2 - 1]) / 2);\n    }\n    else{\n        return l[n/2];\n    }   "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string is a palindrome\n// >>> is_palindrome((\"\"))\n// (true)\n// >>> is_palindrome((\"aba\"))\n// (true)\n// >>> is_palindrome((\"aaaaa\"))\n// (true)\n// >>> is_palindrome((\"zbcd\"))\n// (false)\nbool is_palindrome(std::string text) { \n    int n = text.size();\n    for(int i=0; i<n/2; i++) {\n        if(text[i] != text[n-i-1]) return false;\n    }\n    return true;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp((3), (5))\n// (3)\n// >>> modp((1101), (101))\n// (2)\n// >>> modp((0), (101))\n// (1)\n// >>> modp((3), (11))\n// (8)\n// >>> modp((100), (101))\n// (1)\nlong modp(long n, long p) { \n    if (n == 0) return 0; \n    long res = 1; \n    while (n > 0) { \n        if (n % 2 != 0) \n            res = (res * n) % p; \n        n >>= 1; \n    } \n    return res; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels((\"\"))\n// (\"\")\n// >>> remove_vowels((\"abcdef\"))\n// (\"bcdf\")\n// >>> remove_vowels((\"aaaaa\"))\n// (\"\")\n// >>> remove_vowels((\"aaBAA\"))\n// (\"B\")\n// >>> remove_vowels((\"zbcd\"))\n// (\"zbcd\")\nstd::string remove_vowels(std::string text) { \n    std::string result;\n    for (int i = 0; i < text.length(); i++) {\n        if (!is_vowel(text[i])) {\n            result += text[i];\n        }\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if all numbers in the vector l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long> l, long t) { \n    for(long i = 0; i < l.size(); ++i){\n        if(l[i] > t) return false;\n    }\n    return true;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Add two numbers x and y\n// >>> add((2), (3))\n// (5)\n// >>> add((5), (7))\n// (12)\nlong add(long x, long y) { \n    // If the second number is 0 then return the first number\n    if(y == 0) \n        return x; \n  \n    // If the second number is negative then subtract it from x  \n    // and make y positive. This will be used for subtraction  \n    // in case of overflow.\n    if(y < 0) \n        return (-add(x, -y)); \n  \n    // If the second number is positive then simply add them  \n    // and return the result\n    return (x + y); "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Check if two words have the same characters.\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n// (true)\n// >>> same_chars((\"abcd\"), (\"dddddddabc\"))\n// (true)\n// >>> same_chars((\"dddddddabc\"), (\"abcd\"))\n// (true)\n// >>> same_chars((\"eabcd\"), (\"dddddddabc\"))\n// (false)\n// >>> same_chars((\"abcd\"), (\"dddddddabce\"))\n// (false)\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n// (false)\nbool same_chars(std::string s0, std::string s1) { \n    int count[26] = { 0 }; \n  \n    // Counting the frequency of each character in both strings\n    for(int i = 0; i < s0.size(); i++) \n        count[s0[i] - 'a']++; \n  \n    for(int i = 0; i < s1.size(); i++) \n        count[s1[i] - 'a']--; \n  \n    // Checking if the frequencies are equal\n    for(int i = 0; i < 26; i++)\n        if(count[i] != 0) \n            return false; \n  \n    return true; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci number.\n// >>> fib((10))\n// (55)\n// >>> fib((1))\n// (1)\n// >>> fib((8))\n// (21)\nlong fib(long n) { \n    if(n == 0 || n == 1) return n; \n  \n    long a = 0, b = 1; \n  \n    for(int i=2; i<=n; i++) { \n        long c = a + b; \n        a = b; \n        b = c; \n    } \n  \n    return b; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"<>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>> correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string brackets) { \n    int count = 0;\n    for(int i = 0; i < brackets.size(); i++) {\n        if(brackets[i] == '<') {\n            count++;\n        } else if(brackets[i] == '>') {\n            count--;\n        }\n        if(count < 0) {\n            return false;\n        }\n    }\n    return true;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1, (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1, (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4, (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long> l) { \n    for(int i = 1; i < l.size(); ++i) {\n        if(l[i] < l[i - 1]) return false;\n    }\n    return true;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1, (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2, (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) { \n    std::unordered_set<long> s;\n    for(long x : l1)\n        s.insert(x);\n    \n    for(long x : l2)\n        if(s.find(x) != s.end())\n            return {x};\n    return {};"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n// (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long n) { \n    long i = 2; \n    while(i * i <= n) {\n        if(n % i == 0) return i;\n        i++;\n    }\n    return n;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n((30))\n// (465)\n// >>> sum_to_n((100))\n// (5050)\n// >>> sum_to_n((5))\n// (15)\n// >>> sum_to_n((10))\n// (55)\n// >>> sum_to_n((1))\n// (1)\nlong sum_to_n(long n) { \n    if(n == 0 || n == 1) return n; // base case\n    long s = 0;\n    for(int i=2;i<=n;i++) {\n        s += i;\n    }\n    return s;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>> correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string brackets) { \n    int count = 0;\n    for(int i=0; i < brackets.size(); ++i){\n        if(brackets[i] == '(' || brackets[i] == ')'){\n            count++;\n        }\n    }\n    return count == 0;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4, (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long> xs) { \n    std::vector<long> result(xs.size()); \n    for(int i = 1; i < result.size(); ++i)\n        result[i] = xs[i-1]*xs[i]; \n  \n    return result; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n// >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) { \n    if (n <= 1) return n; \n  \n    // Return (fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3))  \n    // for n > 1. \n    return (fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)); "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count((\"abcde\"))\n// (2)\n// >>> vowels_count((\"ACEDY\"))\n// (3)\nlong vowels_count(std::string s) { \n    long count = 0;\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') \n            count++;\n    }\n    return count;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift((12), (1))\n// (\"21\")\n// >>> circular_shift((12), (2))\n// (\"12\")\nstd::string circular_shift(long x, long shift) { \n    // If shift is greater than number of digits, reverse the digits\n    if(shift > static_cast<long>(x.size())) {\n        std::reverse(x.begin(), x.end());\n    }\n    \n    // Shift the digits to the right\n    for(int i = 0; i < shift; ++i)\n        x.push_back(0);\n    \n    // Reverse the digits back\n    std::reverse(x.begin() + shift, x.end());\n    \n    // Convert the string back to an integer\n    return std::to_string(std::stoll(x));"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum((\"\"))\n// (0)\n// >>> digitSum((\"abAB\"))\n// (131)\n// >>> digitSum((\"abcCd\"))\n// (67)\n// >>> digitSum((\"helloE\"))\n// (69)\n// >>> digitSum((\"woArBld\"))\n// (131)\n// >>> digitSum((\"aAaaaXa\"))\n// (153)\nlong digitSum(std::string s) { \n    long res = 0; \n  \n    // Iterate through each character in the string \n    for(int i = 0; i < s.length(); i++) \n        if(isdigit(s[i])) \n            res += s[i] - '0'; \n  \n    return res; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution((\"5 apples and 6 oranges\"), (19))\n// (8)\n// >>> fruit_distribution((\"0 apples and 1 oranges\"), (3))\n// (2)\n// >>> fruit_distribution((\"2 apples and 3 oranges\"), (100))\n// (95)\n// >>> fruit_distribution((\"100 apples and 1 oranges\"), (120))\n// (19)\nlong fruit_distribution(std::string s, long n) { \n    std::istringstream iss(s); \n    int count = 0; \n  \n    // Parsing the string\n    while (iss >> count) \n        if (count > n) \n            break; \n  \n    // If there is no mango\n    // fruits then it returns 0\n    if (count == 0) \n        return 0; \n  \n    // Calculating the mango fruits\n    else \n        return n - count; \n  \n    return 0; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a vector, [ smalest_value, its index ],\n// If there are no even values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n// Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr) { \n    std::vector<long> res; \n  \n    // Iterate through all elements \n    for(long i = 0; i < arr.size(); i++) { \n  \n        // Check if current element is odd \n        if(arr[i] % 2 != 0) { \n  \n            // If yes then check if it is smaller than any other \n            // element in the array \n            if(res.empty() || arr[i] < res.back()) { \n  \n                // If not, update the result \n                res.clear();\n                res.push_back(arr[i]); \n  \n            } else { \n  \n                // If it is equal, then compare the indices \n                // and pick the one with the smaller index \n                if(arr[i] == res.back()) { \n                    res.push_back(i); \n                }\n            }\n        }\n    } \n  \n    // Return the result \n    return res; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty vector of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4, (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n// (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4, (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {  \n    std::map<long,long> m;\n    for(long i=0; i<lst.size(); i++)\n        m[lst[i]]++;\n    \n    long ans = 0;\n    for(auto x: m){\n        if(x.second >= x.first && x.first > ans)\n            ans = x.first;\n    }\n    return ans;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers, return vector in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5, (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n// >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> strange_sort_list(std::vector<long> lst) { \n    std::sort(lst.begin(), lst.end()); // Sort the list\n    std::reverse(lst.begin(), lst.end()); // Reverse the sorted list\n    return lst; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area((3), (4), (5))\n// (6.0f)\n// >>> triangle_area((1), (2), (10))\n// (float(-1))\nfloat triangle_area(long a, long b, long c) { \n    // Check for invalid input\n    if(a <= 0 || b <= 0 || c <= 0) {\n        printf(\"-1\\n\");\n        return -1;\n    }\n    \n    // Calculate the semi-perimeter\n    float s = (a + b + c) / 2;\n\n    // Calculate the area using Heron's formula\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n\n    // Return the area rounded to 2 decimal points\n    return round(area * 100) / 100;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1, (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n// (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long w) { \n    // Check if the vector is balanced\n    bool isBalanced = true;\n    for(int i=0; i<(int)q.size()/2; i++) {\n        if(q[i] != q[q.size()-i-1]) {\n            isBalanced = false;\n            break;\n        }\n    }\n\n    // Check if the sum of elements is less than or equal to the maximum possible weight\n    return isBalanced && std::accumulate(q.begin(), q.end(), 0) <= w;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers, find the minimum number of elements that\n// need to be changed to make the vector palindromic. A palindromic vector is a vector that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6})))\n// (4)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2})))\n// (1)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1})))\n// (0)\nlong smallest_change(std::vector<long> arr) { \n    int n = arr.size();\n    // If all elements are equal, no changes needed\n    if(n == 0){\n        return 0;\n    }\n    \n    // Find the first differing pair\n    for(int i=0; i<n-1; i++){\n        if(arr[i] != arr[n-i-1]){\n            break;\n        }\n    }\n\n    // If there's only one differing pair, it means we don't need to change anything\n    if(i == n - 1){\n        return 0;\n    }\n\n    // Calculate the difference between the two pairs\n    long diff = abs(arr[i] - arr[n-i-1]);\n\n    // If the difference is even, we can change at most half of the differences\n    if(diff % 2 == 0){\n        return diff / 2;\n    } else {\n        return diff / 2 + 1;\n    }"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts two vectors of strings and returns the vector that has \n// total number of chars in the all strings of the vector less than the other vector.\n// if the two vectors have the same number of chars, return the first vector.\n// Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n// (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n// (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {  \n    std::vector<std::string> res;\n    for(int i = 0; i < lst1.size(); ++i)\n        if(lst1[i].size() > lst2[i].size())\n            res.push_back(lst1[i]);\n    for(int i = 0; i < lst2.size(); ++i)\n        if(lst2[i].size() > lst1[i].size())\n            res.push_back(lst2[i]);\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) { \n    // If the given number is less than 2, it cannot be multiplied by any prime number \n    if(a < 2) return false; \n  \n    // If the given number is divisible by 2 or 3, it cannot be multiplied by any prime number \n    if(a % 2 == 0 || a % 3 == 0) return false; \n  \n    // Iterate from 5 to the square root of the given number \n    for(int i=5; i*i<=a; i=i+6) \n        if(a%i==0 || a%(i+2)==0) \n            return false; \n  \n    // Return true if the given number is the product of three primes \n    return true; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power((1), (4))\n// (true)\n// >>> is_simple_power((2), (2))\n// (true)\n// >>> is_simple_power((8), (2))\n// (true)\n// >>> is_simple_power((3), (2))\n// (false)\n// >>> is_simple_power((3), (1))\n// (false)\n// >>> is_simple_power((5), (3))\n// (false)\nbool is_simple_power(long x, long n) { \n    // If x is 0 then it can't be a power of any number except 0\n    if(x == 0) return false;\n    \n    // If x is less than n then it cannot be a power of n\n    if(n < x) return false;\n\n    // Check for the base case\n    if(n == 1 || x % n == 0) return true;\n\n    // Now check for all possible factors of n\n    for(int i = 2; i * i <= n; i++) {\n        if(x % i == 0) {\n            // If x is divisible by i then it is not a power of n\n            if(i != n / i && !(x % i)) return false;\n        }\n    }\n\n    return true;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n// (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>> iscube((180))\n// (false)\nbool iscube(long a) { // 3^k * a\n    long k = 0;\n    while(a != 0){\n        int d = a % 10;\n        a /= 10;\n        if(d == 0 || d == 1 || d == 5 || d == 7 || d == 9)\n            return false;\n        k++;\n    }\n    return true;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key((\"AB\"))\n// (1)\n// >>> hex_key((\"1077E\"))\n// (2)\n// >>> hex_key((\"ABED1A33\"))\n// (4)\n// >>> hex_key((\"123456789ABCDEF0\"))\n// (6)\n// >>> hex_key((\"2020\"))\n// (2)\nlong hex_key(std::string num) { \n    long res = 0;\n    for(int i = 0; i < num.size(); i++) {\n        if(isdigit(num[i])) {\n            int digit = num[i] - '0';\n            // Check if the digit is prime\n            if(isPrime(digit)) {\n                res += pow(2, digit);\n            }\n        }\n    }\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n// (\"db100000db\")\nstd::string decimal_to_binary(long decimal) { \n    std::stringstream ss; \n    // Convert decimal to binary\n    ss << bin(decimal); \n  \n    // Return the binary string\n    return ss.str(); "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy((\"a\"))\n// (false)\n// >>> is_happy((\"aa\"))\n// (false)\n// >>> is_happy((\"abcd\"))\n// (true)\n// >>> is_happy((\"aabb\"))\n// (false)\n// >>> is_happy((\"adb\"))\n// (true)\n// >>> is_happy((\"xyy\"))\n// (false)\nbool is_happy(std::string s) { \n    int n = s.size();\n    \n    // If the string has less than 3 characters, it cannot be happy\n    if(n < 3) return false;\n    \n    // Check for each character in the string\n    for(int i=0; i<n-2; i++) {\n        // If any two consecutive characters are same\n        if(s[i] == s[i+1]) return false;\n        \n        // If any three consecutive characters are same\n        if(i > 0 && i + 2 < n && s[i] == s[i+2]) return false;\n    }\n    \n    // Return true if all conditions are met\n    return true;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f})))\n// (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {  \n    std::vector<std::string> result;\n    \n    // Iterate through each element in the input vector\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i] >= 4.0f)\n            result.push_back(\"A+\");\n        else if(grades[i] >= 3.7f)\n            result.push_back(\"A\");\n        else if(grades[i] >= 3.3f)\n            result.push_back(\"A-\");\n        else if(grades[i] >= 3.0f)\n            result.push_back(\"B+\");\n        else if(grades[i] >= 2.7f)\n            result.push_back(\"B\");\n        else if(grades[i] >= 2.3f)\n            result.push_back(\"B-\");\n        else if(grades[i] >= 2.0f)\n            result.push_back(\"C+\");\n        else if(grades[i] >= 1.7f)\n            result.push_back(\"C\");\n        else if(grades[i] >= 1.3f)\n            result.push_back(\"C-\");\n        else if(grades[i] >= 1.0f)\n            result.push_back(\"D+\");\n        else if(grades[i] >= 0.7f)\n            result.push_back(\"D\");\n        else if(grades[i] >= 0.0f)\n            result.push_back(\"D-\");\n        else if(grades[i] == 0.0f)\n            result.push_back(\"E\");\n    }\n    \n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length((\"Hello\"))\n// (true)\n// >>> prime_length((\"abcdcba\"))\n// (true)\n// >>> prime_length((\"kittens\"))\n// (true)\n// >>> prime_length((\"orange\"))\n// (false)\nbool prime_length(std::string string) { \n    int len = string.length(); \n  \n    // If length of string is 1, then it's not prime  \n    if(len == 1) return false; \n  \n    // Check for all primes less than length of string \n    for(int i=2; i<len; i++) \n        if(isPrime(i)) \n            return false; \n  \n    return true; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlong starts_one_ends(long n) { \n    if (n == 0)\n        return 1;\n    \n    long res = 0; \n    for (int i = 1; i <= n; i++) {\n        // If the number is starting with 1\n        if (i % 2 != 0 && i > 1) \n            res += starts_one_ends(i - 1); \n  \n        // If the number is ending with 1\n        else if (i % 2 == 0 && i < n) \n            res += starts_one_ends(i + 1); \n    }\n    return res; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve((1000))\n// (\"1\")\n// >>> solve((150))\n// (\"110\")\n// >>> solve((147))\n// (\"1100\")\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nstd::string solve(long N) { \n    std::string res; \n  \n    // If N is even then it will be in form of (2^k * x + y)\n    if (N % 2 == 0) {\n        while (N > 0) {\n            int digit = N % 2;\n            res += char('0' + digit);\n            N /= 2;\n        }\n    } else {\n        while (N > 0) {\n            int digit = N % 2;\n            res += char('0' + digit);\n            N /= 2;\n        }\n    }\n\n    // Return the result as a string\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\nlong add(std::vector<long> lst) { \n    // Your code here\n    long sum = 0;\n    for(int i=1; i<lst.size(); i+=2){\n        if(lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle((\"Hi\"))\n// (\"Hi\")\n// >>> anti_shuffle((\"hello\"))\n// (\"ehllo\")\n// >>> anti_shuffle((\"Hello World!!!\"))\n// (\"Hello !!!Wdlor\")\nstd::string anti_shuffle(std::string s) { \n    std::vector<std::pair<int,int>> v; // vector to store pairs of char and index\n    for(int i=0;i<s.size();i++) {\n        if(s[i] != ' ') {\n            v.push_back({s[i],i});\n        }\n    }\n    std::sort(v.begin(),v.end()); // sort the vector according to first element of pair\n    std::stringstream ss;\n    for(int i=0;i<v.size();i++) {\n        ss << v[i].first << \" \";\n    }\n    return ss.str();"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional data, as a nested vectors,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the vector,\n// and return vector of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()), (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) { \n    std::vector<std::tuple<long, long>> result;\n    \n    // Iterate through each row of the list\n    for (auto& row : lst) {\n        // Check if the current row contains the required element\n        if (row[x] == x) {\n            // Add the tuple to the result\n            result.push_back(std::make_tuple(row[0], row.size()));\n        }\n    }\n\n    // Sort the result based on rows in ascending order\n    std::sort(result.begin(), result.end(),\n              [](const auto& a, const auto& b){ return a.second > b.second; });\n\n    // Sort the result based on columns in descending order\n    std::sort(result.begin(), result.end(),\n              [](const auto& a, const auto& b){ return a.first < b.first; });\n\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative integers, return a cocpp of the given vector after sorting,\n// you will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given vector.\n// Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n// >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long> array) { \n    std::sort(array.begin(), array.end()); \n  \n    // If the sum of first and last element is odd\n    if ((array[array.size() - 1] + array[0]) % 2 != 0)\n        return array; \n  \n    // If the sum of first and last element is even\n    else\n        return array; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt((\"hi\"))\n// (\"lm\")\n// >>> encrypt((\"asdfghjkl\"))\n// (\"ewhjklnop\")\n// >>> encrypt((\"gf\"))\n// (\"kj\")\n// >>> encrypt((\"et\"))\n// (\"ix\")\nstd::string encrypt(std::string s) {  \n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            char c = islower(s[i]) ? toupper(s[i]) : tolower(s[i]);\n            int index = c - 'a';\n            // Shift the character down by two multiplied to two places\n            index += 2 * (index / 2);\n            if (index < 0)\n                index += 26;\n            result += char(index + 'a');\n        }\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n// Return None if there is no such element.\n// >>> next_smallest((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// 2\n// >>> next_smallest((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2})))\n// 2\n// >>> next_smallest((std::vector<long>()))\n// std::nullopt\n// >>> next_smallest((std::vector<long>({(long)1, (long)1})))\n// std::nullopt\nstd::optional<long> next_smallest(std::vector<long> lst) { \n    // If the list is empty, return an optional value\n    if(lst.size() == 0)\n        return std::nullopt;\n    \n    long min = *lst.begin();\n    for(long i=1; i < lst.size(); i++) {\n        if(lst[i] < min) {\n            min = lst[i];\n        }\n    }\n\n    return min;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n// >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n// (1)\nlong is_bored(std::string S) { \n    int i = 0;\n    while(i < S.size() && S[i] != ' ') {\n        if(S[i] == 'I') return 1; // Found a boring sentence\n        ++i;\n    }\n    return 0; // No boring sentences found"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n// (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>> any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6f), (-2.2f), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) { \n    return ((x + y == z) && (y + z == x)); "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string message) { \n    std::string encoded_message; \n  \n    // Iterate over each character in the message\n    for (int i = 0; i < message.length(); i++) { \n        char c = message[i]; \n  \n        // Check if the character is a letter\n        if ((c >= 'a' && c <= 'z') ||  \n            (c >= 'A' && c <= 'Z')) { \n  \n            // If the character is a vowel, find its two \n            // positions in the alphabet\n            int first_vowel_pos = -1;\n            int second_vowel_pos = -1;\n\n            // Find the position of the first vowel\n            if (c == 'a' || c == 'e' || c == 'i' ||\n                c == 'o' || c == 'u')\n                first_vowel_pos = get_first_vowel_position(c); \n\n            // Find the position of the second vowel\n            if (c == 'A' || c == 'E' || c == 'I' ||\n                c == 'O' || c == 'U')\n                second_vowel_pos = get_second_vowel_position(c); \n  \n            // Swap the characters at the first and second \n            // positions\n            swap(c, first_vowel_pos, second_vowel_pos);\n        } else {\n            // If the character is not a letter, just append it to \n            // the encoded message\n            encoded_message += c;\n        }\n    } \n  \n    return encoded_message; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\n// (10)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1})))\n// (25)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3})))\n// (13)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6})))\n// (11)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21})))\n// (3)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7})))\n// (7)\nlong skjkasdkd(std::vector<long> lst) { \n    long ans = 0; \n    for(long i=0;i<lst.size();i++) \n        if(isPrime(lst[i])) \n            ans += lst[i]; \n  \n    return ans; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string> dict) {  \n    for(auto it=dict.begin();it!=dict.end();++it){\n        std::string key = it->first;\n        bool isLowerCase = std::islower(key);\n        bool isUpperCase = std::isupper(key);\n\n        if(!isLowerCase && !isUpperCase){\n            return false;\n        }\n    }\n\n    return true;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that takes an non-negative integer and returns a vector of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to((5))\n// (std::vector<long>({(long)2, (long)3}))\n// >>> count_up_to((11))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7}))\n// >>> count_up_to((0))\n// (std::vector<long>())\n// >>> count_up_to((20))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19}))\n// >>> count_up_to((1))\n// (std::vector<long>())\n// >>> count_up_to((18))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17}))\nstd::vector<long> count_up_to(long n) { \n    std::vector<long> primes;\n    if(n < 2)\n        return primes; \n  \n    // If n is even then it's not prime  \n    if(n % 2 == 0)\n        while(n % 2 == 0)\n            n /= 2; \n  \n    // Now check odd numbers from 3 to sqrt(n)  \n    for(long i = 3; i <= sqrt(n); i += 2) \n        if(is_prime(i)) \n            primes.push_back(i); \n  \n    // If n is a prime number greater than 2  \n    if(is_prime(n)) \n        primes.push_back(n); \n  \n    return primes; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply((148), (412))\n// (16)\n// >>> multiply((19), (28))\n// (72)\n// >>> multiply((2020), (1851))\n// (0)\n// >>> multiply((14), (-15))\n// (20)\nlong multiply(long a, long b) { \n    // If both numbers are zero, return 0\n    if(a == 0 || b == 0) \n        return 0; \n  \n    // Return the remainder when a*b is divided by 1000000007\n    return ((a % 1000000007 * b % 1000000007) % 1000000007); "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper((\"aBCdEf\"))\n// (1)\n// >>> count_upper((\"abcdefg\"))\n// (0)\n// >>> count_upper((\"dBBE\"))\n// (0)\nlong count_upper(std::string s) { \n    long res = 0;\n    for(int i = 0; i < s.size(); ++i){\n        if((s[i] >= 'A' && s[i] <= 'Z') || \n           (s[i] >= 'a' && s[i] <= 'z')) {\n            res++;\n        }\n    }\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong closest_integer(std::string value) { \n    long int x = std::stoll(value); \n  \n    // If the number is negative, we need to find the nearest positive\n    // integer  \n    if(x < 0) \n        x = -x; \n  \n    // If the number is positive, we need to find the nearest negative\n    // integer  \n    if(x > 0) \n        x = -x; \n  \n    // Check if the number is equal to its rounded version\n    if(abs(x - floor(x)) == abs(x - ceil(x))) \n        return x; \n  \n    // Return the rounded version of the number\n    return floor(x); "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a vector, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile((3))\n// (std::vector<long>({(long)3, (long)5, (long)7}))\nstd::vector<long> make_a_pile(long n) { \n    std::vector<long> result;\n    // If n is odd, add n-1 stones to the pile\n    if(n % 2 == 1){\n        result.push_back(n-1);\n    } else {\n        // If n is even, add n/2 stones to the pile\n        result.push_back(n/2);\n    }\n    return result; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return a vector of the words.\n// For example:\n// >>> words_string((\"Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n// >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string s) { \n    std::istringstream iss(s); \n    std::vector<std::string> res; \n  \n    // Read each word from the input string \n    while (iss >> std::ws && iss >> std::ws) \n        res.push_back(std::move(std::string())); \n  \n    return res; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n// >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) { \n    // Base Case: if x is greater than y, return -1\n    if(x > y){\n        return -1;\n    }\n    \n    // If x is even, return its value\n    if(x % 2 == 0){\n        return x;\n    }\n\n    // If x is odd, find the largest even number less than or equal to x\n    else{\n        int i = 0;\n        while(i < y && x >= 2 * i + 1){\n            i++;\n        }\n        return x - (i - 1);\n    }"], ["#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>> rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n// >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long n, long m) {    \n    if(n > m)\n        return -1;\n    int count = 0;\n    for(int i=n;i<=m;i++)\n        count += i;\n    int avg = count / (m-n+1);\n    return String_to_binary(avg);"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long> unique_digits(std::vector<long> x) { \n    std::unordered_set<long> s; \n  \n    // Iterate through the given array\n    for(long i = 0; i < x.size(); i++) { \n        long temp = x[i]; \n  \n        // If the number is not divisible by 2 then add it to set \n        if(temp % 2 != 0) \n            s.insert(temp); \n  \n    } \n  \n    // Return the result \n    return s; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting vector, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n// (std::vector<std::string>())\n// If the vector has any strange number ignore it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n// (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string> by_length(std::vector<long> arr) { \n    std::vector<std::string> result;\n    for(long i = 0; i < arr.size(); ++i)\n        if(arr[i] >= 1 && arr[i] <= 9){\n            result.push_back(std::to_string(arr[i]));\n        }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Implement the function f that takes n as a parameter,\n// and returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f((5))\n// (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15}))\nstd::vector<long> f(long n) { \n    std::vector<long> result(n); \n  \n    // Base case for n=0  \n    if (n == 0) return result; \n  \n    // If n is odd, calculate factorial using loop  \n    if (n % 2 != 0) { \n        for (int i = 1; i <= n; i++) \n            result[i - 1] = i * fact(i); \n    } \n  \n    // If n is even, calculate factorial using formula  \n    else { \n        for (int i = 1; i <= n; i++) \n            result[i - 1] = i * fact(i + 1); \n    } \n  \n    return result; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome((3))\n// (std::make_tuple(1, 2))\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome((12))\n// (std::make_tuple(4, 6))\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nstd::tuple<long, long> even_odd_palindrome(long n) { \n    // Your code here\n    if(n == 1)\n        return std::make_tuple(1, 0);\n    \n    long even_count = 0;\n    long odd_count = 0;\n    for(long i=2; i<=n; i++) {\n        if(isPalindrome(i)) {\n            if(i % 2 == 0)\n                even_count++;\n            else\n                odd_count++;\n        }\n    }\n    return std::make_tuple(even_count, odd_count);"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums which takes a vector of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1, (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1, (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) { \n    long ans = 0;\n    for(long i=0; i<arr.size(); i++) {\n        if(arr[i] < 0 && (i == 0 || arr[i-1] != 0)) {\n            // If the current element is negative and the previous one is not zero,\n            // it means that the sum of digits is greater than 0.\n            ans++;\n        } else if(arr[i] >= 0 && (i == 0 || arr[i-1] == 0)) {\n            // If the current element is positive and the previous one is zero,\n            // it means that the sum of digits is less than or equal to 0.\n            ans++;\n        }\n    }\n    return ans;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the vector will be randomly ordered. Your task is to determine if\n// it is possible to get a vector sorted in non-decreasing order by performing \n// the following operation on the given vector:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the vector by one\n// position in the right direction. The last element of the vector will be moved to\n// the starting position in the vector i.e. 0th index. \n// If it is possible to obtain the sorted vector by performing the above operation\n// then return true else return false.\n// If the given vector is empty then return true.\n// Note: The given vector is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2})))\n// (true)\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given vector.\n// >>> move_one_ball((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2})))\n// (false)\n// Explanation:It is not possible to get non-decreasing order for the given\n// vector by performing any number of right shift operations.\nbool move_one_ball(std::vector<long> arr) { \n    // Check if the array is empty \n    if(arr.size() == 0) \n        return true; \n  \n    // Find the first element which is less than its next element \n    long prev = -1;\n    for(long i=1;i<arr.size();i++) \n        if(arr[i] < arr[i-1]) \n            prev = i-1; \n  \n    // If no such element exists, return false \n    if(prev == -1) \n        return false; \n  \n    // Shift all elements from the beginning till the previous \n    // element and then shift the remaining elements \n    for(long j=prev;j<arr.size()-1;j++) \n        arr[j+1] = arr[j]; \n  \n    // Shift the remaining elements back \n    for(long j=arr.size()-1;j>prev;j--) \n        arr[j] = arr[j-1]; \n  \n    return true; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// In this problem, you will implement a function that takes two vectors of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a vector of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (\"YES\")\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4})))\n// (\"NO\")\n// It is assumed that the input vectors will be non-empty.\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) { \n    // Your code here\n    if(lst1.size() != lst2.size())\n        return \"NO\";\n    \n    bool flag = true;\n    for(int i=0; i < lst1.size(); i++)\n    {\n        if(lst1[i] % 2)\n            continue;\n        \n        if(flag && lst2[i] % 2)\n            return \"NO\";\n        else\n        {\n            if(lst1[i] > lst2[i])\n                swap(lst1[i], lst2[i]);\n            else\n                break;\n        }\n    }\n    return \"YES\";"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n// >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long> histogram(std::string test) { \n    std::map<std::string,long> result;\n    if(test.empty()) {\n        return result;\n    }\n    \n    std::istringstream iss(test);\n    std::string word;\n    while(iss >> word) {\n        int count = 0;\n        for(int i=0; i<word.length(); i++) {\n            if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n                count++;\n            } else {\n                break;\n            }\n        }\n        result[word]++;\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a tuple containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete((\"abcde\"), (\"ae\"))\n// (std::make_tuple(\"bcd\", false))\n// >>> reverse_delete((\"abcdef\"), (\"b\"))\n// (std::make_tuple(\"acdef\", false))\n// >>> reverse_delete((\"abcdedcba\"), (\"ab\"))\n// (std::make_tuple(\"cdedc\", true))\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) { \n    // Your code here\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(c.find(s[i]) == -1)\n            res += s[i];\n    }\n    return std::make_tuple(res, res.empty());"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of strings, where each string consists of only digits, return a vector.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count((std::vector<std::string>({(std::string)\"1234567\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}))\n// >>> odd_count((std::vector<std::string>({(std::string)\"3\", (std::string)\"11111111\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (std::string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"}))\nstd::vector<std::string> odd_count(std::vector<std::string> lst) { \n    std::vector<int> count;\n    \n    for(int i = 0; i < lst.size(); i++) {\n        int cnt = 0;\n        for(char c : lst[i]) {\n            if(c == '1' || c == '3' || c == '5' || c == '7') {\n                cnt++;\n            }\n        }\n        count.push_back(cnt);\n    }\n\n    std::vector<std::string> res;\n    for(int i = 0; i < count.size(); i++) {\n        res.push_back(std::to_string(count[i]));\n    }\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n// >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1, (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums) { \n    long min_sum = LONG_MAX; \n    for(int i=0;i<nums.size();i++) {\n        if(nums[i] < 0) \n            continue;\n        else {\n            long current_sum = 0;\n            for(int j=i;j<nums.size();j++) {\n                current_sum += nums[j];\n                if(current_sum < min_sum) \n                    min_sum = current_sum;\n            }\n        }\n    }\n    return min_sum;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) { \n    int rows = grid.size();\n    int cols = grid[0].size();\n\n    // Initialize the count array with 0s\n    std::vector<int> count(cols);\n    \n    // Iterate through each row\n    for(int i=0; i<rows; i++){\n        // Iterate through each column\n        for(int j=0; j<cols; j++){\n            // If there's enough water in the current cell\n            if(grid[i][j] == 1){\n                // Check if we can fill the current cell\n                if(count[j] < capacity){\n                    // Fill the current cell\n                    count[j]++;\n                }\n            } else {\n                // Reset the count for the current cell\n                count[j] = 0;\n            }\n        }\n    }\n\n    // Return the count of cells filled\n    return count[0];"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to sort a vector of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6, (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long> arr) { \n    std::sort(arr.begin(), arr.end()); \n    return arr; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a vector of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty vector.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\nstd::vector<std::string> select_words(std::string s, long n) { \n    std::vector<std::string> result;\n    if(s.empty()) {\n        return result;\n    }\n    \n    // Iterate through each character in the string\n    for(int i = 0; i < s.size(); ++i) {\n        char c = s[i];\n        \n        // Check if the current character is a consonant\n        if(isalpha(c) && !islower(c)) {\n            int count = 0;\n            \n            // Count the consonants in the current word\n            while(i + count * 2 < s.size() && isalpha(s[i + count * 2])) {\n                count++;\n            }\n            \n            // Add the word to the result vector\n            if(count >= n) {\n                result.push_back(s.substr(i - count * 2, count * 2));\n            }\n        }\n    }\n    \n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n// (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string get_closest_vowel(std::string word) { \n    // Your code here\n    std::vector<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n    int n = word.size();\n    \n    for(int i=n-2; i>=0; i--) {\n        char c = word[i];\n        \n        if(vowels.find(c) != std::string::npos && i+1 < n && \n           vowels.find(word[i+1]) == std::string::npos)\n            return word.substr(i, 2);\n    }\n    \n    return \"\";"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\", (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\")\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string> lst) { \n    std::string res = \"\";\n    for(auto s : lst){\n        if(s == \"(\")\n            res += \" \";\n        else if(res.size() > 0 && res.back() == \")\"){\n            res.pop_back();\n        }\n        else{\n            res += s;\n        }\n    }\n    return res.empty() ? \"No\" : \"Yes\";"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers and a positive integer k, return a sorted vector \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n// Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n// Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n// 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) { \n    std::sort(arr.begin(), arr.end()); \n  \n    // Return first k elements\n    if(k > arr.size()) \n        return arr; \n  \n    // Return first k elements from the end\n    else \n        return arr[arr.size() - k]; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution((std::vector<long>({(long)5, (long)8, (long)7, (long)1})))\n// (12)\n// >>> solution((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3})))\n// (9)\n// >>> solution((std::vector<long>({(long)30, (long)13, (long)24, (long)321})))\n// (0)\nlong solution(std::vector<long> lst) { \n    long res = 0;\n    \n    for(int i = 0; i < lst.size(); i++) {\n        if(i % 2 == 0 && lst[i] % 2 != 0) {\n            res += lst[i];\n        }\n    }\n    \n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long> arr, long k) { \n    // Your code here\n    if(k == 0){\n        return 0;\n    }\n    \n    std::sort(arr.begin(), arr.end());\n    long res = 0;\n    int i = 0;\n    while(i < k && i < arr.size()){\n        res += arr[i];\n        i++;\n    }\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned vector sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz((5))\n// (std::vector<long>({(long)1, (long)5}))\nstd::vector<long> get_odd_collatz(long n) {  \n    std::vector<long> res;\n    \n    while(n != 1){\n        // If n is odd, divide it by 2\n        if(n % 2 == 1)\n            res.push_back(n);\n        \n        // If n is even, multiply it by 3 and add 1\n        else\n            res.push_back(3 * n + 1);\n        \n        // Update n to be the new n\n        n = res.back();\n    }\n    \n    // Add the last odd number\n    res.push_back(n);\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n// >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"))\n// (false)\nbool valid_date(std::string date) { \n    // Check if the date string is empty\n    if(date.empty())\n        return false;\n    \n    int year = std::stoi(date.substr(0,4));\n    int month = std::stoi(date.substr(5,2));\n    int day = std::stoi(date.substr(8,2));\n\n    // If the month is out of range, return false\n    if(month < 1 || month > 12)\n        return false;\n\n    // If the day is out of range, return false\n    if(day < 1 || day > 31)\n        return false;\n\n    // If the year is out of range, return false\n    if(year < 1 || year > 9999)\n        return false;\n\n    // If the month is February, check if it's a leap year\n    if(month == 2 && ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)))\n        return true;\n\n    // If the month is February, check if it has at least two days\n    else if(month == 2 && day >= 29)\n        return false;\n\n    // If the month is March, April, June, September, November,\n    // check if it has at least three days\n    else if(month == 3 || month == 4 || month == 6 || month == 9 || month == 11)\n        return true;\n\n    // If the month is May, June, September, October, December,\n    // check if it has at least four days\n    else if(month == 5 || month == 6 || month == 9 || month == 11)\n        return true;\n\n    // If the month is January, February, April, July, August,\n    // check if it has at least five days\n    else if(month == 1 || month == 4 || month == 7 || month == 8 || month == 10)\n        return true;\n\n    // If the month is December, check if it has at least six days\n    else if(month == 12)\n        return true;\n\n    // If the month is January, February, April, July, August,\n    // check if it has at least seven days\n    else if(month == 1 || month == 4 || month == 7 || month == 8 || month == 10)\n        return true;\n\n    // If the month is December, check if it has at least eight days\n    else if(month == 12)\n        return true;\n\n    // If the month is January, February, April, July, August,\n    // check if it has at least nine days\n    else if(month == 1 || month == 4 || month == 7 || month == 8 || month == 10)\n        return true;\n\n    // If the month is December, check if it has at least ten days\n    else if(month == 12)\n        return true;\n\n    // If the month is January, February, April, July, August,\n    // check if it has at least eleven days\n    else if(month == 1 || month == 4 || month == 7 || month == 8 || month == 10)\n        return true;\n\n    // If the month is December, check if it has at least twelve days\n    else if(month == 12)\n        return true;\n\n   "], ["#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string> f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Given a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string txt) { \n    std::vector<std::string> res;\n    std::istringstream iss(txt);\n    char c;\n    while(getline(iss,c,' ')) res.push_back(c);\n    // std::cout << \"split_words(\" + txt + \") -> \" << res.size() << std::endl;\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long> lst) { \n    if(lst.size() < 2) \n        return true; \n  \n    for(int i = 0; i < lst.size() - 1; i++) \n        if(lst[i] > lst[i + 1]) \n            return false; \n  \n    return true; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection((std::make_tuple(1, 2)), (std::make_tuple(2, 3)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-1, 1)), (std::make_tuple(0, 4)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5)))\n// (\"YES\")\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) { \n    // Your code here\n    if(interval1.first > interval2.second || interval2.first > interval1.second){\n        return \"NO\";\n    }\n    long min = std::min(interval1.first, interval2.first);\n    long max = std::max(interval1.second, interval2.second);\n\n    for(long i = min; i <= max; i++){\n        if(i % 2 == 0 && i != 2){\n            continue;\n        } else if(i % 3 == 0 && i != 3){\n            continue;\n        } else if(i % 5 == 0 && i != 5){\n            continue;\n        } else {\n            cout << i << \"\\n\";\n        }\n    }\n\n    return \"NO\";"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0, (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\nstd::optional<long> prod_signs(std::vector<long> arr) { \n    if(arr.size() == 0)\n        return std::nullopt;\n    \n    long sum = 0; // Initialize sum\n    \n    // Iterate through the array\n    for(long i=0; i<arr.size(); i++) {\n        // If current element is positive\n        if(arr[i] > 0) {\n            sum += arr[i];\n        } else if(arr[i] < 0) {\n            // If current element is negative\n            sum -= arr[i];\n        }\n    }\n    \n    // Return the result\n    return sum;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered vectors of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered vector of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3))\n// (std::vector<long>({(long)1, (long)2, (long)1}))\n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1))\n// (std::vector<long>({(long)1}))\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) { \n    std::vector<long> res;\n    // Initialize the first row of the result array\n    for(long i = 0; i < k; ++i){\n        res.push_back(grid[0][i]);\n    }\n    // Iterate over the rest of the rows\n    for(long i = 1; i < grid.size(); ++i){\n        // Iterate over the columns\n        for(long j = 0; j < grid[i].size(); ++j){\n            // If the current cell has already been visited, skip it\n            if(res[j] != grid[i][j]){\n                continue;\n            }\n            // Find the next cell in the path\n            long nextCellIndex = j + 1;\n            while(nextCellIndex < grid[i].size() && res[nextCellIndex] == grid[i][nextCellIndex]){\n                nextCellIndex++;\n            }\n            // Update the result array\n            res[j] = grid[i][nextCellIndex];\n        }\n    }\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))\nstd::vector<long> tri(long n) { \n    std::vector<long> res;\n    \n    // Base cases\n    if (n == 0) {\n        res.push_back(0);\n        return res;\n    }\n    else if (n == 1 || n == 2) {\n        res.push_back(0);\n        res.push_back(1);\n        res.push_back(3);\n        return res;\n    }\n\n    long prev2 = 0, prev1 = 1, curr = 3;\n\n    for (int i = 3; i <= n; ++i) {\n        curr = prev2 + prev1 + 3 * prev1;\n        prev2 = prev1;\n        prev1 = curr;\n    }\n\n    res.push_back(curr);\n\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits((1))\n// (1)\n// >>> digits((4))\n// (0)\n// >>> digits((235))\n// (15)\nlong digits(long n) { \n    long res = 0; \n    while(n > 0) {\n        int digit = n % 10;\n        if(digit % 2 != 0) {\n            res *= digit;\n        }\n        n /= 10;\n    } \n    return res; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested((\"[[]]\"))\n// (true)\n// >>> is_nested((\"[]]]]]]][[[[[]\"))\n// (false)\n// >>> is_nested((\"[][]\"))\n// (false)\n// >>> is_nested((\"[]\"))\n// (false)\n// >>> is_nested((\"[[][]]\"))\n// (true)\n// >>> is_nested((\"[[]][[\"))\n// (true)\nbool is_nested(std::string string) { \n    int open = 0;\n    for(int i=0; i<string.size(); i++) {\n        if(string[i] == '[') open++;\n        else if(string[i] == ']') open--;\n        if(open < 0) return false;\n    }\n    return open == 0;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of numbers.\n// You need to return the sum of squared numbers in the given vector,\n// round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n// >>> lst((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})))\n// (14)\n// >>> lst((std::vector<float>({(float)1.0f, (float)4.0f, (float)9.0f})))\n// (98)\n// >>> lst((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\n// (84)\n// >>> lst((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f})))\n// (29)\n// >>> lst((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f})))\n// (6)\nlong sum_squares(std::vector<float> lst) { \n    long sum = 0;\n    for(auto x : lst){\n        float abs_x = std::abs(x);\n        sum += abs_x * abs_x;\n    }\n    return sum;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter((\"apple pie\"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"apple pi e\"))\n// (true)\n// >>> check_if_last_char_is_a_letter((\"apple pi e \"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"\"))\n// (false)\nbool check_if_last_char_is_a_letter(std::string txt) { \n    // Check if the last char is a letter\n    return !txt.empty() && std::isalpha(txt.back()); "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n// (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n// (-1)\nlong can_arrange(std::vector<long> arr) { \n    // Initialize result and current index \n    long res = -1; \n    int curr_index = 0; \n  \n    // Traverse through the array \n    for(int i=1; i<arr.size(); i++) { \n  \n        // Check if the current element is greater than \n        // its previous element \n        if(arr[i] > arr[curr_index]) { \n            // Update result \n            res = i; \n            curr_index = i; \n        } \n  \n    } \n  \n    // Return the result \n    return res; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a vector.\n// If there is no negative or positive integers, return them as None.\n// Examples:\n// >>> largest_smallest_integers((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1))\n// >>> largest_smallest_integers((std::vector<long>()))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\n// >>> largest_smallest_integers((std::vector<long>({(long)0})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) { \n    if(lst.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    \n    long max = *std::max_element(begin(lst), end(lst));\n    long min = *std::min_element(begin(lst), end(lst));\n\n    return std::make_tuple(max, min);"], ["#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float_std_string{\n    long f0;\n    float f1;\n    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n    ~Union_long_float_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n};\nunion Union_long_float_std_string_std_nullopt{\n    long f0;\n    float f1;\n    std::string f2;\n    std::nullopt f3;    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}\n    ~Union_long_float_std_string_std_nullopt() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }    bool operator==(std::nullopt f) {\n        return f3 == f ;\n    }\n};\n// Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return None if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5f)\n// 2.5f\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// std::nullopt\nUnion_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) { \n    if (a.f0 > b.f0) return a;\n    else if (b.f0 > a.f0) return b;\n    else if (a.f1 > b.f1) return a;\n    else if (b.f1 > a.f1) return b;\n    else if (a.f2 > b.f2) return a;\n    else if (b.f2 > a.f2) return b;\n    else if (a.f3 > b.f3) return a;\n    else if (b.f3 > a.f3) return b;\n    else return nullptr;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even((4))\n// (false)\n// >>> is_equal_to_sum_even((6))\n// (false)\n// >>> is_equal_to_sum_even((8))\n// (true)\nbool is_equal_to_sum_even(long n) { \n    // If n is odd, it cannot be expressed as a sum of 4 even numbers.\n    if(n % 2 != 0) return false;\n    \n    // The smallest possible sum of four even numbers is 2*2+2*2+2*2+2*2 = 16\n    long min_sum = 16;\n\n    // Check all possible combinations of four even numbers less than or equal to n\n    for(int i=2; i<=n/2; i+=2){\n        long current_sum = 2*i + 2*(i-1)+2*(i-2)+2*(i-3);\n        if(current_sum > n) break;\n        else if(current_sum == n) return true;\n    }\n\n    return false;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nlong special_factorial(long n) { \n    long result = 1; \n    for(int i=1; i<=n; i++) {\n        result *= i;\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\" Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\")\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\" Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text) {  \n    std::stringstream ss(text);  \n    std::string str;  \n    while (ss >> str)  \n        return str;  \n  \n    // If the number of spaces is less than or equal to 2\n    if(str.size() <= 2)\n        return str;\n    \n    int count = 0;  \n    for(int i=0;i<str.size();i++)\n    {\n        if(str[i] == ' ')\n            count++;\n        else if(count > 2)\n        {\n            str.erase(i,count);\n            str.insert(i,'_');\n            count = 0;\n        }\n    }\n    return str;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string file_name_check(std::string file_name) { \n    // Your code here\n    int count = 0;\n    for (int i = 0; i < file_name.size(); i++) {\n        if ((file_name[i] >= '0' && file_name[i] <= '9')) {\n            count++;\n        }\n    }\n\n    if (count > 3 || file_name.find('.') == std::string::npos) {\n        return \"No\";\n    } else if (file_name.find_first_of(\".txt\") != std::string::npos) {\n        return \"Yes\";\n    } else if (file_name.find_first_of(\".exe\") != std::string::npos) {\n        return \"Yes\";\n    } else if (file_name.find_first_of(\".dll\") != std::string::npos) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// \"\n// This function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// (long({(long)1, (long)2, (long)3}))\n// >>> lst\n// (long())\n// >>> lst\n// (long({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))\nlong sum_squares(std::vector<long> lst) { \n    long sum = 0; \n  \n    for (int i = 0; i < lst.size(); i++) { \n        if ((i % 3 == 0 || i % 4 == 0)) \n            // If the index is a multiple of 3 or 4, \n            // then we'll calculate its square \n            sum += pow(lst[i], 2); \n  \n        else \n            // Otherwise, we'll calculate its cube \n            sum += pow(lst[i], 3); \n  \n    } \n  \n    return sum; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string words_in_sentence(std::string sentence) { \n    std::vector<std::string> words;\n    \n    // Splitting the sentence into words\n    std::istringstream iss(sentence);\n    while (iss >> word)\n        words.push_back(word);\n\n    // Sorting the words based on their length\n    std::sort(words.begin(), words.end());\n\n    // Converting the sorted list back to string\n    std::ostringstream oss;\n    for (const auto &word : words)\n        oss << word << \" \";\n    return oss.str();"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify((\"1/5\"), (\"5/1\"))\n// (true)\n// >>> simplify((\"1/6\"), (\"2/1\"))\n// (false)\n// >>> simplify((\"7/10\"), (\"10/2\"))\n// (false)\nbool simplify(std::string x, std::string n) { \n    int num = 0, den = 1; \n    // Convert the string into integer values\n    for(int i=0; i<x.size(); i++) {\n        if(x[i] == '/') {\n            den *= 10;\n            num += 1;\n        } else if(x[i] != ' ') {\n            num *= 10;\n            num += x[i] - '0';\n        }\n    }\n\n    // If the denominator is 1, then it's already simplified\n    if(den == 1) return true;\n\n    // Calculate the value of x*n\n    long long val = (long long)n * num / den;\n\n    // Check if the result is an integer\n    return val % den == 0;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which sorts the given vector of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original vector.\n// For example:\n// >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> order_by_points(std::vector<long> nums) { \n    std::sort(nums.begin(), nums.end()); \n  \n    // The first element is always sorted \n    return nums; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector of numbers as input and returns \n// the number of elements in the vector that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long> nums) { \n    long count = 0;\n    for(long i=0; i<nums.size(); i++) {\n        if(nums[i] > 10 && isOddFirstLastDigit(nums[i])) {\n            count++;\n        }\n    }\n    return count;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive integer n. You have to create an integer vector a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long n) { \n    // Your code here\n    long ans = 0;\n    for(int i=1; i<=n/3; i++) {\n        int x = i*i- i+1;\n        if(x%3 == 0) {\n            ans++;\n        }\n    }\n    return ans;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a tuple containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty tuple if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1, std::string planet2) { \n    // Your code here\n    std::vector<std::string> result;\n    for(int i = 0; i < 8; i++) {\n        if((planet1 == \"Mercury\") && (planet2 == \"Venus\")) continue;\n        if((planet1 == \"Venus\") && (planet2 == \"Mercury\")) continue;\n        if((planet1 == \"Earth\") && (planet2 == \"Mars\")) continue;\n        if((planet1 == \"Mars\") && (planet2 == \"Earth\")) continue;\n        if((planet1 == \"Jupiter\") && (planet2 == \"Saturn\")) continue;\n        if((planet1 == \"Saturn\") && (planet2 == \"Jupiter\")) continue;\n        if((planet1 == \"Uranus\") && (planet2 == \"Neptune\")) continue;\n        if((planet1 == \"Neptune\") && (planet2 == \"Uranus\")) continue;\n\n        if(is_valid(planet1, planet2)) {\n            result.push_back(planet1);\n            result.push_back(planet2);\n        }\n    }\n\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted vector with a sorted order,\n// The vector is always a vector of strings and never a vector of numbers,\n// and it may contain duplicates.\n// The order of the vector should be ascending by length of each word, and you\n// should return the vector sorted by that rule.\n// If two words have the same length, sort the vector alphabetically.\n// The function should return a vector of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) { \n    std::sort(lst.begin(), lst.end()); \n    return lst; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y((7), (34), (12))\n// (34)\n// >>> x_or_y((15), (8), (5))\n// (5)\nlong x_or_y(long n, long x, long y) { \n    // If n is a prime number\n    if (n > 1) {\n        for (int i = 2; i <= sqrt(n); i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    } else {\n        return y;\n    }"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1, (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1, (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9, (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n// (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) { \n    long double result = 0; \n  \n    // Iterate through each element in the list \n    for(int i=0; i < lst.size(); i++) { \n        if(lst[i] % 2 != 0) { \n            result += pow(lst[i], 2); \n        } \n    } \n  \n    return result; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0, (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4, (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4, (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {  \n    std::vector<long> res;\n    for(int i = 0; i < game.size(); ++i)\n        res.push_back(abs(game[i] - guess[i]));\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the name of a class (a string) and a vector of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the vector.\n// For example, if you are given \"Slices\" as the class and a vector of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) { \n    int cap = 0;\n    for (const auto& extension : extensions)\n        if (is_uppercase(extension[0]))\n            ++cap;\n    \n    int sm = 0;\n    for (const auto& extension : extensions)\n        if (!is_uppercase(extension[0])) \n            ++sm;\n\n    // Find the strongest extension\n    for (const auto& extension : extensions)\n        if (extension.size() == sm && extension.size() != cap)\n            continue;\n        else if (extension.size() > sm)\n            return extension;\n    return \"\";"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check((\"abcd\"), (\"abd\"))\n// (false)\n// >>> cycpattern_check((\"hello\"), (\"ell\"))\n// (true)\n// >>> cycpattern_check((\"whassup\"), (\"psus\"))\n// (false)\n// >>> cycpattern_check((\"abab\"), (\"baa\"))\n// (true)\n// >>> cycpattern_check((\"efef\"), (\"eeff\"))\n// (false)\n// >>> cycpattern_check((\"himenss\"), (\"simen\"))\n// (true)\nbool cycpattern_check(std::string a, std::string b) { \n    int n = a.size();\n    int m = b.size();\n\n    // If length of both strings is not equal then it can't be a pattern\n    if(n != m){\n        return false;\n    }\n\n    // Check for all possible rotations of string b\n    for(int i=0; i<=m-n; i++){\n        // Check if string a[i:i+n] is a substring of string b\n        if(a.substr(i,n) == b){\n            return true;\n        }\n    }\n    return false;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count((-12))\n// (std::make_tuple(1, 1))\n// >>> even_odd_count((123))\n// (std::make_tuple(1, 2))\nstd::tuple<long, long> even_odd_count(long num) { \n    long count_even = 0;\n    long count_odd = 0;\n\n    while(num > 0){\n        if(num % 2 == 0)\n            count_even++;\n        else\n            count_odd++;\n\n        num /= 10;\n    }\n\n    return std::make_tuple(count_even, count_odd);"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman((19))\n// (\"xix\")\n// >>> int_to_mini_roman((152))\n// (\"clii\")\n// >>> int_to_mini_roman((426))\n// (\"cdxxvi\")\nstd::string int_to_mini_roman(long number) { \n    std::map<long, char> map = {\n        {1000, 'm'}, {900, 'cm'}, {500, 'd'}, {400, 'cd'},\n        {100, 'c'}, {90, 'xc'}, {50, 'l'}, {40, 'xl'},\n        {10, 'x'}, {9, 'ix'}, {5, 'v'}, {4, 'iv'}, {1, 'i'}\n    };\n    \n    std::stringstream ss;\n    ss << map[number];\n    return ss.str();"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3), (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\nbool right_angle_triangle(long a, long b, long c) { \n    // Check for the given sides to be valid\n    if(a + b <= c || a + c <= b || b + c <= a) \n        return false; \n  \n    // Calculate the square of each side\n    long s = (a*a + b*b + c*c); \n  \n    // If the sum of squares of two sides equals the square of third side,\n    // then it is a right angled triangle\n    return (s == (a*a + b*b));"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings.\n// The vector contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string find_max(std::vector<std::string> words) { \n    std::map<std::string, int> m;\n    \n    // Counting the frequency of each character in the words\n    for(auto w : words)\n        for(char c : w)\n            ++m[c];\n    \n    // Finding the word with maximum frequency\n    auto it = m.rbegin();\n    if(it->second == 1)\n        return (*it).first;\n    else\n        return (*it).first.substr((*it).second - 1);"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a vector of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat((5), (6), (10))\n// (std::vector<long>({(long)11, (long)4}))\n// >>> eat((4), (8), (9))\n// (std::vector<long>({(long)12, (long)1}))\n// >>> eat((1), (10), (10))\n// (std::vector<long>({(long)11, (long)0}))\n// >>> eat((2), (11), (5))\n// (std::vector<long>({(long)7, (long)0}))\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nstd::vector<long> eat(long number, long need, long remaining) { \n    std::vector<long> result;\n    while(number >= need){\n        result.push_back(number);\n        number -= need;\n    }\n    if(number > 0 && remaining > 0){\n        result.push_back(number + remaining);\n        remaining = 0;\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n// the second vector is a vector of integers. Use the two given vectors to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to the length of operand vector minus one.\n// Operand is a vector of of non-negative integers.\n// Operator vector has at least one operator, and operand vector has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand) { \n    long res = 0; \n    for(int i=1; i<op.size(); i++) {\n        if(op[i] == \"+\") {\n            res += operand[i-1];\n        } else if(op[i] == \"-\") {\n            res -= operand[i-1];\n        } else if(op[i] == \"*\") {\n            res *= operand[i-1];\n        } else if(op[i] == \"//\") {\n            res /= operand[i-1];\n        } else if(op[i] == \"**\") {\n            res = pow(res, operand[i-1]);\n        }\n    }\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) { \n    std::string res;\n    for (int i = 0; i < s.size(); ++i)\n        if (isalpha(s[i]))\n            res += char((s[i] - 'a' + 26) % 26 + 'a');\n        else\n            res += s[i];\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5((\"Hello world\"))\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nstd::optional<std::string> string_to_md5(std::string text) { \n    if (text.empty()) {\n        return std::nullopt;\n    }\n    \n    // Create MD5 hash object\n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5_CTX context;\n    MD5_Init(&context);\n    MD5_Update(&context, text.c_str(), text.size());\n    MD5_Final(digest, &context);\n\n    // Convert the hash to hexadecimal format and remove the prefix\n    char hex_string[2 * MD5_DIGEST_LENGTH + 1];\n    for (int i = 0; i < MD5_DIGEST_LENGTH; i++)\n        sprintf(hex_string+i+1, \"%02x\", (unsigned int)digest[i]);\n    return std::string(hex_string);"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers((2), (8))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((8), (2))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((10), (14))\n// (std::vector<long>())\nstd::vector<long> generate_integers(long a, long b) { \n    std::vector<long> result;\n    for(long i = a; i <= b; ++i)\n        if(i % 2 == 0)\n            result.push_back(i);\n    return result;"]]
