[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string, char):\n    first_occurrence = string.find(char)\n    last_occurrence = string.rfind(char)\n    if first_occurrence == -1:\n        return string\n    else:\n        return string[:first_occurrence] + string[last_occurrence+1:]\n\n# Test\nstring = \"hello\"\nchar = \"l\""], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    \"\"\"\n    Sort a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list of list): A matrix of integers.\n\n    Returns:\n        list of list: A sorted matrix.\n    \"\"\"\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix according to the sum of its rows\n    sorted_matrix = sorted(matrix, key=lambda x: x[0][0] + x[0][1] + x[0][2])\n\n    # Return the sorted matrix\n    return sorted_matrix\n\n# Example usage:\nmatrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\nsorted_matrix = sort_matrix(matrix)"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    \"\"\"\n    Count the most common words in a dictionary.\n\n    Args:\n    words (list): A list of words.\n\n    Returns:\n    list: A list of tuples, each tuple contains a word and its count.\n    \"\"\"\n    # Create a dictionary to store the count of each word\n    count_dict = {}\n    # Iterate through the words\n    for word in words:\n        # If the word is already in the dictionary, increment its count\n        if word in count_dict:\n            count_dict[word] += 1\n        # If the word is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[word] = 1\n    # Sort the dictionary by its values in descending order\n    sorted_dict = sorted(count_dict.items(), key=lambda x: x[1], reverse=True)\n    # Return the list of tuples\n    return sorted_dict\n\n# Example usage\nwords = ['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(base, height, side):\n    return base * height * side / 2\n\n# Example usage"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(string):\n    \"\"\"\n    Split a string at lowercase letters.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of strings, each containing a lowercase letter.\n    \"\"\"\n    return [char for char in string if char.islower()]\n\n# Example usage:"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef find_lowercase_underscore(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input string.\n\n    Returns:\n        str: The longest sequence of lowercase letters joined with an underscore.\n    \"\"\"\n    # Initialize the longest sequence\n    longest_sequence = \"\"\n    # Initialize the current sequence\n    current_sequence = \"\"\n    # Iterate through the characters in the string\n    for char in text:\n        # If the character is a lowercase letter\n        if char.islower():\n            # Append the character to the current sequence\n            current_sequence += char\n        # If the current sequence is longer than the longest sequence\n        elif len(current_sequence) > len(longest_sequence):\n            # Update the longest sequence\n            longest_sequence = current_sequence\n        # If the current character is not a lowercase letter\n        else:\n            # Reset the current sequence\n            current_sequence = \"\"\n    # Return the longest sequence\n    return longest_sequence\n\n# Example usage\ntext = \"aab_cbbbc\""], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(side_length):\n    return 4*side_length\n\n# Example usage"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(string1, string2):\n    \"\"\"\n    This function removes characters from the first string which are present in the second string.\n    \"\"\"\n    # Create a set of characters from the second string\n    chars_from_second_string = set(string2)\n    # Create a set of characters from the first string\n    chars_from_first_string = set(string1)\n    # Create a set of characters which are common to both strings\n    common_chars = chars_from_first_string & chars_from_second_string\n    # Create a new string with common characters\n    new_string = string1.replace('', '')\n    # Return the new string\n    return new_string\n\n# Example usage\nstring1 = \"probasscurve\"\nstring2 = \"pros\""], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n    \"\"\"\n    This function will return True if the given array contains any duplicate element.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return True\n    return False\n\n# Example usage\narr = [1,2,3,4,5]"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(num):\n    \"\"\"\n    Check if the given number is woodball or not.\n    \"\"\"\n    # Check if the number is divisible by 3\n    if num % 3 == 0:\n        # Check if the number is divisible by 7\n        if num % 7 == 0:\n            # Check if the number is divisible by 2\n            if num % 2 == 0:\n                return True\n    return False\n\n# Test the function"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    return [i for i in range(n, n+m*m, n)]\n\n# Test"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n\n# Test the function\narr = [1, 2, 3, 4, 4, 5]"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(list_of_lists):\n    max_sum = 0\n    for sublist in list_of_lists:\n        for num in sublist:\n            max_sum = max(max_sum, num)\n    return max_sum\n\nlist_of_lists = [[1,2,3],[4,5,6],[10,11,12],[7,8,9]]"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary_num):\n    decimal_num = 0\n    for i in range(len(binary_num)):\n        decimal_num += (binary_num[i] * (2 ** (len(binary_num) - i - 1)))\n    return decimal_num\n\n# Example usage\nbinary_num = \"100\"\ndecimal_num = binary_to_decimal(binary_num)"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, target):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    product = 1\n    for num in count_dict:\n        if count_dict[num] == 1:\n            product *= num\n    if target in count_dict:\n        product *= target\n    return product\n\n# Test\narr = [1,1,2,3]\ntarget = 4"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tuple_list, k):\n    return len(set(tuple_list)) == k\n\n# Example usage\ntuple_list = [(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )]\nk = 4"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove_digits(strings):\n    return [''.join([x for x in s if x.isalpha()]) for s in strings]\n\n# Example usage\nstrings = ['4words', '3letters', '4digits']\nresult = remove_digits(strings)"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(lst, n):\n    count_dict = {}\n    for i in lst:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    odd_count = 0\n    for i in count_dict:\n        if count_dict[i] % 2 != 0:\n            odd_count += 1\n    if odd_count == 0:\n        return None\n    for i in lst:\n        if count_dict[i] % 2 != 0:\n            return i\n\n# Test\nlst = [1,2,3,1,2,3,1]\nn = 7"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == string[i+1]:\n            count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nimport heapq\n\ndef find_most_frequent(lists, k):\n    \"\"\"\n    Find the top k integers that occur most frequently from given lists of sorted and distinct integers.\n    \"\"\"\n    # Initialize a heap\n    heap = []\n    # Iterate through each list\n    for lst in lists:\n        # Iterate through each element in the list\n        for num in lst:\n            # Push the number onto the heap\n            heapq.heappush(heap, num)\n        # Pop the top k elements from the heap\n        for _ in range(k):\n            # Pop the top element from the heap\n            heapq.heappop(heap)\n    # Return the top k elements from the heap\n    return heap\n\n# Example usage\nlists = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]]\nk = 3"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    \"\"\"\n    This function takes a number as input and returns the largest prime factor of that number.\n    \"\"\"\n    # Initialize the largest prime factor\n    largest_prime_factor = 1\n    \n    # Iterate from 2 to the square root of the number\n    for i in range(2, int(n**0.5) + 1):\n        # Check if i is a factor of the number\n        if n % i == 0:\n            # Check if i is a prime factor\n            if is_Prime(i):\n                # Update the largest prime factor\n                largest_prime_factor = max(largest_prime_factor, i)\n            # Check if i is a factor of the number\n            if n % i != 0:\n                # Check if i is a prime factor\n                if is_Prime(i):\n                    # Update the largest prime factor\n                    largest_prime_factor = max(largest_prime_factor, i)\n    # Return the largest prime factor\n    return largest_prime_factor\n\ndef is_Prime(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is a prime number, False otherwise.\n    \"\"\"\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    # Check if the number is 2\n    if n == 2:\n        return True\n    # Check if the number is even\n    if n % 2 == 0:\n        return False\n    # Check odd factors\n    for i in range(3, int(n**0.5) + 1, 2):\n        # Check if i is a factor of the number\n        if n % i == 0:\n            return False\n    # Return True if the number is prime\n    return True\n\n# Example usage"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(num):\n    if num == 0:\n        return '0'\n    elif num == 1:\n        return '1'\n    else:\n        return decimal_To_Binary(num // 2) + str(num % 2)\n\n# Test"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr, n):\n    for i in range(len(arr)):\n        if arr[i] != i:\n            return i\n    return n\n\n# Example usage:\narr = [1,2,3,5]\nn = 4"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n    \"\"\"\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    return n * find_rect_num(n - 1)\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(num1, num2, n):\n    \"\"\"\n    This function finds the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n    # Calculate the decimal part of the fraction\n    decimal_part = num1 / num2\n    # Convert the decimal part to string\n    decimal_str = str(decimal_part)\n    # Get the nth digit\n    nth_digit = int(decimal_str[n-1])\n    return nth_digit\n\n# Example usage\nnum1, num2, n = 1, 2, 1"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(lst):\n    \"\"\"\n    Sort a given mixed list of integers and strings.\n\n    Args:\n    lst (list): A list of integers and strings.\n\n    Returns:\n    list: A sorted list of integers and strings.\n    \"\"\"\n    return sorted(lst, key=lambda x: x.lower())\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(lst):\n    even_nums = [num for num in lst if num % 2 == 0]\n    odd_nums = [num for num in lst if num % 2 != 0]\n    return even_nums[0] / odd_nums[0]\n\n# Test the function"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearrange_string(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count > 1:\n            return False\n    return True\n\n# Test"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\n\ndef freq_element(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns a dictionary \n    containing the frequency of elements in the given list of lists.\n    \"\"\"\n    return Counter(lst)\n\nlst = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr, n):\n    \"\"\"\n    This function takes an array and a number as input and returns the sum of repeated elements.\n    \"\"\"\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return sum(x for x, y in count.items() if y > 1)\n\n# Test\narr = [1,2,3,1,1,4,5,6]\nn = 8"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ndef text_match(text):\n    pattern = r\"a[a-z]+b[a-z]+\"\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"aab_cbbbc\""], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(text, pattern):\n    if text.startswith(pattern):\n        return \"Matched!\"\n    else:\n        return \"Not matched!\"\n\n# Example usage\ntext = \"python is fun\"\npattern = \"python\""], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    \"\"\"\n    Calculate the gcd of the given array elements.\n    \"\"\"\n    # Initialize the gcd with the first element\n    gcd = arr[0]\n    # Iterate through the array\n    for num in arr[1:]:\n        # Update the gcd\n        gcd = gcd * num // gcd\n    # Return the gcd\n    return gcd\n\n# Example usage\narr = [2, 4, 6, 8, 16]"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(nums):\n    \"\"\"\n    This function determines whether all the numbers are different from each other are not.\n    \"\"\"\n    if len(nums) == 0:\n        return True\n    elif len(nums) == 1:\n        return True\n    elif len(nums) == 2:\n        return nums[0] != nums[1]\n    else:\n        for i in range(len(nums) - 1):\n            if nums[i] == nums[i+1]:\n                return False\n        return True\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a, b):\n    # calculate factorial of a and b\n    fact_a = 1\n    for i in range(1, a+1):\n        fact_a *= i\n    fact_b = 1\n    for i in range(1, b+1):\n        fact_b *= i\n    # calculate last digit of factorial of a and b\n    last_digit_a = fact_a % 10\n    last_digit_b = fact_b % 10\n    # check if last digit of factorial of a divides last digit of factorial of b\n    if last_digit_a % last_digit_b == 0:\n        return 1\n    else:\n        return 0\n\n# Example usage"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(num):\n    return num | (1 << (num & 1))\n\n# Test"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef extract_first_element(lst, index):\n    \"\"\"\n    Extract every first element from a given two-dimensional list.\n    \"\"\"\n    return [x[index] for x in lst]\n\ndef extract_specified_element(lst, index, element):\n    \"\"\"\n    Extract every specified element from a given two-dimensional list.\n    \"\"\"\n    return [x[index] for x in lst if x[index] == element]\n\n# Example usage:\nlst = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]\nindex = 0\nelement = 2\n"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(lst):\n    return min(lst, key=len)\n\n# Test"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a, b, c):\n    if a == b == c:\n        return True\n    else:\n        return False\n\n# Test"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\ndef parallelogram_area(base, height):\n    return base * height\n\n# Test"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(string):\n    if string[0] == string[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n# Test the function"], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n    max_val = max(arr)\n    count_arr = [0] * (max_val + 1)\n    for num in arr:\n        count_arr[num] += 1\n    sorted_arr = []\n    for i in range(max_val + 1):\n        sorted_arr.extend([i] * count_arr[i])\n    return sorted_arr\n\n# Example usage\narr = [1,23,4,5,6,7,8]"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(a, r, n):\n    \"\"\"\n    This function returns t-nth term of geometric series.\n    \"\"\"\n    return a * (r**(n-1))\n\n# Example usage\na = 1\nr = 5\nn = 2"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num //= 10\n    return num == 2 * rev - 1\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(nums, n):\n    nums.sort(reverse=True)\n    return int(''.join(map(str, nums)))\n\n# Test\nnums = [1,2,3]\nn = 3"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(x, y):\n    if x * y < 0:\n        return True\n    else:\n        return False\n\n# Test"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    \"\"\"\n    Returns the nth octagonal number.\n    \"\"\"\n    return n * (3 * n - 2)\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, target):\n    \"\"\"\n    This function finds the maximum length of the subsequence with difference between adjacent elements for the given array.\n    \"\"\"\n    max_len = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] - arr[i] == target:\n                max_len = max(max_len, j - i)\n    return max_len\n\n# Example usage:\narr = [2, 5, 6, 3, 7, 6, 5, 8]\ntarget = 8"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(string, n):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if sum(int(x) for x in string[i:j]) == j:\n                count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(lst):\n    \"\"\"\n    This function returns the smallest number in a list.\n    \"\"\"\n    return min(lst)\n\n# Example usage"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(tuple_list):\n    \"\"\"\n    Returns the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if not tuple_list:\n        return 0\n    tuple_list.sort(key=lambda x: x[0])\n    max_diff = 0\n    for i in range(len(tuple_list) - 1):\n        diff = tuple_list[i][1] - tuple_list[i+1][1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n# Example usage:\ntuple_list = [(3, 5), (1, 7), (10, 3), (1, 2)]"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n# Output: [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 95)])\n# Output: [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 95)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 95), ('Geography', 99)])\n# Output: [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 95), ('Geography', 99)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 95), ('Geography', 99), ('Physics', 98)])\n# Output: [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 95), ('Geography', 99), ('Physics', 98)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 95), ('Geography', 99), ('Physics', 98), ('Chemistry', 96)])\n# Output: [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 95), ('Geography', 99), ('Physics', 98), ('Chemistry', 96)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 95), ('Geography', 99), ('Physics', 98), ('Chemistry', 96), ('Biology', 97)])\n# Output: [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 95), ('Geography', 99), ('Physics', 98), ('Chemistry', 96), ('Biology', 97)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 95), ('Geography', 99), ('Physics', 98), ('Chemistry', 96), ('Biology', 97), ('Mathematics', 99)])\n# Output: [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 95), ('Geography', 99), ('Physics', 98), ('Chemistry', 96), ('Biology', 97), ('Mathematics', 99)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 95), ('Geography', 99), ('Physics', 98), ('Chemistry', 96), ('Biology', 97), ('Mathematics', 99), ('Geography',"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(lst):\n    \"\"\"\n    Recursively sum all elements in a list.\n    \"\"\"\n    if not lst:\n        return 0\n    else:\n        return lst[0] + recursive_list_sum(lst[1:])\n\n# Example usage:"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\n# Test\nlst = [1,-2,3,-4]"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * bell_number(n-1) + bell_number(n-2)\n\ndef num_ways_to_partition(n):\n    return bell_number(n)\n\n# Example usage"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    # Check if array is monotonic\n    if arr == sorted(arr):\n        return True\n    else:\n        # Check if array is increasing\n        if arr[0] <= arr[1] and arr[1] <= arr[2] and arr[2] <= arr[3]:\n            return True\n        # Check if array is decreasing\n        elif arr[0] >= arr[1] and arr[1] >= arr[2] and arr[2] >= arr[3]:\n            return True\n        else:\n            return False\n\n# Test"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(list1, list2):\n    if len(list1) > len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            continue\n        else:\n            return False\n    return True\n\nlist1 = [2,4,3,5,7]\nlist2 = [3,7]"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuple_list, length):\n    \"\"\"\n    This function takes a list of tuples and the length of the tuples as arguments.\n    It returns a string indicating whether all the given tuples have equal length or not.\n    \"\"\"\n    if len(tuple_list) != length:\n        return 'All tuples do not have same length'\n    else:\n        return 'All tuples have same length'\n\n# Example usage:"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(arr):\n    # Calculate the gap\n    gap = len(arr)\n    swapped = True\n\n    while gap != 1 or swapped:\n        # Initialize swapped to True\n        swapped = False\n\n        # Calculate the gap\n        gap = gap // 1.3\n        # Iterate through the list\n        for i in range(0, len(arr) - gap):\n            # Check if the elements are equal\n            if arr[i] > arr[i + gap]:\n                # Swap the elements\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                # Set swapped to True\n                swapped = True\n\n    return arr\n\n# Test the function\narr = [5, 15, 37, 25, 79]"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(num):\n    for i in range(1, int(num**0.5) + 1):\n        if num - i*i == 0:\n            return True\n    return False\n\n# Example usage:"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\ndef multiple_split(string):\n    return re.split(r'(\\*|\\s+)', string)\n\n# Example usage:"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, sequence):\n    \"\"\"\n    Check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(patterns) != len(sequence):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] != sequence[i]:\n            return False\n    return True\n\n# Example usage:\npatterns = [\"red\",\"green\",\"green\"]\nsequence = [\"a\", \"b\", \"b\"]"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    \"\"\"\n    Given a list of tuples and a number k,\n    return a string of tuples which have all elements divisible by k.\n    \"\"\"\n    result = []\n    for tup in tuples:\n        if all(x % k == 0 for x in tup):\n            result.append(tup)\n    return str(result)\n\n# Example usage:"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(width, height):\n    \"\"\"\n    This function counts the number of squares in a rectangle.\n    \"\"\"\n    return width * height\n"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return abs(even_sum - odd_sum)\n\n# Test"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    return len(word) % 2 == 0\n\n# Example usage:\nword = \"Hadoop\""], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n# Example usage:"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(tuple1, tuple2):\n    return list(zip(tuple1, tuple2))\n\n# Test\ntuple1 = (7, 8, 4, 5, 9, 10)\ntuple2 = (1, 5, 6)\n"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\nimport math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius**3)\n\n# Test"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(string):\n    char_list = list(string)\n    char_list.sort()\n    return chr(ord(char_list[0]) + ord(char_list[1]) + ord(char_list[2]))\n\n# Test"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)\n"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\nimport math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n    \"\"\"\n    return 4*math.pi*radius**2\n\n# Example usage:\nradius = 10\nsurface_area = surfacearea_sphere(radius)"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n    \"\"\"\n    return (3 * n**2 - n) // 2 + 1\n\n# Example usage:"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}\n\n# Test"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n\n# Test\nlst = [10,10,10,10,20,20,20,20,40,40,50,50,30]"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return -1\n    elif n == 1:\n        return 0\n    else:\n        return n - 1\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    \"\"\"\n    This function returns the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(string_list, substring):\n    for s in string_list:\n        if substring in s:\n            return True\n    return False\n\n# Example usage:\nstring_list = [\"red\", \"black\", \"white\", \"green\", \"orange\"]\nsubstring = \"ack\""], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    \"\"\"\n    Check if the given number is undulating or not.\n    \"\"\"\n    return num == num[::-1]\n\n# Example usage"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)\n\n# Example usage:"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuples):\n    min_index = 0\n    min_value = tuples[0][1]\n    for i, (name, value) in enumerate(tuples):\n        if value < min_value:\n            min_index = i\n            min_value = value\n    return name[0]\n\n# Test"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(arr):\n    \"\"\"\n    This function takes a list of lists as input and returns the minimum length of sublist.\n    \"\"\"\n    min_len = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if j == 0:\n                min_len = j + 1\n            elif arr[i][j] == arr[i][j-1]:\n                min_len += 1\n            else:\n                min_len = 1\n    return min_len\n\n# Test\narr = [[1],[1,2]]"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(list_of_lists):\n    freq_dict = {}\n    for lst in list_of_lists:\n        for item in lst:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n\n# Example usage\nlist_of_lists = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(lst):\n    \"\"\"\n    This function multiplies all the numbers in a list and divides with the length of the list.\n    \"\"\"\n    return sum(lst) / len(lst)\n\n# Test"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n    return binary[::-1]\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified number.\n\n    Args:\n        num (int): The number to find the next smallest palindrome of.\n\n    Returns:\n        int: The next smallest palindrome of the given number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Check if the number is a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, check if the number is a palindrome\n        if num_str == num_str[::-1]:\n            # If it is, return the next smallest palindrome\n            return num + 1\n        # If it is not, return the next smallest palindrome\n        else:\n            # If it is not, check if the number is a palindrome\n            if num_str[0] == num_str[-1]:\n                # If it is, return the next smallest palindrome\n                return int(num_str + num_str[1:-1]) + 1\n            # If it is not, return the next smallest palindrome\n            else:\n                # If it is not, return the next smallest palindrome\n                return int(num_str + num_str[0] + num_str[-1]) + 1\n    # If the number is not a palindrome, check if the number is a palindrome\n    if num_str[0] == num_str[-1]:\n        # If it is, return the next smallest palindrome\n        return int(num_str + num_str[1:-1]) + 1\n    # If it is not, return the next smallest palindrome\n    else:\n        # If it is not, return the next smallest palindrome\n        return int(num_str + num_str[0] + num_str[-1]) + 1\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, start, end):\n    if k < 1 or k > len(arr):\n        return None\n    if k == 1:\n        return arr[start]\n    if k == 2:\n        return arr[start+1]\n    mid = (start + end) // 2\n    if k == mid + 1:\n        return arr[start+1]\n    elif k == mid:\n        return arr[mid]\n    elif k == mid + 2:\n        return arr[mid+1]\n    elif k == mid + 3:\n        return arr[mid+2]\n    elif k == mid + 4:\n        return arr[mid+3]\n    elif k == mid + 5:\n        return arr[mid+4]\n    elif k == mid + 6:\n        return arr[mid+5]\n    elif k == mid + 7:\n        return arr[mid+6]\n    elif k == mid + 8:\n        return arr[mid+7]\n    elif k == mid + 9:\n        return arr[mid+8]\n    elif k == mid + 10:\n        return arr[mid+9]\n    elif k == mid + 11:\n        return arr[mid+10]\n    elif k == mid + 12:\n        return arr[mid+11]\n    elif k == mid + 13:\n        return arr[mid+12]\n    elif k == mid + 14:\n        return arr[mid+13]\n    elif k == mid + 15:\n        return arr[mid+14]\n    elif k == mid + 16:\n        return arr[mid+15]\n    elif k == mid + 17:\n        return arr[mid+16]\n    elif k == mid + 18:\n        return arr[mid+17]\n    elif k == mid + 19:\n        return arr[mid+18]\n    elif k == mid + 20:\n        return arr[mid+19]\n    elif k == mid + 21:\n        return arr[mid+20]\n    elif k == mid + 22:\n        return arr[mid+21]\n    elif k == mid + 23:\n        return arr[mid+22]\n    elif k == mid + 24:\n        return arr[mid+23]\n    elif k == mid + 25:\n        return arr[mid+24]\n    elif k == mid + 26:\n        return arr[mid+25]\n    elif k == mid + 27:\n        return arr[mid+26]\n    elif k == mid + 28:\n        return arr[mid+27]\n    elif k == mid + 29:\n        return arr[mid+28]\n    elif k == mid + 30:\n        return arr[mid+29]\n    elif k == mid + 31:\n        return arr[mid+30]\n    elif k == mid + 32:\n        return arr[mid+31]\n    elif k == mid + 33:\n        return arr[mid+32]\n    elif k == mid + 34:\n        return arr[mid+33]\n    elif k == mid + 35:\n        return arr[mid+34]\n    elif k == mid + 36:\n        return arr[mid+35]\n    elif k == mid + 37:\n        return arr[mid+36]\n    elif k == mid + 38:\n        return arr[mid+37]\n    elif k == mid + 39:\n        return arr[mid+38]\n    elif k == mid + 40:\n        return arr[mid+39]\n    elif k == mid + 41:\n        return arr[mid+40]\n    elif k == mid + 42:\n        return arr[mid+41]\n    elif k == mid + 43:\n        return arr[mid+42]\n    elif k == mid + 44:\n        return arr[mid+43]\n    elif k == mid + 45:\n        return arr[mid+44]\n    elif k == mid + 46:\n        return arr[mid+45]\n    elif k == mid + 47:\n        return arr[mid+46]\n    elif k == mid + 48:\n        return arr[mid+47]\n    elif"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(string):\n    words = string.split('_')\n    return words[0] + ''.join(word.capitalize() for word in words[1:])\n\n# Test"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    if n == 0 and m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif m == 0:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n\n# Example usage:"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    return sorted(lst, key=lambda x: x[0])\n\n# Test"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count_true(lst):\n    count = 0\n    for x in lst:\n        if x:\n            count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list1, list2):\n    \"\"\"\n    Add the given list to the given tuples.\n    \"\"\"\n    return tuple(x + y for x, y in zip(list1, list2))\n\n# Example usage:\nlist1 = [5, 6, 7]\nlist2 = (9, 10)\n\nresult = add_lists(list1, list2)"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if (i & 0xF) == 0xF:\n            count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(list1, list2, list3):\n    heap = []\n    heapq.heappush(heap, (list1[0], 0))\n    heapq.heappush(heap, (list2[0], 1))\n    heapq.heappush(heap, (list3[0], 2))\n    i = 0\n    j = 0\n    k = 0\n    while True:\n        if i < len(list1) and j < len(list2) and k < len(list3):\n            if list1[i] <= list2[j] and list1[i] <= list3[k]:\n                heapq.heappush(heap, (list1[i], i))\n                i += 1\n            elif list2[j] <= list1[i] and list2[j] <= list3[k]:\n                heapq.heappush(heap, (list2[j], j))\n                j += 1\n            else:\n                heapq.heappush(heap, (list3[k], k))\n                k += 1\n        elif i < len(list1) and j < len(list2):\n            if list1[i] <= list2[j]:\n                heapq.heappush(heap, (list1[i], i))\n                i += 1\n            else:\n                heapq.heappush(heap, (list2[j], j))\n                j += 1\n        elif i < len(list1):\n            if list1[i] <= list3[k]:\n                heapq.heappush(heap, (list1[i], i))\n                i += 1\n            else:\n                heapq.heappush(heap, (list3[k], k))\n                k += 1\n        else:\n            if list2[j] <= list3[k]:\n                heapq.heappush(heap, (list2[j], j))\n                j += 1\n            else:\n                heapq.heappush(heap, (list3[k], k))\n                k += 1\n        if len(heap) == 0:\n            break\n    return heapq.nsmallest(len(list1), heap)\n\n# Test\nlist1 = [25, 24, 15, 4, 5, 29, 110]\nlist2 = [19, 20, 11, 56, 25, 233, 154]\nlist3 = [24, 26, 54, 48]"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(binary_string, n):\n    count = 0\n    for i in range(n):\n        if binary_string[i] == '1':\n            count += 1\n    if count % 2 == 0:\n        return count\n    else:\n        return count + 1\n\n# Test\nbinary_string = \"011001\"\nn = 6"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(lst, start, end):\n    \"\"\"\n    Extract the ranges that are missing from the given list with the given start range and end range values.\n    \"\"\"\n    missing_ranges = []\n    for i in range(start, end + 1):\n        if i not in lst:\n            missing_ranges.append((start, i))\n    return missing_ranges\n\n# Example usage\nlst = [(6, 9), (15, 34), (48, 70)]\nstart, end = 2, 100"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a list of common elements.\n    \"\"\"\n    # Initialize an empty list to store common elements\n    common_list = []\n\n    # Iterate through the first list\n    for item in list1:\n        # Check if the item is in the second list\n        if item in list2:\n            # If the item is in the second list, add it to the common list\n            common_list.append(item)\n\n    # Return the common list\n    return common_list\n\n# Test the function\nlist1 = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]\nlist2 = [7, 12, 18, 24, 28]"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\nimport math\n\ndef perimeter(radius, height):\n    return 2 * (radius * math.pi + height * math.pi)\n\n# Example usage\nradius = 2\nheight = 4"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n# Test"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(lst):\n    freq_dict = {}\n    for tup in lst:\n        for item in tup:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return list(freq_dict.items())\n\n# Test"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(list_of_dicts):\n    for dict_ in list_of_dicts:\n        if dict_.keys()!= set():\n            return False\n    return True\n\n# Example usage:\nlist_of_dicts = [{\"a\": 1, \"b\": 2}, {\"a\": 3, \"b\": 4}, {\"a\": 5, \"b\": 6}]"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tup):\n    return int(\"\".join(str(x) for x in tup))\n\n# Example usage:"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(list_of_strings):\n    \"\"\"\n    Converts all possible convertible elements in the list to float.\n    \"\"\"\n    return [float(x) for x in list_of_strings]\n\n# Example usage\nlist_of_strings = [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n    \"\"\"\n    Converts a string to a list.\n\n    Args:\n        string (str): The string to be converted.\n\n    Returns:\n        list: A list of words in the string.\n    \"\"\"\n    return string.split()\n\n# Example usage:\nstring = \"python programming\"\nlist_of_words = string_to_list(string)"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return target\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n# Test\narr = [1,1,2,2,3]\ntarget = 5"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples as input and returns the maximum product of the pairs of tuples.\n    \"\"\"\n    # Initialize the maximum product to 0\n    max_product = 0\n    \n    # Iterate through the list of tuples\n    for i in range(len(lst)):\n        # Iterate through the remaining tuples\n        for j in range(i+1, len(lst)):\n            # Calculate the product of the two tuples\n            product = lst[i][0] * lst[j][0]\n            # Check if the product is greater than the maximum product\n            if product > max_product:\n                # Update the maximum product\n                max_product = product\n                \n    # Return the maximum product\n    return max_product\n\n# Test the function\nlst = [(2, 7), (2, 6), (1, 8), (4, 9)]"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, target_sum, start, end):\n    for i in range(start, end):\n        for j in range(i+1, end):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\ndef find_triplet(arr, target_sum):\n    arr.sort()\n    for i in range(len(arr)-2):\n        if check_triplet(arr, target_sum, i+1, len(arr)-1):\n            return True\n    return False\n\narr = [2, 7, 4, 0, 9, 5, 1, 3]\ntarget_sum = 8\n"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    \"\"\"\n    This function returns n\u2019th smart number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n + sum(smartNumber(i) for i in range(1, n))\n\n# Example usage"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef is_amicable(num1, num2):\n    \"\"\"\n    Check if two numbers are amicable.\n    \"\"\"\n    return num1 == sum(divisors(num1)) and num2 == sum(divisors(num2))\n\ndef divisors(num):\n    \"\"\"\n    Generate all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef amicable_numbers_sum(max_num):\n    \"\"\"\n    Sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_nums = []\n    for i in range(1, max_num + 1):\n        for j in range(i + 1, max_num + 1):\n            if is_amicable(i, j):\n                amicable_nums.append(i)\n                amicable_nums.append(j)\n    return sum(amicable_nums)\n\n# Example usage\nmax_num = 999"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\nimport math\n\ndef angle_complex(real, imag):\n    return math.atan2(imag, real)\n\n# Example usage:\nreal = 0\nimag = 1\nangle = angle_complex(real, imag)"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary_string, target_length):\n    count_0 = binary_string.count('0')\n    count_1 = binary_string.count('1')\n    if count_0 == count_1:\n        return count_0\n    elif count_0 > count_1:\n        return count_0 - count_1\n    else:\n        return count_1 - count_0\n\n# Example usage:\nbinary_string = \"11000010001\"\ntarget_length = 11"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_of_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find all divisors of a\n    divisors_a = [i for i in range(1, a + 1) if a % i == 0]\n\n    # Find all divisors of b\n    divisors_b = [i for i in range(1, b + 1) if b % i == 0]\n\n    # Find common divisors\n    common_divisors = list(set(divisors_a) & set(divisors_b))\n\n    # Sum of common divisors\n    return sum(common_divisors)\n\n# Example usage"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(x, y):\n    result = 0\n    while y > 0:\n        result += x\n        y -= 1\n    return result\n\n# Test"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n, words):\n    \"\"\"\n    Returns a list of words that are longer than n from a given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n# Example usage\nwords = [\"python\", \"is\", \"a\", \"programming\", \"language\"]\nn = 3"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square(n):\n    \"\"\"\n    Calculate magic square.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Check if n is a perfect square\n    if n**0.5 != int(n**0.5):\n        return False\n\n    # Check if n is a power of 2\n    if n & (n - 1) != 0:\n        return False\n\n    # Check if n is a valid magic square\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n\n    # Check if n is a magic square\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n\n    # Check if n is a magic square\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n\n    # Check if n is a magic square\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n\n    # Check if n is a magic square\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n\n    # Check if n is"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the item with maximum frequency.\n    \"\"\"\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    max_freq = max(freq_dict.values())\n    max_item = [item for item, freq in freq_dict.items() if freq == max_freq]\n    return max_item[0], max_freq\n\n# Test the function\nlst = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]\nmax_item, max_freq = max_occurrences(lst)"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    left, right = 0, len(string) - 1\n    while left < right:\n        if string[left] not in vowels:\n            left += 1\n        elif string[right] not in vowels:\n            right -= 1\n        else:\n            string = string[:left] + string[right + 1:left] + string[left + 1:right] + string[left] + string[right]\n            left += 1\n            right -= 1\n    return string\n\n# Test"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    return \"\".join(tup)\n\n# Test\ntup = ('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(nums):\n    return sum(x for x in nums if x < 0)\n\n# Test"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr, p, index):\n    if p == 0:\n        return \"EVEN\"\n    if p == 1:\n        return \"ODD\"\n    if p == 2:\n        return \"EVEN\"\n    if p == 3:\n        return \"ODD\"\n    if p == 4:\n        return \"EVEN\"\n    if p == 5:\n        return \"ODD\"\n    if p == 6:\n        return \"EVEN\"\n    if p == 7:\n        return \"ODD\"\n    if p == 8:\n        return \"EVEN\"\n    if p == 9:\n        return \"ODD\"\n    if p == 10:\n        return \"EVEN\"\n    if p == 11:\n        return \"ODD\"\n    if p == 12:\n        return \"EVEN\"\n    if p == 13:\n        return \"ODD\"\n    if p == 14:\n        return \"EVEN\"\n    if p == 15:\n        return \"ODD\"\n    if p == 16:\n        return \"EVEN\"\n    if p == 17:\n        return \"ODD\"\n    if p == 18:\n        return \"EVEN\"\n    if p == 19:\n        return \"ODD\"\n    if p == 20:\n        return \"EVEN\"\n    if p == 21:\n        return \"ODD\"\n    if p == 22:\n        return \"EVEN\"\n    if p == 23:\n        return \"ODD\"\n    if p == 24:\n        return \"EVEN\"\n    if p == 25:\n        return \"ODD\"\n    if p == 26:\n        return \"EVEN\"\n    if p == 27:\n        return \"ODD\"\n    if p == 28:\n        return \"EVEN\"\n    if p == 29:\n        return \"ODD\"\n    if p == 30:\n        return \"EVEN\"\n    if p == 31:\n        return \"ODD\"\n    if p == 32:\n        return \"EVEN\"\n    if p == 33:\n        return \"ODD\"\n    if p == 34:\n        return \"EVEN\"\n    if p == 35:\n        return \"ODD\"\n    if p == 36:\n        return \"EVEN\"\n    if p == 37:\n        return \"ODD\"\n    if p == 38:\n        return \"EVEN\"\n    if p == 39:\n        return \"ODD\"\n    if p == 40:\n        return \"EVEN\"\n    if p == 41:\n        return \"ODD\"\n    if p == 42:\n        return \"EVEN\"\n    if p == 43:\n        return \"ODD\"\n    if p == 44:\n        return \"EVEN\"\n    if p == 45:\n        return \"ODD\"\n    if p == 46:\n        return \"EVEN\"\n    if p == 47:\n        return \"ODD\"\n    if p == 48:\n        return \"EVEN\"\n    if p == 49:\n        return \"ODD\"\n    if p == 50:\n        return \"EVEN\"\n    if p == 51:\n        return \"ODD\"\n    if p == 52:\n        return \"EVEN\"\n    if p == 53:\n        return \"ODD\"\n    if p == 54:\n        return \"EVEN\"\n    if p == 55:\n        return \"ODD\"\n    if p == 56:\n        return \"EVEN\"\n    if p == 57:\n        return \"ODD\"\n    if p == 58:\n        return \"EVEN\"\n    if p == 59:\n        return \"ODD\"\n    if p == 60:\n        return \"EVEN\"\n    if p == 61:\n        return \"ODD\"\n    if p == 62:\n        return \"EVEN\"\n    if p == 63:\n        return \"ODD\"\n    if p == 64:\n        return \"EVEN\"\n    if p == 65:\n        return \"ODD\"\n    if p == 66:\n        return \"EVEN\"\n    if p == 67:\n        return \"ODD\"\n    if p == 68:\n        return \"EVEN\"\n    if p == "], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n\n# Example usage:"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kwh):\n    \"\"\"\n    Calculate electricity bill\n    \"\"\"\n    # Calculate electricity bill\n    if kwh <= 100:\n        return kwh * 0.5\n    elif kwh <= 200:\n        return 100 + (kwh - 100) * 0.6\n    elif kwh <= 300:\n        return 100 + 100 + (kwh - 200) * 0.7\n    elif kwh <= 400:\n        return 100 + 100 + 100 + (kwh - 300) * 0.8\n    else:\n        return 100 + 100 + 100 + 100 + (kwh - 400) * 0.9\n\n# Test"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(arr):\n    count = 0\n    for num in arr:\n        if num == 0:\n            count += 1\n    return count/len(arr)\n\n# Test\narr = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n // 2)\n    return False\n\n# Test cases"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\nimport math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\n# Example usage:\nradius = 10\ncircumference = circle_circumference(radius)"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(tuple_list):\n    \"\"\"\n    Extract elements that occur singly in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        list: A list of elements that occur singly.\n    \"\"\"\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for tup in tuple_list:\n        for elem in tup:\n            if elem in count_dict:\n                count_dict[elem] += 1\n            else:\n                count_dict[elem] = 1\n    # Create a list to store elements that occur singly\n    singly_list = []\n    for elem, count in count_dict.items():\n        if count == 1:\n            singly_list.append(elem)\n    return singly_list\n\n# Example usage:\ntuple_list = [(3, 4, 5), (4, 5, 7), (1, 4)]"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(arr):\n    \"\"\"\n    Sort a list of elements using pancake sort.\n\n    Args:\n    arr (list): A list of elements.\n\n    Returns:\n    list: A sorted list of elements.\n    \"\"\"\n    # Initialize the minimum index\n    min_index = 0\n    # Initialize the minimum element\n    min_val = arr[0]\n\n    # Iterate through the list\n    for i in range(len(arr)):\n        # Find the minimum element\n        for j in range(i, len(arr)):\n            if arr[j] < min_val:\n                min_index = j\n                min_val = arr[j]\n        # Apply pancake sort\n        if min_index != i:\n            # Swap elements\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n            # Reverse the sublist\n            arr[i+1:min_index+1] = arr[i+1:min_index+1][::-1]\n            # Reverse the sublist\n            arr[min_index+1:len(arr)] = arr[min_index+1:len(arr)][::-1]\n\n    return arr\n\n# Example usage\narr = [15, 79, 25, 38, 69]"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\nlist1 = [1,2,3,4,5,6,7,8]\nlist2 = [2,2,3,1,2,6,7,9]\nlist3 = [2,1,3,1,2,6,7,9]\n"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tuple_of_lists):\n    count = 0\n    for lst in tuple_of_lists:\n        if isinstance(lst, list):\n            count += 1\n    return count\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr, k):\n    \"\"\"\n    This function calculates the sum of absolute differences in all pairs of the given array.\n    \"\"\"\n    # Initialize the sum\n    sum_diff = 0\n    \n    # Iterate through all pairs of elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate the absolute difference\n            diff = abs(arr[i] - arr[j])\n            # Add the difference to the sum\n            sum_diff += diff\n    \n    # Return the sum\n    return sum_diff\n\n# Example usage\narr = [1,8,9,15,16]\nk = 5"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\ndef max_Abs_Diff(arr, n):\n    \"\"\"\n    This function returns the maximum difference between any two elements in a given array.\n    \"\"\"\n    # Initialize max_diff with 0\n    max_diff = 0\n    # Iterate through the array\n    for i in range(n):\n        # Iterate through the array\n        for j in range(i+1, n):\n            # Calculate the difference between the two elements\n            diff = abs(arr[i] - arr[j])\n            # Update max_diff if the difference is greater\n            if diff > max_diff:\n                max_diff = diff\n    # Return max_diff\n    return max_diff\n\n# Example usage\narr = (2,1,5,3)\nn = len(arr)"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(string):\n    \"\"\"\n    Returns the ascii value of total characters in a string.\n    \"\"\"\n    return sum(ord(c) for c in string)\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, start_row, start_col):\n    \"\"\"\n    Given a triangle of numbers, find the maximum total path sum from the start row to the end row.\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(start_row, len(triangle) - 1):\n        for j in range(start_col, len(triangle[i]) - 1):\n            max_sum = max(max_sum, triangle[i][j] + triangle[i+1][j+1] + triangle[i+1][j])\n    return max_sum\n\n# Example usage:\ntriangle = [[1, 0, 0], [4, 8, 0], [1, 5, 3]]"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\ndef sum_digits_twoparts(num):\n    \"\"\"\n    Divide a number into two parts such that the sum of digits is maximum.\n    \"\"\"\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 3\n    if num == 4:\n        return 4\n    if num == 5:\n        return 5\n    if num == 6:\n        return 6\n    if num == 7:\n        return 7\n    if num == 8:\n        return 8\n    if num == 9:\n        return 9\n    if num == 10:\n        return 10\n    if num == 11:\n        return 11\n    if num == 12:\n        return 12\n    if num == 13:\n        return 13\n    if num == 14:\n        return 14\n    if num == 15:\n        return 15\n    if num == 16:\n        return 16\n    if num == 17:\n        return 17\n    if num == 18:\n        return 18\n    if num == 19:\n        return 19\n    if num == 20:\n        return 20\n    if num == 21:\n        return 21\n    if num == 22:\n        return 22\n    if num == 23:\n        return 23\n    if num == 24:\n        return 24\n    if num == 25:\n        return 25\n    if num == 26:\n        return 26\n    if num == 27:\n        return 27\n    if num == 28:\n        return 28\n    if num == 29:\n        return 29\n    if num == 30:\n        return 30\n    if num == 31:\n        return 31\n    if num == 32:\n        return 32\n    if num == 33:\n        return 33\n    if num == 34:\n        return 34\n    if num == 35:\n        return 35\n    if num == 36:\n        return 36\n    if num == 37:\n        return 37\n    if num == 38:\n        return 38\n    if num == 39:\n        return 39\n    if num == 40:\n        return 40\n    if num == 41:\n        return 41\n    if num == 42:\n        return 42\n    if num == 43:\n        return 43\n    if num == 44:\n        return 44\n    if num == 45:\n        return 45\n    if num == 46:\n        return 46\n    if num == 47:\n        return 47\n    if num == 48:\n        return 48\n    if num == 49:\n        return 49\n    if num == 50:\n        return 50\n    if num == 51:\n        return 51\n    if num == 52:\n        return 52\n    if num == 53:\n        return 53\n    if num == 54:\n        return 54\n    if num == 55:\n        return 55\n    if num == 56:\n        return 56\n    if num == 57:\n        return 57\n    if num == 58:\n        return 58\n    if num == 59:\n        return 59\n    if num == 60:\n        return 60\n    if num == 61:\n        return 61\n    if num == 62:\n        return 62\n    if num == 63:\n        return 63\n    if num == 64:\n        return 64\n    if num == 65:\n        return 65\n    if num == 66:\n        return 66\n    if num == 67:\n        return 67\n    if num == 68:\n        return 68\n    if num == 69:\n        return 69\n    if num == 70:\n        return 70\n    if num == 71:\n        return 71\n    if num == 72:\n        return 72\n    if num == 73:\n        return 73\n    if num == 74:\n        return "], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, target):\n    dp = [[0] * (target + 1) for _ in range(len(arr) + 1)]\n    for i in range(len(arr) + 1):\n        dp[i][0] = 0\n    for j in range(target + 1):\n        dp[0][j] = 0\n    for i in range(1, len(arr) + 1):\n        for j in range(1, target + 1):\n            if arr[i - 1] == j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1])\n    return dp[-1][-1]\n\n# Example usage\narr = [1, 2, 3, 4, 5, 3, 2]\ntarget = 7"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(num, start, end):\n    if start > end:\n        return False\n    if start == end:\n        return num == start\n    return num in range(start, end+1)\n\n# Test"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(num1, num2):\n    if num1 == 0 or num2 == 0:\n        return False\n    while num2 != 0:\n        temp = num1\n        num1 = num2\n        num2 = temp % num2\n    return num1 == 1\n\n# Example usage:"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result\n\n# Example usage\narr = [3, 4, 2, 6, 5, 7, 1, 9]\nsorted_arr = merge_sort(arr)"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a, b, c):\n    x = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    y = a*x**2 + b*x + c\n    return x, y\n\n# Example usage:\nx, y = parabola_vertex(5, 3, 2)"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef extract_element(lst, index):\n    return [item[index] for item in lst]\n\n# Example usage:\nlst = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]\nindex = 0"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    return num ^ (1 << (num.bit_length() - 1))\n\n# Example usage:"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(tuple_str):\n    return tuple(map(int, tuple_str))\n\n# Example usage:\ntuple_str = ('333', '33')"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(lst):\n    \"\"\"\n    Given a list of integers, return a list of lists, where each sublist\n    contains the count of consecutive integers in the original list, and\n    the last element of the sublist is the integer itself.\n    \"\"\"\n    result = []\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == lst[i-1]:\n            count += 1\n        else:\n            result.append([count, lst[i]])\n            count = 1\n    result.append([count, lst[-1]])\n    return result\n\ndef decode_list(lst):\n    \"\"\"\n    Given a list of lists, return a list of integers.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count, num = lst[i]\n        result.extend([num] * count)\n    return result\n\ndef decode_list_list(lst):\n    \"\"\"\n    Given a list of lists, return a list of integers.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count, num = lst[i]\n        result.extend([num] * count)\n    return result\n\ndef decode_list_list_list(lst):\n    \"\"\"\n    Given a list of lists, return a list of integers.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count, num = lst[i]\n        result.extend([num] * count)\n    return result\n\ndef decode_list_list_list_list(lst):\n    \"\"\"\n    Given a list of lists, return a list of integers.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count, num = lst[i]\n        result.extend([num] * count)\n    return result\n\ndef decode_list_list_list_list_list(lst):\n    \"\"\"\n    Given a list of lists, return a list of integers.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count, num = lst[i]\n        result.extend([num] * count)\n    return result\n\ndef decode_list_list_list_list_list_list(lst):\n    \"\"\"\n    Given a list of lists, return a list of integers.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count, num = lst[i]\n        result.extend([num] * count)\n    return result\n\ndef decode_list_list_list_list_list_list_list(lst):\n    \"\"\"\n    Given a list of lists, return a list of integers.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count, num = lst[i]\n        result.extend([num] * count)\n    return result\n\ndef decode_list_list_list_list_list_list_list_list(lst):\n    \"\"\"\n    Given a list of lists, return a list of integers.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count, num = lst[i]\n        result.extend([num] * count)\n    return result\n\ndef decode_list_list_list_list_list_list_list_list_list(lst):\n    \"\"\"\n    Given a list of lists, return a list of integers.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count, num = lst[i]\n        result.extend([num] * count)\n    return result\n\ndef decode_list_list_list_list_list_list_list_list_list_list(lst):\n    \"\"\"\n    Given a list of lists, return a list of integers.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count, num = lst[i]\n        result.extend([num] * count)\n    return result\n\ndef decode_list_list_list_list_list_list_list_list_list_list_list(lst):\n    \"\"\"\n    Given a list of lists, return a list of integers.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        count, num = lst[i]\n        result.extend([num] * count)\n    return result\n\ndef decode_list_list_list_list_list_list_list_"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr, k, n):\n    # Calculate the minimum number of operations required\n    # to make all elements equal\n    min_Ops = 0\n    for i in range(n):\n        min_Ops += abs(arr[i] - k)\n    return min_Ops\n\n# Example usage\narr = [2,2,2,2]\nk = 3\nn = len(arr)"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month, day):\n    seasons = {\n        'January': 'winter',\n        'February': 'winter',\n        'March': 'spring',\n        'April': 'spring',\n        'May': 'spring',\n        'June': 'summer',\n        'July': 'summer',\n        'August': 'summer',\n        'September': 'fall',\n        'October': 'fall',\n        'November': 'fall',\n        'December': 'winter'\n    }\n    if month in seasons and day in range(1,32):\n        return seasons[month]\n    else:\n        return 'Invalid date'\n\n# Test the function"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    x = 0\n    y = 0\n    while n > 0:\n        if n % a == 0:\n            x += 1\n            n -= a\n        elif n % b == 0:\n            y += 1\n            n -= b\n        else:\n            return None\n    return ('x = ', x, ', y = ', y)\n\n# Example usage:"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]\n\n# Test\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nlist2 = [2,4,6,8]"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n\n# Test"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\nimport math\n\ndef area_polygon(n, s):\n    \"\"\"\n    Calculate the area of a regular polygon.\n\n    Args:\n        n (int): The number of sides of the polygon.\n        s (float): The length of each side of the polygon.\n\n    Returns:\n        float: The area of the polygon.\n    \"\"\"\n    return n * s * s / (4 * math.tan(math.pi / n))\n\n# Example usage:"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(num1, num2):\n    divisors1 = getDivisors(num1)\n    divisors2 = getDivisors(num2)\n    return len(divisors1) == len(divisors2)\n\ndef getDivisors(num):\n    divisors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors\n\n# Example usage"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].lower() == string[i+1].lower():\n            count += 1\n    return count\n\n# Example usage:\nstring = \"xbcefg\""], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr, x):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] ^ arr[j] % 2 == 0:\n                count += 1\n    return count\n\narr = [5,4,7,2,1]\nx = 5"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    return 2 ** (n.bit_length())\n\n# Test"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr, num):\n    count = 0\n    for i in arr:\n        if i == num:\n            count += 1\n    return count\n\narr = [1,2,3,4,5,6,7,8,9]\nnum = 4"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    \"\"\"\n    Calculate the nth pell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*get_pell(n-1) + get_pell(n-2)\n\n# Example usage"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])\n\n# Example usage:\nlst = [2,1,5,6,8,3,4,9,10,11,8,12]\nstart, end = 8, 10"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    return n * 5\n\n# Test"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    count = 0\n    for char in string:\n        if char == 'd':\n            count += 1\n    return count\n\n# Test\nstring = \"letstdlenstdporstd\""], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\ndef remove_splchar(string):\n    return ''.join(char for char in string if char.isalnum())\n\n# Example usage:"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(keyvalue_list):\n    result = {}\n    for key, value in keyvalue_list:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n\n# Example usage\nkeyvalue_list = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n# Test"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    return a+b+c\n\n# Test the function"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef lcm(a, b):\n    \"\"\"\n    Calculate the least common multiple of two numbers\n    \"\"\"\n    return a * b // gcd(a, b)\n\ndef gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor of two numbers\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef answer(max_num, min_num):\n    \"\"\"\n    Find two distinct numbers such that their lcm lies within the given range\n    \"\"\"\n    lcm_range = max_num * min_num // gcd(max_num, min_num)\n    for i in range(min_num, max_num + 1):\n        if lcm(i, lcm_range) <= max_num and lcm(i, lcm_range) >= min_num:\n            return (i, lcm_range)\n\n# Example usage"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(lit, s):\n    \"\"\"\n    Returns the number of matches of the given literals in the string.\n    \"\"\"\n    count = 0\n    for l in lit:\n        if l in s:\n            count += 1\n    return count\n\n# Example usage:"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    \"\"\"\n    This function checks if the given number is a keith number or not.\n    \"\"\"\n    # Initialize a list to store the sequence of numbers\n    sequence = [num]\n    \n    # Iterate until the sequence reaches 10\n    while len(sequence) < 10:\n        # Calculate the sum of the digits of the current number\n        sum_of_digits = sum(int(digit) for digit in str(num))\n        \n        # Add the sum of the digits to the current number\n        num += sum_of_digits\n        \n        # Append the new number to the sequence\n        sequence.append(num)\n    \n    # Check if the sequence is equal to the given number\n    return sequence == list(str(num))\n\n# Example usage"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\nimport math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    # Radius of the earth in km\n    R = 6371.0\n\n    # Convert degrees to radians\n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n\n    # Differences in coordinates\n    delta_lat = lat2_rad - lat1_rad\n    delta_lon = lon2_rad - lon1_rad\n\n    # Haversine formula\n    a = math.sin(delta_lat/2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(delta_lon/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n\n    # Distance\n    distance = R * c\n    return distance\n\n# Test"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strings, n):\n    \"\"\"\n    Given a list of strings, find the longest common prefix.\n    \"\"\"\n    prefix = strings[0][:n]\n    for s in strings[1:]:\n        if s[:n] != prefix:\n            return prefix\n    return prefix\n\n# Example usage:\nstrings = [\"tablets\", \"tables\", \"taxi\", \"tamarind\"]\nn = 4"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\n\ndef find_character(string):\n    uppercase_characters = re.findall(r'[A-Z]', string)\n    lowercase_characters = re.findall(r'[a-z]', string)\n    special_characters = re.findall(r'[^A-Za-z0-9]', string)\n    numeric_characters = re.findall(r'\\d', string)\n    return (uppercase_characters, lowercase_characters, special_characters, numeric_characters)\n\n# Example usage\nstring = \"ThisIsGeeksforGeeks\""], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, target_sum):\n    \"\"\"\n    This function counts all the distinct pairs having a difference of k in any array.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count\n\narr = [1, 5, 3, 4, 2]\nk = 3\ntarget_sum = 5\n"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(lst, num):\n    return [x for x in lst if x > num]\n\n# Test"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a, b, c):\n    \"\"\"\n    Calculate the focus of a parabola.\n\n    Parameters\n    ----------\n    a : float\n        The coefficient of x^2.\n    b : float\n        The coefficient of x.\n    c : float\n        The constant term.\n\n    Returns\n    -------\n    tuple\n        A tuple of the x and y coordinates of the focus.\n    \"\"\"\n    x_focus = -b / (2 * a)\n    y_focus = (b**2 - 4 * a * c) / (4 * a**2)\n    return (x_focus, y_focus)\n\n# Example usage:\na, b, c = 5, 3, 2\nfocus = parabola_focus(a, b, c)"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\n\ndef check_literals(string, literals):\n    \"\"\"\n    This function takes two arguments:\n    - string: the string to search in\n    - literals: a list of strings to search for\n    It returns the number of matches.\n    \"\"\"\n    regex = '|'.join(literals)\n    return len(re.findall(regex, string))\n\n# Example usage:\nstring = 'The quick brown fox jumps over the lazy dog.'\nliterals = ['fox', 'dog']"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(seq1, seq2, m, n):\n    dp = [[0 for x in range(n+1)] for x in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if seq1[i-1] == seq2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n\n# Test the function"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(n):\n    \"\"\"\n    This function checks whether the given number can be represented by product of two squares or not.\n    \"\"\"\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                return True\n            else:\n                return False\n    return False\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(nums):\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] > 0 and nums[i] - 1 < len(nums) and nums[i] != nums[nums[i] - 1]:\n            return nums[i] + 1\n    return len(nums) + 1\n\n# Example usage:\nnums = [1,2,3,-1,5]"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1, y1, x2, y2):\n    count = 0\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            if x**2 + y**2 <= 4:\n                count += 1\n    return count\n\n# Example usage"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    if month == \"February\":\n        return False\n    elif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n        return True\n    else:\n        return False\n\n# Test the function"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(string):\n    if any(char.isalpha() for char in string) and any(char.isdigit() for char in string):\n        return True\n    else:\n        return False\n\n# Test"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(tuple_in):\n    tuple_out = tuple_in[:]\n    for i in range(len(tuple_out) - 1):\n        if tuple_out[i] == tuple_out[i + 1]:\n            tuple_out.remove(tuple_out[i])\n    return tuple_out\n\n# Test"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal_num):\n    return int(octal_num, 8)\n\n# Test"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(arr, target, left, right):\n    if left > right:\n        return -1\n    if left == right:\n        return left\n    mid = (left + right) // 2\n    if arr[mid] == target:\n        if mid == 0 or arr[mid-1] < target:\n            return mid\n        else:\n            return first(arr, target, left, mid-1)\n    elif arr[mid] < target:\n        return first(arr, target, mid+1, right)\n    else:\n        return first(arr, target, left, mid-1)\n\ndef first_position(arr, target):\n    return first(arr, target, 0, len(arr)-1)\n\n# Example usage:\narr = [1,2,3,4,5,6,6]\ntarget = 6"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(tuples, k):\n    return [t for t in tuples if len(t) == k]\n\n# Example usage:"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(x, y):\n    return tuple(x[i]**y[i] for i in range(len(x)))\n\n# Example usage:\nx = (10, 4, 5, 6)\ny = (5, 6, 7, 5)"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nimport math\n\ndef largest_triangle(a, b):\n    \"\"\"\n    Find the largest triangle that can be inscribed in an ellipse.\n\n    Args:\n        a (float): The semi-major axis of the ellipse.\n        b (float): The semi-minor axis of the ellipse.\n\n    Returns:\n        float: The area of the largest triangle that can be inscribed in the ellipse.\n    \"\"\"\n    # Calculate the semi-major axis of the ellipse\n    c = math.sqrt(a**2 + b**2)\n\n    # Calculate the area of the largest triangle\n    area = (a*b*math.sqrt(3))/4\n\n    return area\n\n# Example usage\na = 4\nb = 2"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    power = 0\n    while n > 0:\n        n >>= 1\n        power += 1\n    return 1 << (power - 1)\n\n# Test"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(lst):\n    max_val = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_val]\n\n# Test\nlst = [12,33,23,10,67,89,45,667,23,12,11,10,54]"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n    if len(lst) != len(set(lst)):\n        return False\n    else:\n        return True\n\n# Test\nlst = ['one','one','one']"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n    result = \"\"\n    for char in string:\n        if char % 2 != 0:\n            result += char\n    return result\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(x, y):\n    # Convert the integers to binary\n    x_bin = bin(x)[2:]\n    y_bin = bin(y)[2:]\n\n    # Pad the shorter string with zeros\n    if len(x_bin) < len(y_bin):\n        x_bin = x_bin.zfill(len(y_bin))\n    else:\n        y_bin = y_bin.zfill(len(x_bin))\n\n    # Calculate the hamming distance\n    count = 0\n    for i in range(len(x_bin)):\n        if x_bin[i] != y_bin[i]:\n            count += 1\n\n    return count\n\n# Test the function"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string, char):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == char:\n            count += 1\n    return count\n\n# Example usage:\nstring = \"abcc\"\nchar = \"c\""], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(tuple_list):\n    inversions = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i] > tuple_list[j]:\n                inversions.append((tuple_list[j], tuple_list[i]))\n    return inversions\n\n# Test\ntuple_list = (7, 8, 9, 1, 10, 7)"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(tuple_list):\n    result = []\n    for i in range(len(tuple_list) - 1):\n        result.append(tuple_list[i] + tuple_list[i+1])\n    return result\n\n# Example usage\ntuple_list = (\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(string):\n    n = len(string)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    max_len = 0\n    for i in range(n+1):\n        dp[i][i] = 1\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l\n            if string[i] == string[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            max_len = max(max_len, dp[i][j])\n    return max_len\n\n# Example usage\nstring = \"AABEBCDD\""], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(string):\n    \"\"\"\n    Check if the given string is a decimal number with a precision of 2.\n    \"\"\"\n    pattern = r'^-?\\d{1,3}(?:,\\d{1,3})*(?:\\.\\d+)?$'\n    return bool(re.match(pattern, string))\n\n# Test"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heapify(heap, n, i):\n    smallest = i\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and heap[left] < heap[smallest]:\n        smallest = left\n    if right < n and heap[right] < heap[smallest]:\n        smallest = right\n    if smallest != i:\n        heap[i], heap[smallest] = heap[smallest], heap[i]\n        heapify(heap, n, smallest)\n\ndef heap_replace(heap, item):\n    heap.append(item)\n    n = len(heap)\n    i = n - 1\n    while i > 0:\n        parent = (i-1)//2\n        if heap[parent] >= heap[i]:\n            break\n        heap[parent], heap[i] = heap[i], heap[parent]\n        i = parent\n    return heap\n\n# Example usage\nheap = [25, 44, 68, 21, 39, 23, 89]\nitem = 21\nheap = heap_replace(heap, item)"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\n\ndef is_allowed_specific_char(string, allowed_chars):\n    \"\"\"\n    Check if the given string contains only a certain set of characters(in this case a-z, a-z and 0-9)\n    by using regex.\n\n    Args:\n        string (str): The string to check.\n        allowed_chars (str): The set of allowed characters.\n\n    Returns:\n        bool: True if the string contains only allowed characters, False otherwise.\n    \"\"\"\n    regex = re.compile(r\"^[a-zA-Z0-9]+$\")\n    return regex.match(string) is not None\n\n# Example usage:\nstring = \"ABCDEFabcdef123450\"\nallowed_chars = \"abcdefghijklmnopqrstuvwxyzABCDEF0123456789\"\n"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(num, oth, nth):\n    count = 0\n    while num > 0:\n        if num & 1 == 1:\n            count += 1\n        if count == oth:\n            break\n        num >>= 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))\n\n# Example usage:"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(str1, str2):\n    return str1 + str2\n\n# Example usage:\nstr1 = (\"Manjeet\", \"Nikhil\", \"Akshat\")\nstr2 = (\" Singh\", \" Meherwal\", \" Garg\")\n\nresult = concatenate_strings(str1, str2)"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\nimport math\n\ndef degree_radian(radian):\n    return radian * (180/math.pi)\n\n# Example usage:\nradian = math.pi/2\ndegree = degree_radian(radian)"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(encoded_list):\n    decoded_list = []\n    for item in encoded_list:\n        if item[0] == 1:\n            decoded_list.append(item[1])\n        else:\n            for _ in range(item[0]):\n                decoded_list.append(item[1])\n    return decoded_list\n\n# Test"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(list1, list2):\n    if len(list1) == 0:\n        return True\n    if len(list2) == 0:\n        return False\n    if list1[0] == list2[0]:\n        return check_subset_list(list1[1:], list2[1:])\n    else:\n        return check_subset_list(list1[1:], list2)\n\n# Test cases"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(x, y):\n    # Calculate the difference between x and y\n    diff = abs(x - y)\n    \n    # Initialize the count of operations\n    count = 0\n    \n    # Loop until the difference is 0\n    while diff != 0:\n        # If the difference is positive, add 1 to count\n        if diff > 0:\n            count += 1\n            diff -= 1\n        # If the difference is negative, subtract 1 from count\n        else:\n            count -= 1\n            diff += 1\n    \n    return count\n\n# Test the function"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(tuple_, k):\n    return tuple_[k-1:k+1]\n\n# Example usage:\ntuple_ = (5, 20, 3, 7, 6, 8)\nk = 2"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(string, max_occurrences):\n    max_char = max(string.count(' '), string.count(','), string.count('.'))\n    if max_char >= max_occurrences:\n        return string.replace(' ', ':')\n        return string.replace(',', ':')\n        return string.replace('.', ':')\n    else:\n        return string\n\n# Test cases"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(lst):\n    for num in lst:\n        if num % 2 == 0:\n            return num\n    return None\n\n# Test\nlst = [1, 3, 5, 7, 4, 1, 6, 8]"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple_list):\n    \"\"\"\n    Check if all elements in tuple have same data type or not.\n    \"\"\"\n    for i in range(len(tuple_list)):\n        if type(tuple_list[0]) != type(tuple_list[i]):\n            return False\n    return True\n\n# Test"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, target, index):\n    \"\"\"\n    This function checks if the given target element is majority element in the given sorted array.\n    \"\"\"\n    if len(arr) == 0:\n        return False\n    if index == len(arr):\n        return False\n    if arr[index] == target:\n        return is_majority(arr, target, index + 1)\n    else:\n        return is_majority(arr, target, index + 1)\n\n# Example usage:\narr = [1, 2, 3, 3, 3, 3, 10]\ntarget = 3\nindex = 0"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr, start, end):\n    if start == end:\n        return arr[start]\n    if start == end - 1:\n        return min(arr[start], arr[end])\n    mid = (start + end) // 2\n    if arr[start] <= arr[mid]:\n        if arr[start] <= arr[end]:\n            return arr[start]\n        else:\n            return find_Min(arr, start + 1, end)\n    elif arr[start] > arr[mid]:\n        return find_Min(arr, start, mid)\n    else:\n        return find_Min(arr, mid + 1, end)\n\n# Test\narr = [1,2,3,4,5]"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef remove_odd_values(string):\n    \"\"\"\n    This function takes a string as input and returns a string with odd index characters removed.\n    \"\"\"\n    result = ''\n    for i, char in enumerate(string):\n        if i % 2 == 0:\n            result += char\n    return result\n\n# Example usage\nstring = 'abcdef'\nresult = remove_odd_values(string)"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n\n# Test"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(n, start, end):\n    # Check if start and end are within range\n    if start < 0 or end > n or start > end:\n        return False\n\n    # Check if all bits are unset in the given range\n    for i in range(start, end+1):\n        if (n & (1 << i)) != 0:\n            return False\n    return True\n\n# Test"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    \"\"\"\n    This function rearranges the elements of the given array so that all negative elements appear before positive ones.\n    \"\"\"\n    # Create a copy of the given array\n    arr_copy = arr.copy()\n    \n    # Sort the array in descending order\n    arr_copy.sort(reverse=True)\n    \n    # Return the sorted array\n    return arr_copy\n\n# Example usage\narr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\nn = 9"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(string, replace_char):\n    return string.replace(\" \", replace_char)\n\n# Example usage:\nstring = \"hello people\"\nreplace_char = '@'"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, n):\n    \"\"\"\n    Given a right triangle of numbers, return the maximum sum of the numbers in the triangle.\n    \"\"\"\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1):\n            max_sum += triangle[i][j]\n    return max_sum\n\n# Example usage:\ntriangle = [[1], [2,1], [3,3,2]]"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(data, n):\n    \"\"\"\n    Get the n largest items from a dataset.\n\n    Args:\n        data (list): The dataset.\n        n (int): The number of largest items to get.\n\n    Returns:\n        list: The n largest items from the dataset.\n    \"\"\"\n    return sorted(data, reverse=True)[:n]\n\n# Example usage:\ndata = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100]\nn = 2\nresult = larg_nnum(data, n)"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateral_surface_area_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n\n# Example usage:\nradius = 10\nheight = 5\nlateralsurface_cylinder = lateral_surface_area_cylinder(radius, height)"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\ndef volume_cube(side):\n    return side**3\n\n# Example usage:"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(num):\n    return num | (1 << (num & 1))\n\n# Example usage:"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(n,m):\n    return (n+m-1)*(n+m-2)//2\n\n# Test"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    result = {}\n    for t1, t2 in tuples:\n        if t1 in result:\n            result[t1].append(t2)\n        else:\n            result[t1] = [t2]\n    return result\n\n# Example usage"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count\n\n# Example usage:\nstring = \"abc\""], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    \"\"\"\n    Returns the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n > m:\n        return 0\n    return get_total_number_of_sequences(n-1, m) + get_total_number_of_sequences(n-1, m+1)\n\n# Example usage:"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(list1, list2):\n    list1.append(list2)\n    return list1\n\n# Example usage:\nlist1 = [1, 3, 5, 7, 9, 10]\nlist2 = [2, 4, 6, 8]"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(width, height, depth):\n    return [[['*']*width for _ in range(height)] for _ in range(depth)]\n\n# Example usage:"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(string):\n    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n\n# Test\nstring = \"python programming\""], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(lst):\n    return sorted(lst, key=lambda x: lst.count(x[0]))\n\n# Test"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(num):\n    i = 1\n    while True:\n        if i * i > num:\n            return i * i\n        i += 1\n\n# Test"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, k):\n    \"\"\"\n    This function returns the maximum sum of bi-tonic sub-sequence for the given array.\n    \"\"\"\n    # Initialize the maximum sum\n    max_sum = 0\n\n    # Initialize the current sum\n    curr_sum = 0\n\n    # Iterate through the array\n    for num in arr:\n        # Add the current number to the current sum\n        curr_sum += num\n\n        # If the current sum is greater than the maximum sum\n        if curr_sum > max_sum:\n            # Update the maximum sum\n            max_sum = curr_sum\n\n        # If the current number is greater than the previous number\n        if curr_sum > k:\n            # Reset the current sum\n            curr_sum = 0\n\n    # Return the maximum sum\n    return max_sum\n\n# Example usage\narr = [1, 15, 51, 45, 33, 100, 12, 18, 9]\nk = 9"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(x):\n    \"\"\"\n    Compute square root of x using the babylonian method.\n    \"\"\"\n    guess = x / 2\n    while guess**2 != x:\n        guess = (guess + x / guess) / 2\n    return guess\n\n# Example usage"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef longest_palindromic_subsequence(string):\n    n = len(string)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n\n    for i in range(n+1):\n        dp[i][i] = 1\n\n    for j in range(2, n+1):\n        for i in range(j-1, 0, -1):\n            if string[i-1] == string[j-1]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[1][n]\n\n# Example usage:\nstring = \"TENS FOR TENS\""], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n    \"\"\"\n    return sum(1/i for i in range(1, n))\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n# Test\narr1 = [1, 2, 3, 5, 7, 8, 9, 10]\narr2 = [1, 2, 4, 8, 9]"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tuple_, x):\n    count = 0\n    for t in tuple_:\n        if t == x:\n            count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(lst, element):\n    \"\"\"\n    Insert an element before each element of a list.\n\n    Args:\n        lst (list): The list to be modified.\n        element (any): The element to be inserted.\n\n    Returns:\n        list: The modified list.\n    \"\"\"\n    return [element] + lst\n\n# Example usage:\nlst = ['Red', 'Green', 'Black']"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\nimport math\n\ndef convert(z):\n    \"\"\"\n    Convert complex number to polar coordinates.\n\n    Args:\n        z (complex): Complex number.\n\n    Returns:\n        tuple: Polar coordinates of the complex number.\n    \"\"\"\n    r = abs(z)\n    theta = math.atan2(z.imag, z.real)\n    return (r, theta)\n\n# Example usage:\nz = complex(1, 2)\nr, theta = convert(z)"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(string):\n    words = string.split()\n    words_ae_list = []\n    for word in words:\n        if word[0] in 'ae':\n            words_ae_list.append(word)\n    return words_ae_list\n\n# Example usage:\nstring = \"python programe\""], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors, n):\n    # base case\n    if n == 0:\n        return [[]]\n    # recursive case\n    result = []\n    for i in range(len(colors)):\n        # choose the current color\n        current_color = colors[i]\n        # choose the remaining colors\n        remaining_colors = colors[i+1:]\n        # generate combinations\n        for combination in combinations_colors(remaining_colors, n-1):\n            # add the current color to the combination\n            result.append([current_color] + combination)\n    return result\n\n# example usage\ncolors = [\"Red\",\"Green\",\"Blue\"]\nn = 1\nresult = combinations_colors(colors, n)"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Count the number of prime numbers less than a given non-negative number.\n    \"\"\"\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return len(primes)\n\n# Example usage:"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\ndef swap_numbers(x, y):\n    return y, x\n\n# Test\nx = 10\ny = 20"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(lst):\n    return len([x for x in lst if x % 2 != 0])\n\n# Test"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tuple1, tuple2):\n    return tuple(max(x, y) for x, y in zip(tuple1, tuple2))\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    \"\"\"\n    Returns the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Initialize the list of primes\n    primes = [2, 3]\n\n    # Iterate through the list of primes\n    for i in range(4, n+1):\n        # Calculate the next prime\n        next_prime = primes[-1] + (i - 1) * 6 - 1\n        # Check if the next prime is a prime\n        if is_prime(next_prime):\n            # Add the next prime to the list of primes\n            primes.append(next_prime)\n\n    # Return the nth prime\n    return primes[-1]\n\ndef is_prime(num):\n    \"\"\"\n    Checks if a number is prime.\n    \"\"\"\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is 2\n    if num == 2:\n        return True\n\n    # Check if the number is even\n    if num % 2 == 0:\n        return False\n\n    # Check divisibility up to the square root of the number\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n\n    # If the number is not divisible by any of the above, it is prime\n    return True\n\n# Example usage:"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] // tuple2[i])\n    return result\n\n# Example usage:\ntuple1 = (10, 4, 6, 9)\ntuple2 = (5, 2, 3, 3)"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(lst, n):\n    \"\"\"\n    Split a given list into two parts where the length of the first part of the list is given.\n    \"\"\"\n    return lst[:n], lst[n:]\n\n# Example usage\nlst = [1,1,2,3,4,4,5,1]\nn = 3\n\nfirst, second = split_two_parts(lst, n)"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    return {**dict1, **dict2}\n\n# Test\ndict1 = {'a': 100, 'b': 200}\ndict2 = {'x': 300, 'y': 200}\n"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(age):\n    return age * 7\n\n# Test"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\n# Example usage:\nlst = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']\nn = 3"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\ndef lateral_surface_area_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n    \"\"\"\n    return 6 * side_length ** 2\n\n# Example usage:\nside_length = 5\nlateralsurface_cube(side_length)\n# Output: 100\n\n# Test cases:"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    return sum(i**2 for i in range(1, n+1, 2))\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    \"\"\"\n    This function returns the n'th star number.\n    \"\"\"\n    return n * (n + 1) * (2 * n + 1) // 6\n"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\n# Test"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(arr, n):\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if i + 1 < len(arr):\n            even_sum += arr[i] + arr[i+1]\n    return even_sum\n\n# Example usage:\narr = [5, 6, 12, 1, 18, 8]\nn = 6"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    \"\"\"\n    This function calculates the sum of fifth power of first n even natural numbers.\n    \"\"\"\n    return sum(i**5 for i in range(2, n+1, 2))\n\n# Example usage"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    \"\"\"\n    This function takes a list of tuples records as input and returns a list of elements from the last element of each tuple.\n    \"\"\"\n    return [record[-1] for record in records]\n\n# Example usage\nrecords = [(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple1, tuple2):\n    return tuple1[:tuple2[0]], tuple1[tuple2[0]+1:tuple2[1]], tuple1[tuple2[1]+1:] - tuple2[2]\n\n# Example usage:\ntuple1 = (10, 4, 5)\ntuple2 = (2, 5, 18)\nresult = substract_elements(tuple1, tuple2)"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculate sum of even index binomial coefficients.\n    \"\"\"\n    # Calculate binomial coefficient\n    binomial_coefficient = binomial_coefficient(n)\n    \n    # Initialize sum\n    sum_even_index_coefficient = 0\n    \n    # Iterate over even index\n    for i in range(0, n, 2):\n        # Calculate even index coefficient\n        even_index_coefficient = binomial_coefficient[i]\n        \n        # Add even index coefficient to sum\n        sum_even_index_coefficient += even_index_coefficient\n    \n    return sum_even_index_coefficient\n\ndef binomial_coefficient(n):\n    \"\"\"\n    Calculate binomial coefficient.\n    \"\"\"\n    # Initialize list to store binomial coefficient\n    binomial_coefficient_list = []\n    \n    # Iterate from 0 to n\n    for i in range(n + 1):\n        # Initialize count of 1's\n        count_1 = 0\n        \n        # Iterate from 0 to i\n        for j in range(i + 1):\n            # Check if j is even\n            if j % 2 == 0:\n                # Increment count of 1's\n                count_1 += 1\n        \n        # Add count of 1's to binomial coefficient\n        binomial_coefficient_list.append(count_1)\n    \n    return binomial_coefficient_list\n\n# Test"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr, target, index):\n    for i in range(index, len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\narr = [2,5,4]\ntarget = 3\nindex = 2\n"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    return 3.14159 * radius * radius * height\n\n# Test the function"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(dictionary, value):\n    \"\"\"\n    Filter a dictionary based on values.\n\n    Args:\n    dictionary (dict): The dictionary to filter.\n    value (int): The value to filter by.\n\n    Returns:\n    dict: The filtered dictionary.\n    \"\"\"\n    return {key: val for key, val in dictionary.items() if val == value}\n\n# Example usage:\ndictionary = {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}\nvalue = 170\nfiltered_dict = dict_filter(dictionary, value)"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tuple_of_elements):\n    count = 0\n    for element in tuple_of_elements:\n        if isinstance(element, tuple):\n            count += count_first_elements(element)\n        else:\n            count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    \"\"\"\n    Returns True if n is a decagonal number, False otherwise.\n    \"\"\"\n    return n * (3 * n - 2) == (n + 1) * (2 * n - 1)\n\n# Example usage:"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return (True, i)\n    return (False, -1)\n\n# Example usage\narr = [11,23,58,31,56,77,43,12,65,19]\ntarget = 31\nresult = sequential_search(arr, target)"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n\n# Example usage:"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(list1, list2):\n    return list(map(lambda x, y: x-y, list1, list2))\n\n# Test\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(num):\n    freq = {}\n    for digit in str(num):\n        freq[digit] = freq.get(digit, 0) + 1\n    return all(freq[digit] <= digit for digit in freq)\n\n# Example usage:"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(lst, target):\n    return lst == [target] * len(lst)\n\n# Example usage:\nlst = [\"green\", \"orange\", \"black\", \"white\"]\ntarget = \"blue\""], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    pattern = r\"a(b|bb|bbb)\"\n    if re.search(pattern, text):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\n# Test the function"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    max_sum = float('-inf')\n    for i in range(n):\n        temp_arr = arr + arr + arr + arr\n        max_sum = max(max_sum, max_sub_array_sum(temp_arr, k, n))\n    return max_sum\n\ndef max_sub_array_sum(arr, k, n):\n    max_sum = float('-inf')\n    for i in range(n):\n        temp_arr = arr + arr + arr + arr\n        max_sum = max(max_sum, max_sub_array_sum(temp_arr, k, n))\n    return max_sum\n\ndef max_sub_array_sum_repeated_k_times(arr, k, n):\n    max_sum = float('-inf')\n    for i in range(n):\n        temp_arr = arr + arr + arr + arr\n        max_sum = max(max_sum, max_sub_array_sum(temp_arr, k, n))\n    return max_sum\n\ndef max_sub_array_sum_repeated_k_times_dp(arr, k, n):\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i - 1], dp[i - 1] + arr[i - 1])\n    max_sum = float('-inf')\n    for i in range(n):\n        temp_arr = arr + arr + arr + arr\n        max_sum = max(max_sum, dp[i] + max_sub_array_sum(temp_arr, k, n))\n    return max_sum\n\ndef max_sub_array_sum_repeated_k_times_dp_memo(arr, k, n, memo):\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(arr[0], max_sub_array_sum_repeated_k_times_dp_memo(arr, k, n - 1, memo))\n    if (n, k) in memo:\n        return memo[(n, k)]\n    max_sum = float('-inf')\n    for i in range(n):\n        temp_arr = arr + arr + arr + arr\n        max_sum = max(max_sum, max_sub_array_sum_repeated_k_times_dp_memo(temp_arr, k, n - 1, memo) + dp[i])\n    memo[(n, k)] = max_sum\n    return max_sum\n\ndef max_sub_array_sum_repeated_k_times_dp_memo_all(arr, k, n):\n    memo = {}\n    return max_sub_array_sum_repeated_k_times_dp_memo(arr, k, n, memo)\n\n# Example usage\narr = [10, 20, -30, -1]\nk = 4\nn = 3"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    return sum(i**2 for i in range(2, n+1, 2))\n\n# Test"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(arr, p, n):\n    \"\"\"\n    Calculate modular inverse of array elements under given prime number p.\n    \"\"\"\n    # Initialize result\n    result = 0\n    # Iterate through array\n    for i in range(len(arr)):\n        # Calculate modular inverse\n        result = (result + arr[i] * pow(arr[i], n-2, p)) % p\n    return result\n\n# Example usage\narr = [1, 6, 4, 5]\np = 7\nn = 4"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    # Calculate the number of leap years\n    leap_years = 0\n    for i in range(1, year + 1):\n        if i % 4 == 0 and i % 100 != 0 or i % 400 == 0:\n            leap_years += 1\n    # Calculate the number of odd days\n    odd_days = (leap_years * 366) + (leap_years // 4)\n    # Calculate the number of odd days in the month\n    odd_days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    for i in range(1, 13):\n        if i == 2:\n            odd_days_in_month[i] = 29\n        else:\n            odd_days_in_month[i] = 30\n    # Calculate the total number of odd days\n    total_odd_days = 0\n    for i in range(1, month + 1):\n        total_odd_days += odd_days_in_month[i]\n    # Calculate the total number of odd days in the year\n    total_odd_days += odd_days\n    return total_odd_days\n\n# Test the function"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lst):\n    max_len = 0\n    max_list = []\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_list = l\n    return max_len, max_list\n\n# Test\nlst = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]\nmax_len, max_list = max_length(lst)"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    # base case\n    if n == 0:\n        return 1\n    # if n is 1\n    if n == 1:\n        return k\n    # if n is 2\n    if n == 2:\n        return k * k\n    # if n is greater than 2\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k) + count_no_of_ways(n-3, k)\n\n# Driver code"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(num1, num2):\n    return num1 // num2\n\n# Test"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\nimport math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)\n\n# Test"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(lst):\n    max_val = lst[0]\n    for item in lst:\n        if isinstance(item, int):\n            if item > max_val:\n                max_val = item\n        elif isinstance(item, str):\n            if item > max_val:\n                max_val = item\n    return max_val\n\n# Test the function"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    return sum(i for i in range(1, n+1) if n % i == 0)\n\n# Example usage:"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\n# Test\narr = [1,20,6,4,5]\nn = len(arr)"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The flattened list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(list1, list2):\n    result = []\n    for item in list1:\n        if item in list2:\n            result.append(item)\n    return result\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nlist2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]\n"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(lst):\n    max_val = 0\n    max_name = \"\"\n    for name, score in lst:\n        if score > max_val:\n            max_val = score\n            max_name = name\n    return max_name, max_val\n\n# Example usage:\nlst = [('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]\nmax_name, max_score = max_aggregate(lst)"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    \"\"\"\n    This function calculates the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        if i & (i << 1) == 0:\n            count += 1\n    return count\n\n# Example usage"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(dictionary):\n    \"\"\"\n    Returns the depth of a dictionary.\n    \"\"\"\n    if not isinstance(dictionary, dict):\n        return 0\n    max_depth = 0\n    for key, value in dictionary.items():\n        max_depth = max(max_depth, dict_depth(value) + 1)\n    return max_depth\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(arr1, arr2):\n    count1 = 0\n    count2 = 0\n    for i in range(len(arr1)):\n        if arr1[i] != arr2[i]:\n            count1 += 1\n        if arr2[i] != arr1[i]:\n            count2 += 1\n    return count1 == count2\n\n# Test\narr1 = [1,0,2]\narr2 = [3,2,1]"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr, rotations, index):\n    # Calculate the number of rotations\n    num_rotations = rotations[0]\n    for i in range(1, len(rotations)):\n        num_rotations += rotations[i]\n\n    # Calculate the index after the number of rotations\n    index_after_rotations = index + num_rotations\n\n    # Calculate the index of the element in the original array\n    index_in_original = index_after_rotations % len(arr)\n\n    # Return the element at the given index\n    return arr[index_in_original]\n\n# Example usage\narr = [1,2,3,4,5]\nrotations = [[0,2],[0,3]]\nindex = 2"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    \"\"\"\n    Returns a tuple of two words from a list of words starting with letter 'p'.\n    \"\"\"\n    return (word[0] for word in words if word.startswith('p'))\n\n# Example usage\nwords = [\"Python PHP\", \"Java JavaScript\", \"c c++\"]\nresult = start_withp(words)"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, k, i):\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    for j in range(1, k+1):\n        dp[0][j] = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if arr[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-arr[i-1]] + arr[i-1])\n    return dp[n][k]\n\narr = [1, 101, 2, 3, 100, 4, 5]\nn = len(arr)\nk = 6\ni = 4"], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tuple_, index, max_):\n    \"\"\"\n    Get a colon of a tuple.\n    \"\"\"\n    return tuple_[index:max_]\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(list1, list2, n):\n    \"\"\"\n    Returns the largest n products from two given lists.\n    \"\"\"\n    # Calculate the product of two lists\n    product_list = list(zip(list1, list2))\n    product_list = [x*y for x, y in product_list]\n    # Sort the list in descending order\n    sorted_list = sorted(product_list, reverse=True)\n    # Return the largest n products\n    return sorted_list[:n]\n\n# Example usage\nlist1 = [1, 2, 3, 4, 5, 6]\nlist2 = [3, 6, 8, 9, 10, 6]\nn = 3"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(x, y):\n    if x > y:\n        return x\n    else:\n        return y\n\n# Test"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    return tuple(string)\n\n# Test"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(n):\n    return n | (1 << (n.bit_length() - 1))\n\n# Example usage"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\nimport math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius * radius * height\n\n# Example usage:\nradius = 5\nheight = 12"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef print_pos_nos(lst):\n    \"\"\"\n    This function prints positive numbers in a list.\n    \"\"\"\n    for num in lst:\n        if num > 0:\n            print(num)\n\n# Test"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    max_sum = 0\n    for i in range(len(grid)):\n        for j in range(i+1, len(grid[0])):\n            max_sum = max(max_sum, grid[i][j] + grid[j][i])\n    return max_sum\n\ngrid = [[1, 4, 5], [2, 0, 0]]\nn = 3"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(string):\n    words = string.split()\n    max_len = 0\n    max_len_even = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            max_len_even += 1\n        if max_len_even > max_len:\n            max_len = max_len_even\n    return max_len\n\nstring = \"python language\""], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == len(arr) - 1 or arr[mid + 1] != target:\n                return mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n# Example usage:\narr = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9]\ntarget = 5\nindex = find_last_occurrence(arr, target)"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(lst):\n    \"\"\"\n    Given a list of integers, return a list of tuples of the form (count, value)\n    \"\"\"\n    result = []\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            count += 1\n        else:\n            result.append((count, lst[i-1]))\n            count = 1\n    result.append((count, lst[-1]))\n    return result\n\ndef modified_decode(lst):\n    \"\"\"\n    Given a list of tuples of the form (count, value), return a list of integers\n    \"\"\"\n    result = []\n    for i in range(0, len(lst), 2):\n        count, value = lst[i], lst[i+1]\n        for _ in range(count):\n            result.append(value)\n    return result\n\n# Example usage:\nlst = [1,1,2,3,4,4,5,1]"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(a, b, c):\n    \"\"\"\n    Calculate the maximum volume of a cuboid with given sum of sides.\n\n    Args:\n        a (int): Length of the cuboid.\n        b (int): Width of the cuboid.\n        c (int): Height of the cuboid.\n\n    Returns:\n        int: Maximum volume of the cuboid.\n    \"\"\"\n    return a * b * c\n\n# Example usage:"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\ndef find_long_word(string):\n    \"\"\"\n    This function finds all five characters long word in the given string\n    by using regex.\n    \"\"\"\n    pattern = r'\\b\\w{5}\\b'\n    return re.findall(pattern, string)\n\n# Test"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    \"\"\"\n    Calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n    \"\"\"\n    # Calculate the squared sum of first n natural numbers\n    squared_sum = n * (n + 1) * (2 * n + 1) // 6\n\n    # Calculate the sum of squared first n natural numbers\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n\n    # Calculate the difference between the squared sum and the sum of squared first n natural numbers\n    return squared_sum - sum_of_squares\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(num):\n    \"\"\"\n    This function takes a number as input and returns its demlo number.\n    \"\"\"\n    demlo_num = \"\"\n    for i in range(len(num)):\n        demlo_num += num[i] * (10 ** (len(num) - i - 1))\n    return demlo_num\n\n# Example usage"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(lst):\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]\n\n# Test\nlst = [12,33,23,10,67,89,45,667,23,12,11,10,54]"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    \"\"\"\n    Re-arrange the given array in alternating positive and negative items.\n    \"\"\"\n    # Create a list of positive and negative items\n    positive_items = [x for x in arr if x > 0]\n    negative_items = [x for x in arr if x < 0]\n\n    # Create a list of positive and negative items\n    positive_items.extend(negative_items)\n\n    # Create a list of alternating positive and negative items\n    result = []\n    for i in range(0, len(arr), 2):\n        result.extend(positive_items[i:i+n])\n        result.extend(negative_items[i:i+n])\n\n    return result\n\n# Test\narr = [-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8]\nn = 10"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(lst):\n    \"\"\"\n    Returns the sum of alternate chains of tuples.\n    \"\"\"\n    if not lst:\n        return 0\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + sum_of_alternates(lst[1:])\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    # Initialize a list to store the minimum number of squares\n    min_squares = []\n    # Iterate from 1 to the given number\n    for i in range(1, n + 1):\n        # Initialize a variable to store the sum of squares\n        sum_squares = 0\n        # Iterate from 1 to the square root of i\n        for j in range(1, int(i ** 0.5) + 1):\n            # Add the square of j to the sum\n            sum_squares += j ** 2\n        # If the sum of squares is equal to i, add i to the list\n        if sum_squares == i:\n            min_squares.append(i)\n    # Return the minimum number of squares\n    return min(min_squares)\n\n# Example usage"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings):\n    \"\"\"\n    This function returns the word with most number of occurrences in the given strings list.\n    \"\"\"\n    # Create a dictionary to store the count of each word\n    count_dict = {}\n    for string in strings:\n        # Split the string into words\n        words = string.split()\n        # Iterate over the words\n        for word in words:\n            # If the word is already in the dictionary, increment its count\n            if word in count_dict:\n                count_dict[word] += 1\n            # If the word is not in the dictionary, add it with count 1\n            else:\n                count_dict[word] = 1\n    # Find the maximum count\n    max_count = max(count_dict.values())\n    # Find the words with maximum count\n    max_words = [word for word, count in count_dict.items() if count == max_count]\n    # Return the word with maximum count\n    return max_words[0]\n\n# Test\nstrings = [\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"]"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a==b or b==c or a==c:\n        return True\n    else:\n        return False\n\n# Test"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(lst, n, k=None):\n    if k is None:\n        k = n\n    return lst[k:] + lst[:k]\n\n# Example usage:\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = 3\nk = 4"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef count_negatives(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\n\ndef find_char(string):\n    pattern = r'\\b\\w{3,5}\\b'\n    return re.findall(pattern, string)\n\n# Test"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Example usage:"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    frequency = {}\n    for char in string:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency\n\n# Test\nstring = 'python'"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n# Test\nlst = [['a', 10], ['b', 5], ['c', 20], ['d', 15]]"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a,b,c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    else:\n        return True\n\n# Test"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a, n, d):\n    return (n * (a + a + (n - 1) * d)) // 2\n\n# Test"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month):\n    if month == \"January\" or month == \"March\" or month == \"May\" or month == \"July\" or month == \"August\" or month == \"October\" or month == \"December\":\n        return True\n    elif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n        return True\n    else:\n        return False\n\n# Test"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text, word):\n    \"\"\"\n    Returns the index of the first occurrence of the word at the end of the string.\n    \"\"\"\n    index = text.rfind(word)\n    if index == -1:\n        return -1\n    if text[index-1] == '.' or text[index-1] == '!' or text[index-1] == '?':\n        return index\n    return -1\n\n# Example usage\ntext = \"python.\"\nword = \"python\"\nindex = text_match_word(text, word)"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[i + 1]:\n            count += 1\n    return count\n\n# Example usage\nstring = 'aba'"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(start, end):\n    \"\"\"\n    This function finds the maximum occuring divisor in an interval.\n    \"\"\"\n    max_divisor = 1\n    for i in range(start, end+1):\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                max_divisor = max(max_divisor, j, i//j)\n    return max_divisor\n\n# Example usage\nstart = 2\nend = 2"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    nums.sort()\n    return sum(nums[:3])\n\n# Test\nnums = [10,20,30,40,50,60,7]"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(set_obj):\n    return tuple(sorted(set_obj))\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrs):\n    min_range = float('inf')\n    for arr in arrs:\n        arr.sort()\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] > arr[j]:\n                    min_range = min(min_range, arr[i] - arr[j])\n    return min_range\n\n# Example usage:\narrs = [[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(string):\n    \"\"\"\n    Calculate the number of digits and letters in a string.\n    \"\"\"\n    digits = 0\n    letters = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return digits, letters\n\n# Example usage\nstring = \"python\"\ndigits, letters = dig_let(string)"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if i % 2 != 0:\n            count += i**(1/2)\n    return count\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(lst):\n    diff = []\n    for i in range(len(lst)-1):\n        diff.append(lst[i+1] - lst[i])\n    return diff\n\n# Test the function\nlst = [1, 1, 3, 4, 4, 5, 6, 7]"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    if n == 0:\n        return 0\n    elif k == 0:\n        return n\n    elif k == 1:\n        return n + 1\n    elif k == 2:\n        return n + 2\n    elif k == 3:\n        return n + 3\n    elif k == 4:\n        return n + 4\n    elif k == 5:\n        return n + 5\n    elif k == 6:\n        return n + 6\n    elif k == 7:\n        return n + 7\n    elif k == 8:\n        return n + 8\n    elif k == 9:\n        return n + 9\n    elif k == 10:\n        return n + 10\n    elif k == 11:\n        return n + 11\n    elif k == 12:\n        return n + 12\n    elif k == 13:\n        return n + 13\n    elif k == 14:\n        return n + 14\n    elif k == 15:\n        return n + 15\n    elif k == 16:\n        return n + 16\n    elif k == 17:\n        return n + 17\n    elif k == 18:\n        return n + 18\n    elif k == 19:\n        return n + 19\n    elif k == 20:\n        return n + 20\n    elif k == 21:\n        return n + 21\n    elif k == 22:\n        return n + 22\n    elif k == 23:\n        return n + 23\n    elif k == 24:\n        return n + 24\n    elif k == 25:\n        return n + 25\n    elif k == 26:\n        return n + 26\n    elif k == 27:\n        return n + 27\n    elif k == 28:\n        return n + 28\n    elif k == 29:\n        return n + 29\n    elif k == 30:\n        return n + 30\n    elif k == 31:\n        return n + 31\n    elif k == 32:\n        return n + 32\n    elif k == 33:\n        return n + 33\n    elif k == 34:\n        return n + 34\n    elif k == 35:\n        return n + 35\n    elif k == 36:\n        return n + 36\n    elif k == 37:\n        return n + 37\n    elif k == 38:\n        return n + 38\n    elif k == 39:\n        return n + 39\n    elif k == 40:\n        return n + 40\n    elif k == 41:\n        return n + 41\n    elif k == 42:\n        return n + 42\n    elif k == 43:\n        return n + 43\n    elif k == 44:\n        return n + 44\n    elif k == 45:\n        return n + 45\n    elif k == 46:\n        return n + 46\n    elif k == 47:\n        return n + 47\n    elif k == 48:\n        return n + 48\n    elif k == 49:\n        return n + 49\n    elif k == 50:\n        return n + 50\n    elif k == 51:\n        return n + 51\n    elif k == 52:\n        return n + 52\n    elif k == 53:\n        return n + 53\n    elif k == 54:\n        return n + 54\n    elif k == 55:\n        return n + 55\n    elif k == 56:\n        return n + 56\n    elif k == 57:\n        return n + 57\n    elif k == 58:\n        return n + 58\n    elif k == 59:\n        return n + 59\n    elif k == 60:\n        return n + 60\n    elif k == 61:\n        return n + 61\n    elif k == 62:\n        return n + 62\n    elif k == 63:\n        return n + 63\n    elif k == 64:\n        return n + 64\n    elif k == 65:\n        return n + 65\n    elif"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(width, height):\n    return width * height * (width + height) // 2\n\n# Example usage:\nwidth = 4\nheight = 3"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n, values):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            dp[j] += dp[j - i]\n    return dp[n]\n\n# Example usage"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(string):\n    return string.isalnum() == False\n\n# Test"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == string[i+1]:\n            count += 1\n    return count\n\n# Test\nstring = \"mnm\""], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr, k, n):\n    count = 0\n    for i in range(n):\n        if arr[i] == k:\n            count += 1\n    if count == 0:\n        return -1\n    for i in range(n):\n        if arr[i] == k:\n            if count == 1:\n                return arr[i]\n            count -= 1\n    return -1\n\narr = [0,1,2,3,4,5]\nk = 6\nn = len(arr)"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    char_list = list(string)\n    char_set = set()\n    for char in char_list:\n        if char in char_set:\n            return False\n        char_set.add(char)\n    return True\n\n# Test"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(lst, index):\n    \"\"\"\n    Remove a specified column from a given nested list.\n\n    Args:\n        lst (list): The nested list.\n        index (int): The index of the column to remove.\n\n    Returns:\n        list: The modified nested list.\n    \"\"\"\n    return [row[index] for row in lst]\n\n# Example usage:\nlst = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\nindex = 0"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a, d, n):\n    return a + (n-1)*d\n\n# Example usage:\na = 1\nd = 5\nn = 2"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    count = 0\n    for x in range(-r, r+1):\n        for y in range(-r, r+1):\n            if x**2 + y**2 == r**2:\n                count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(a, b):\n    return 180 - a - b\n\n# Test"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(records):\n    \"\"\"\n    Find the maximum element of all the given tuple records.\n\n    Args:\n        records (list of tuple): A list of tuples.\n\n    Returns:\n        int: The maximum element of all the given tuple records.\n    \"\"\"\n    max_val = float('-inf')\n    for record in records:\n        for val in record:\n            if val > max_val:\n                max_val = val\n    return max_val\n\n# Example usage\nrecords = [(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n# Test\nlist1 = [4,5,6]\nlist2 = [1, 2, 3]"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a, b, c):\n    # calculate the discriminant\n    d = (b**2) - (4*a*c)\n    \n    # check if the discriminant is greater than 0\n    if d > 0:\n        # calculate the roots\n        root1 = (-b + (d**0.5))/(2*a)\n        root2 = (-b - (d**0.5))/(2*a)\n        \n        # check if one root is twice of the other\n        if root1 == 2*root2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    \"\"\"\n    Returns the n\u2019th carol number.\n    \"\"\"\n    return 2**n - 1\n\n# Example usage:"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(lst):\n    \"\"\"\n    Remove empty lists from a given list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        list: A list of lists with empty lists removed.\n    \"\"\"\n    return [item for item in lst if item]\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(lst):\n    count_dict = {}\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    max_item = max(count_dict, key=count_dict.get)\n    return max_item\n\ndef max_occurrences_count(lst):\n    count_dict = {}\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return max(count_dict.values())\n\ndef max_occurrences_count_list(lst):\n    count_list = []\n    for item in lst:\n        count_list.append(lst.count(item))\n    return max(count_list)\n\ndef max_occurrences_list(lst):\n    count_list = []\n    for item in lst:\n        count_list.append(lst.count(item))\n    return max(count_list)\n\ndef max_occurrences_list_count(lst):\n    count_dict = {}\n    for item in lst:\n        count_dict[item] = lst.count(item)\n    return max(count_dict.values())\n\nlst = [1,2,3,1,2,3,12,4,2]"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(tuple_list, k):\n    \"\"\"\n    Add k elements to each element in the tuple.\n    \"\"\"\n    return [(x + k) for x in x_list for _ in range(k)]\n\n# Example usage\ntuple_list = [(1, 3, 4), (2, 4, 6), (3, 8, 1)]\nk = 4\nresult = add_K_element(tuple_list, k)"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(binary_string):\n    \"\"\"\n    This function takes a binary string as input and returns the minimum number of flips required to make the given binary string a sequence of alternate characters.\n    \"\"\"\n    # Initialize the number of flips\n    flips = 0\n\n    # Iterate through the binary string\n    for i in range(len(binary_string)):\n        # If the current character is not alternate, increment the number of flips\n        if binary_string[i] != '1' and binary_string[i] != '0':\n            flips += 1\n        # If the current character is alternate, check if the next character is also alternate\n        elif binary_string[i] == '1' and binary_string[i+1] != '0':\n            flips += 1\n        # If the current character is alternate and the next character is not alternate, check if the next character is also alternate\n        elif binary_string[i] == '0' and binary_string[i+1] != '1':\n            flips += 1\n\n    # Return the number of flips\n    return flips\n\n# Example usage\nbinary_string = \"0001010111\""], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\ndef count_Digit(num):\n    count = 0\n    while num > 0:\n        count += 1\n        num //= 10\n    return count\n\n# Test"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest product of the pair of adjacent elements.\n    \"\"\"\n    if len(nums) < 2:\n        return None\n    max_product = nums[0] * nums[1]\n    for i in range(1, len(nums) - 1):\n        if nums[i] * nums[i+1] > max_product:\n            max_product = nums[i] * nums[i+1]\n    return max_product\n\n# Example usage:\nnums = [1,2,3,4,5,6]"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\ndef is_tree_balanced(root):\n    def check_height(node):\n        if node is None:\n            return 0\n        left_height = check_height(node.left)\n        if left_height == -1:\n            return -1\n        right_height = check_height(node.right)\n        if right_height == -1:\n            return -1\n        if abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n\n    return check_height(root) != -1\n\n# Example usage:\nroot = Node(1, Node(2, Node(3), Node(4)), Node(5))"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(t, n):\n    return tuple(t for _ in range(n))\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(l, b, h):\n    return 2*(l*b+b*h+h*l)\n\n# Test"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(tup):\n    return sorted(tup, key=lambda x: float(x[1]))\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, start, end):\n    for i in range(start, end):\n        if arr[i] != i:\n            return i\n    return end\n\n# Example usage:\narr = [0, 1, 2, 3, 4, 5, 6]\nstart, end = 0, len(arr) - 1"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\ndef heap_ascending(lst):\n    # Create a max heap\n    heap = lst[:]\n    # Create a min heap\n    min_heap = []\n    # Iterate through the list\n    for elem in lst:\n        # Push the element into the min heap\n        min_heap.append(elem)\n        # If the heap size is greater than 0\n        if len(heap) > 0:\n            # Get the maximum element from the heap\n            max_elem = heap[0]\n            # If the element is greater than the maximum element\n            if elem > max_elem:\n                # Swap the element with the maximum element\n                heap[0] = elem\n                # Push the element into the min heap\n                min_heap.append(max_elem)\n                # Pop the maximum element from the heap\n                heap.pop(0)\n    # Return the min heap\n    return min_heap\n\n# Test the function\nlst = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\ndef volume_cuboid(length, width, height):\n    return length * width * height\n\n# Example usage:"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(string):\n    if len(string) == 0:\n        return [string]\n    else:\n        permutations = []\n        for i in range(len(string)):\n            char = string[i]\n            remaining_string = string[:i] + string[i+1:]\n            for perm in permute_string(remaining_string):\n                permutations.append(char + perm)\n        return permutations\n\n# Test the function"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num, multiple):\n    return num - (num % multiple) + multiple\n\n# Example usage:\nnum = 4722\nmultiple = 10"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(tuple_list):\n    \"\"\"\n    Remove tuple elements that occur more than once and replace the duplicates with some custom value.\n\n    Args:\n        tuple_list (tuple): A tuple of elements.\n\n    Returns:\n        tuple: A tuple of elements.\n    \"\"\"\n    count_dict = {}\n    for element in tuple_list:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    result_list = []\n    for element in tuple_list:\n        if count_dict[element] == 1:\n            result_list.append(element)\n    return tuple(result_list)\n\n# Example usage:\ntuple_list = (1, 1, 4, 4, 4, 5, 5, 6, 7, 7)"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\ndef remove_Char(string, char):\n    return string.replace(char, \"\")\n\n# Test\nstring = \"aba\"\nchar = 'a'"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(lst):\n    return lst[-1:] + lst[:-1]\n\n# Example usage:\nlst = [1,2,3,4]"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(l,b,h):\n    surface_area=2*(l*b+b*h+h*l)\n    return surface_area\n\n# Test the function"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(row, col):\n    return [[0 for _ in range(col)] for _ in range(row)]\n\n# Example usage:"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\n# Example usage:\nlist_of_lists = [\n    ('Greyson Fulton', 98, 99),\n    ('Brady Kent', 97, 96),\n    ('Wyatt Knott', 91, 94),\n    ('Beau Turnbull', 94, 98)\n]\n\nsorted_list = index_on_inner_list(list_of_lists, 0)"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] <= arr[right]:\n            return left\n        left += 1\n    return right\n\n# Example usage:\narr = [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    return num | (1 << (num.bit_length() - 1))\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(arr):\n    min_val = min(arr)\n    count = arr.count(min_val)\n    return count\n\n# Test\narr = [1,2,3,4,3]"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n\n# Test the function"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    stack = []\n    count = 0\n    for char in string:\n        if char == \"[\":\n            stack.append(char)\n        elif char == \"]\":\n            if not stack or stack[-1] != \"[\":\n                count += 1\n            stack.pop()\n    return count\n\n# Test"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hex_num):\n    hex_num = hex_num.upper()\n    if hex_num[0] == '0':\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Test cases"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    Returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    return n & -n\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n# Example usage:"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(lst, string):\n    \"\"\"\n    Add a given string at the beginning of all items in a list.\n\n    Args:\n        lst (list): A list of items.\n        string (str): A string to be added at the beginning.\n\n    Returns:\n        list: A list of items with the given string added at the beginning.\n    \"\"\"\n    return [string + item for item in lst]\n\n# Example usage:\nlst = [1,2,3,4]\nstring = 'temp'\n\nresult = add_string(lst, string)"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(list1, list2, list3):\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]\n\n# Example usage:\nlist1 = [\"S001\", \"S002\", \"S003\", \"S004\"]\nlist2 = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]\nlist3 = [85, 98, 89, 92]\n\nresult = convert_list_dictionary(list1, list2, list3)"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n == 1:\n        return n\n    elif n == 2:\n        return n\n    elif n == 3:\n        return n\n    elif n == 4:\n        return n\n    elif n == 5:\n        return n\n    elif n == 6:\n        return n\n    elif n == 7:\n        return n\n    elif n == 8:\n        return n\n    elif n == 9:\n        return n\n    elif n == 10:\n        return n\n    elif n == 11:\n        return n\n    elif n == 12:\n        return n\n    elif n == 13:\n        return n\n    elif n == 14:\n        return n\n    elif n == 15:\n        return n\n    elif n == 16:\n        return n\n    elif n == 17:\n        return n\n    elif n == 18:\n        return n\n    elif n == 19:\n        return n\n    elif n == 20:\n        return n\n    elif n == 21:\n        return n\n    elif n == 22:\n        return n\n    elif n == 23:\n        return n\n    elif n == 24:\n        return n\n    elif n == 25:\n        return n\n    elif n == 26:\n        return n\n    elif n == 27:\n        return n\n    elif n == 28:\n        return n\n    elif n == 29:\n        return n\n    elif n == 30:\n        return n\n    elif n == 31:\n        return n\n    elif n == 32:\n        return n\n    elif n == 33:\n        return n\n    elif n == 34:\n        return n\n    elif n == 35:\n        return n\n    elif n == 36:\n        return n\n    elif n == 37:\n        return n\n    elif n == 38:\n        return n\n    elif n == 39:\n        return n\n    elif n == 40:\n        return n\n    elif n == 41:\n        return n\n    elif n == 42:\n        return n\n    elif n == 43:\n        return n\n    elif n == 44:\n        return n\n    elif n == 45:\n        return n\n    elif n == 46:\n        return n\n    elif n == 47:\n        return n\n    elif n == 48:\n        return n\n    elif n == 49:\n        return n\n    elif n == 50:\n        return n\n    elif n == 51:\n        return n\n    elif n == 52:\n        return n\n    elif n == 53:\n        return n\n    elif n == 54:\n        return n\n    elif n == 55:\n        return n\n    elif n == 56:\n        return n\n    elif n == 57:\n        return n\n    elif n == 58:\n        return n\n    elif n == 59:\n        return n\n    elif n == 60:\n        return n\n    elif n == 61:\n        return n\n    elif n == 62:\n        return n\n    elif n == 63:\n        return n\n    elif n == 64:\n        return n\n    elif n == 65:\n        return n\n    elif n == 66:\n        return n\n    elif n == 67:\n        return n\n    elif n == 68:\n        return n\n    elif n == 69:\n        return n\n    elif n == 70:\n        return n\n    elif n == 71:\n        return n\n    elif n == 72:\n        return n\n    elif n == 73:\n        return n\n    elif n == 74:\n        return n\n    elif n == 75:\n        return n\n    elif n == 76:\n        return n\n    elif n == 77:\n        return n\n    elif n == 78:\n        return n\n    elif n == 79:\n        return n\n    elif n == 80:\n        return n\n    elif n == 81:\n        return n\n    elif n == 82:\n        return n\n    elif n == 83:\n        return n\n    elif n == 84:\n        return n\n    elif n == 85:\n        return n\n    elif n == 86:\n        return n\n    elif n == "], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(lst):\n    return max(lst, key=len)\n\n# Test\nlst = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tuple_list):\n    return len(tuple_list) == len(set(tuple_list))\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    return None\n\n# Example usage:\nstring = \"abcabc\""], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\n\ndef check_char(string):\n    pattern = r'^.*?\\1$'\n    if re.search(pattern, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# Test"], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(num1, num2, num3):\n    \"\"\"\n    This function takes three numbers as input and returns the median of the three numbers.\n    \"\"\"\n    # Sort the numbers\n    sorted_nums = sorted([num1, num2, num3])\n    \n    # Calculate the median\n    median = (sorted_nums[0] + sorted_nums[2])/2\n    \n    return median\n\n# Example usage\nnum1 = 25\nnum2 = 55\nnum3 = 65\n\nmedian = median_numbers(num1, num2, num3)"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(nums):\n    \"\"\"\n    Compute the sum of digits of each number of a given list.\n\n    Args:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A list of sums of digits of each number of the given list.\n    \"\"\"\n    return [sum(int(x) for x in str(num)) for num in nums]\n\n# Example usage:\nnums = [10,2,56]"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(*args):\n    result = []\n    for x, y in zip(args[0], args[1]):\n        result.append(x ^ y)\n    return result\n\n# Example usage:"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(lst):\n    freq_dict = {}\n    for item in lst:\n        if tuple(item) in freq_dict:\n            freq_dict[tuple(item)] += 1\n        else:\n            freq_dict[tuple(item)] = 1\n    return freq_dict\n\n# Test\nlst = [(3, 4), (1, 2), (4, 3), (5, 6)]"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append((tuple1[i][0] + tuple2[i][0], tuple1[i][1] + tuple2[i][1]))\n    return result\n\n# Example usage:\ntuple1 = ((1, 3), (4, 5), (2, 9), (1, 10))\ntuple2 = ((6, 7), (3, 9), (1, 1), (7, 3))"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n, k, p):\n    # Base cases\n    if k == 0:\n        return 1\n    if k == n:\n        return 1\n    if k > n:\n        return 0\n\n    # Compute nCk mod p\n    result = 1\n    for i in range(1, k + 1):\n        result = (result * (n - i + 1)) % p\n    return result\n\n# Example usage\nn, k, p = 10, 2, 13"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\n\ndef is_valid_URL(url):\n    pattern = r\"^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w.-]+)+[\\w\\-._~:/?#[\\]@!$&'()*+,;=.]+$\"\n    return bool(re.match(pattern, url))\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(x, y):\n    if x < y:\n        return x\n    else:\n        return y\n\n# Test"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tuple_list, element):\n    for item in tuple_list:\n        if item == element:\n            return True\n    return False\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n# Test"], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(num):\n    \"\"\"\n    This function takes a number as input and returns the next bigger number by rearranging the digits of the given number.\n    \"\"\"\n    # Get the digits of the number\n    digits = list(str(num))\n    \n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Create the new number\n    new_num = int(''.join(sorted_digits))\n    \n    # Check if the new number is greater than the original number\n    if new_num > num:\n        return new_num\n    else:\n        return num\n\n# Example usage"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(arr1, arr2, k):\n    \"\"\"\n    This function takes two arrays and k as input and returns k number of pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    arr1.sort()\n    arr2.sort()\n    pairs = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            pairs.append([arr1[i], arr2[j]])\n            i += 1\n        else:\n            pairs.append([arr2[j], arr1[i]])\n            j += 1\n    return pairs\n\n# Example usage\narr1 = [1, 3, 7]\narr2 = [2, 4, 6]\nk = 2"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(list_of_tuples):\n    min_product = float('inf')\n    for i in range(len(list_of_tuples)):\n        for j in range(i+1, len(list_of_tuples)):\n            product = list_of_tuples[i][0] * list_of_tuples[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n\n# Example usage:\nlist_of_tuples = [(2, 7), (2, 6), (1, 8), (4, 9)]"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    min_val = lst[0]\n    for item in lst:\n        if isinstance(item, int):\n            if item < min_val:\n                min_val = item\n        elif isinstance(item, str):\n            if item < min_val:\n                min_val = item\n        else:\n            min_val = min(min_val, item)\n    return min_val\n\n# Test the function"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\ndef snake_to_camel(string):\n    \"\"\"\n    Converts the given snake case string to camel case string by using regex.\n    \"\"\"\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), string)\n\n# Example usage"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(lst):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in lst if x % 2 == 0]\n\n# Test"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(lst, n):\n    return [item[n] for item in lst]\n\n# Example usage:\nlst = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(seq1, seq2):\n    \"\"\"\n    This function checks whether the value exists in a sequence or not.\n    \"\"\"\n    for item in seq1:\n        if item in seq2:\n            return True\n    return False\n\n# Test"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair\n\n# Test\narr = [1,2,3,4,7,0,8,4]"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(n):\n    if n == 0:\n        return 0\n    elif n < 3:\n        return n\n    else:\n        return n + breakSum(n-1) + breakSum(n-2) + breakSum(n-3)\n\n# Test"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    result = []\n    for tup in tuples:\n        for i in range(len(tup)):\n            for j in range(i+1, len(tup)):\n                if tup[i] == tup[j]:\n                    result.append(tup)\n                    break\n    return result\n\n# Test"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(lst):\n    max_len = 0\n    max_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i] + lst[j]) > max_len:\n                max_len = len(lst[i] + lst[j])\n                max_sublist = lst[i] + lst[j]\n    return max_sublist\n\n# Test"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(nums):\n    \"\"\"\n    This function takes a list of numbers and rounds every number to the nearest integer.\n    Then, it calculates the total sum of the rounded numbers and multiplies it by the length of the list.\n    \"\"\"\n    total_sum = sum(nums)\n    total_sum_rounded = round(total_sum)\n    return total_sum_rounded\n\n# Example usage:\nnums = [22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    \"\"\"\n    This function calculates the sum of cubes of first n even natural numbers.\n    \"\"\"\n    return sum(i**3 for i in range(2, n+1, 2))\n\n# Example usage:"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tuple_of_str):\n    return '-'.join(str(x) for x in tuple_of_str)\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    \"\"\"\n    This function calculates the average of cubes of first n natural numbers.\n    \"\"\"\n    # Initialize sum of cubes\n    sum_of_cubes = 0\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Calculate cube of i\n        cube = i**3\n        # Add cube to sum of cubes\n        sum_of_cubes += cube\n    # Calculate average of cubes\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n\n# Example usage\nn = 2\naverage_of_cubes = find_Average_Of_Cube(n)"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(matrix, row, col):\n    if row < 0 or row >= len(matrix) or col < 0 or col >= len(matrix[0]):\n        return 0\n    if matrix[row][col] == 0:\n        return 0\n    if matrix[row][col] == 1:\n        return matrix[row][col]\n    return matrix[row][col] + max(get_maxgold(matrix, row-1, col), get_maxgold(matrix, row+1, col), get_maxgold(matrix, row, col-1), get_maxgold(matrix, row, col+1))\n\n# Test cases\nmatrix = [[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]]"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tuple_of_strings):\n    return [string[-1] for string in tuple_of_strings]\n\n# Test"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n# Test\nlst = [[1, 3], [5, 7], [1, 11], [1, 15, 7]]\nelement = 1"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(lst):\n    return list(filter(lambda x: x % 2 != 0, lst))\n\n# Test"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\ndef change_date_format(date_str):\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    match = re.search(pattern, date_str)\n    if match:\n        return match.group(3) + '-' + match.group(1) + '-' + match.group(2)\n    else:\n        return None\n\n# Example usage:"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\n# Example usage\narr = [12, 23, 4, 5, 3, 2, 12, 81, 56, 95]"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(tuple1, tuple2):\n    return tuple(x and y for x, y in zip(tuple1, tuple2))\n\n# Example usage:\ntuple1 = (10, 4, 6, 9)\ntuple2 = (5, 2, 3, 3)"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola.\n\n    Args:\n        a (float): Coefficient of x^2.\n        b (float): Coefficient of x.\n        c (float): Constant term.\n\n    Returns:\n        float: The directrix of the parabola.\n    \"\"\"\n    return -b/2/a\n\n# Example usage:"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n\n# Test\nlist1 = [1,2,3,4,5]\nlist2 = [5,6,7,8,9]"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\ndef median_trapezium(a,b,c,d):\n    \"\"\"\n    Calculate the median of a trapezium.\n    \"\"\"\n    # Calculate the total area of the trapezium\n    area = (a+b)/2 * (c+d)/2\n    # Calculate the height of the trapezium\n    height = (a+b+c+d)/4\n    # Calculate the area of the triangle\n    triangle_area = (a+b)/2 * (c+d)/2\n    # Calculate the area of the rectangle\n    rectangle_area = (a+b)*c\n    # Calculate the area of the triangle\n    triangle_area = (a+b)*d\n    # Calculate the median\n    median = (area + triangle_area + rectangle_area) / 3\n    return median\n\n# Example usage\na, b, c, d = 15, 25, 35, 45\nmedian = median_trapezium(a, b, c, d)"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, num):\n    \"\"\"\n    This function checks whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    if num > max(arr):\n        return f'No, entered number is less than those in the array'\n    else:\n        return f'Yes, entered number is greater than those in the array'\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nnum = 4"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    if text.startswith('a'):\n        if text.endswith('b'):\n            return 'Matched!'\n        else:\n            return 'Not matched!'\n    else:\n        return 'Not matched!'\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    return n % 10\n\n# Test"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef neg_nos(lst):\n    \"\"\"\n    This function prints negative numbers in a list.\n    \"\"\"\n    for i in lst:\n        if i < 0:\n            print(i)\n\n# Test the function\nneg_nos([-1,4,5,-6])"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(string):\n    result = \"\"\n    for char in string:\n        if char % 2 == 0:\n            result += char\n    return result\n\n# Test"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i][0] == lst[j][0] and lst[i][1] == lst[j][1]:\n                count += 1\n    return count\n\nlst = [(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(nums):\n    return int(''.join(map(str, nums)))\n\n# Test"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Create a dictionary to store the adverb and its position\n    adverb_dict = {}\n    \n    # Iterate through the words\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if word.endswith(\"ly\"):\n            # Store the adverb and its position\n            adverb_dict[word] = (i, len(words) - 1)\n    \n    # Return the dictionary\n    return adverb_dict\n\n# Example usage:\nsentence = \"clearly!! we can see the sky\"\nadverb_positions = find_adverb_position(sentence)\nfor adverb, position in adverb_positions.items():\n    print(adverb, \":\", position)\n# Output:\n# clearly : (0, 7)\n# can : (1, 10)\n# see : (2, 11)\n# the : (3, 12)\n# sky : (4, 13)\n#"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(side):\n    \"\"\"\n    Calculate the surface area of a cube.\n    \"\"\"\n    return 6 * side**2\n\n# Example usage:\nside = 5\nsurfacearea = surfacearea_cube(side)"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count / len(arr)\n\n# Test\narr = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number from the list.\n    \"\"\"\n    # Initialize the largest negative number\n    largest_neg = float('-inf')\n    \n    # Iterate through the list\n    for num in lst:\n        # Check if the number is negative\n        if num < 0:\n            # Update the largest negative number\n            largest_neg = max(largest_neg, num)\n    \n    # Return the largest negative number\n    return largest_neg\n\n# Example usage\nlst = [1,2,3,-4,-6]"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(lst, k):\n    return ', '.join([str(x) for x in lst[k:]])\n\n# Test"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append((tuple1[i][0] * tuple2[i][0], tuple1[i][1] * tuple2[i][1]))\n    return result\n\n# Test\ntuple1 = ((1, 3), (4, 5), (2, 9), (1, 10))\ntuple2 = ((6, 7), (3, 9), (1, 1), (7, 3))"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(list_of_elements, tuple_of_elements):\n    count = 0\n    for element in list_of_elements:\n        if element in tuple_of_elements:\n            count += 1\n    return count\n\nlist_of_elements = ['a', 'a', 'c', 'b', 'd']\ntuple_of_elements = ('a', 'b')\n"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return list(map(lambda x: x**3, nums))\n\n# Test"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers.\n    \"\"\"\n    perrin_nums = [0, 1, 2]\n    for i in range(3, n+1):\n        perrin_nums.append(perrin_nums[i-2] + perrin_nums[i-3])\n    return perrin_nums[-1]\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return 'No'\n    else:\n        return 'Yes'\n\n# Test"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(string_list, size):\n    return [string for string in string_list if len(string) >= size]\n\n# Example usage\nstring_list = ['Python', 'list', 'exercises', 'practice', 'solution']\nsize = 8\nresult = extract_string(string_list, size)"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\nimport re\n\ndef remove_whitespaces(string):\n    return re.sub(r'\\s+', '', string)\n\n# Example usage:"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount, loss):\n    if amount < loss:\n        return amount - loss\n    else:\n        return None\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    \"\"\"\n    This function calculates the sum of even factors of a number.\n    \"\"\"\n    # Initialize sum\n    sum = 0\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Check if i is a factor of n\n        if n % i == 0:\n            # Check if i is even\n            if i % 2 == 0:\n                # Add i to sum\n                sum += i\n    # Return sum\n    return sum\n\n# Test"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    \"\"\"\n    Returns a string containing the matched word.\n    \"\"\"\n    return \"Found a match!\"\n"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\ndef check_monthnumb_number(month):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n    \"\"\"\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    else:\n        return False\n\n# Example usage:"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(string_list):\n    \"\"\"\n    This function takes a list of strings as input and returns a new list of strings\n    with the strings in reverse order.\n    \"\"\"\n    return list(reversed(string_list))\n\n# Example usage\nstring_list = ['Red', 'Green', 'Blue', 'White', 'Black']"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(lst):\n    min_len = len(lst)\n    min_lst = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) + len(lst[j]) < min_len:\n                min_len = len(lst[i]) + len(lst[j])\n                min_lst = [lst[i], lst[j]]\n    return min_lst\n\n# Test"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(length, width):\n    return length * width\n\n# Test"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\n\ndef remove_uppercase(string):\n    return re.sub(r'[A-Z]', '', string)\n\n# Example usage:"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(lst):\n    return [x[0] for x in lst]\n\n# Test"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(lst):\n    if len(lst) == 0:\n        return [[]]\n    else:\n        result = []\n        for i in range(len(lst)):\n            element = lst[i]\n            rest = lst[:i] + lst[i+1:]\n            for comb in combinations_list(rest):\n                result.append([element] + comb)\n        return result\n\n# Test"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product *= num\n        max_product = max(max_product, current_product)\n        if current_product < 0:\n            current_product = 1\n    return max_product\n\n# Example usage\narr = [1, -2, -3, 0, 7, -8, -2]"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dictionary, value):\n    return all(x == value for x in dictionary.values())\n\n# Example usage:\ndictionary = {'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}\nvalue = 10"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(dictionary):\n    \"\"\"\n    Drop empty items from a given dictionary.\n\n    Args:\n        dictionary (dict): The dictionary to be processed.\n\n    Returns:\n        dict: The dictionary with empty items dropped.\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}\n\n# Example usage"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, n):\n    \"\"\"\n    This function finds the peak element in the given array.\n    \"\"\"\n    # Check if the array is empty\n    if n == 0:\n        return None\n\n    # Check if the array has only one element\n    if n == 1:\n        return arr[0]\n\n    # Check if the array has two elements\n    if n == 2:\n        if arr[0] > arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n\n    # Initialize the left and right pointers\n    left = 0\n    right = n - 1\n\n    # Find the peak element\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < arr[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid\n\n    # Return the peak element\n    return arr[left]\n\n# Example usage\narr = [1, 3, 20, 4, 1, 0]\nn = len(arr)"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(decimal):\n    octal = \"\"\n    while decimal > 0:\n        remainder = decimal % 8\n        octal += str(remainder)\n        decimal //= 8\n    return octal[::-1]\n\n# Test"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(nums, k):\n    \"\"\"\n    Given an array of integers and an integer k, find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    nums.sort(reverse=True)\n    return max(nums[:k]) * max(nums[k+1:k+k+1]) * max(nums[k+k+1:])\n\n# Example usage:\nnums = [3, 100, 4, 5, 150, 6]\nk = 6"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    \"\"\"\n    Args:\n    prices (list): List of stock prices\n    k (int): Maximum number of transactions\n\n    Returns:\n    int: Maximum profit\n    \"\"\"\n    if k > len(prices) // 2:\n        return max(0, max(prices) - min(prices))\n\n    dp = [[0] * (k + 1) for _ in range(len(prices) + 1)]\n    for i in range(1, len(prices) + 1):\n        dp[i][0] = 0\n        for j in range(1, min(i + 1, k + 1)):\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + prices[i - 1] - prices[i - 1 - j])\n    return dp[-1][-1]\n\n# Example usage\nprices = [1, 5, 2, 3, 7, 6, 4, 5]\nk = 3"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tuples):\n    result = []\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            result.append(tuples[i] + tuples[j])\n    return result\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr, n, m):\n    \"\"\"\n    This function takes an array of integers, n and m as input and returns the remainder of array multiplication divided by n.\n    \"\"\"\n    # Calculate the product of all elements in the array\n    product = 1\n    for num in arr:\n        product *= num\n    # Calculate the remainder of the product divided by n\n    remainder = product % n\n    # Calculate the remainder of the product divided by m\n    remainder_m = product % m\n    # Calculate the remainder of the product divided by n and m\n    remainder_nm = remainder % (n * m)\n    return remainder_nm\n\n# Test the function\narr = [ 100, 10, 5, 25, 35, 14 ]\nn = 6\nm = 11"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(lst):\n    for i in range(len(lst)-1):\n        if lst[i] + 1 == lst[i+1]:\n            return True\n    return False\n\n# Test"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(list_of_tuples, target_tuple):\n    \"\"\"\n    This function takes a list of tuples and a target tuple as input and returns a tuple of elements\n    that are present in both the list of tuples and the target tuple irrespective of their order.\n    \"\"\"\n    # Create a set from the target tuple\n    target_set = set(target_tuple)\n    \n    # Create a set from the list of tuples\n    list_of_tuples_set = set(tuple for tuple in list_of_tuples)\n    \n    # Find the intersection of the two sets\n    intersection_set = list(list_of_tuples_set & target_set)\n    \n    # Create a list of tuples from the intersection set\n    intersection_list = [list(tuple) for tuple in intersection_set]\n    \n    return intersection_list\n\nlist_of_tuples = [(3, 4), (5, 6), (9, 10), (4, 5)]\ntarget_tuple = (5, 4)\n"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(string, char, replacement):\n    \"\"\"\n    Replaces all occurrences of char in string with replacement.\n    \"\"\"\n    return string.replace(char, replacement)\n\n# Example usage\nstring = \"polygon\"\nchar = 'y'\nreplacement = 'l'\n\nresult = replace_char(string, char, replacement)"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n# Example usage:\ncounter = {'Math':81, 'Physics':83, 'Chemistry':87}\nsorted_counter = sort_counter(counter)"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of the largest and smallest value in the array.\n    \"\"\"\n    return max(arr) + min(arr)\n\n# Example usage:\narr = [1,2,3]"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(string):\n    return string.lower() == string\n\n# Test"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with lowercase substrings removed.\n    \"\"\"\n    return string.replace(\"python\", \"\").replace(\"java\", \"\").replace(\"c++\", \"\").replace(\"javascript\", \"\")\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(num):\n    return num // 10 % 10\n\n# Test"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = max(char_count.values())\n    max_char = [char for char, count in char_count.items() if count == max_count]\n    return max_char\n\n# Example usage:\nstring = \"data\""], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(nums, target, start):\n    if target == 0:\n        return True\n    if target < 0 or len(nums) == 0:\n        return False\n    if nums[start] == target:\n        return True\n    return is_subset_sum(nums, target - nums[start], start + 1) or is_subset_sum(nums, target, start + 1)\n\n# Example usage:\nnums = [3, 34, 4, 12, 5, 2]\ntarget = 9\nstart = 0"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\nimport re\n\ndef find_sequences(string):\n    pattern = r\"([A-Z])([a-z]*)\"\n    return re.search(pattern, string).group()\n"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    \"\"\"\n    This function returns the first natural number whose factorial is divisible by x.\n    \"\"\"\n    for i in range(1, x + 1):\n        if factorial(i) % x == 0:\n            return i\n    return None\n\ndef factorial(x):\n    \"\"\"\n    This function returns the factorial of x.\n    \"\"\"\n    result = 1\n    for i in range(1, x + 1):\n        result *= i\n    return result\n\n# Example usage\nx = 10\nresult = first_Factorial_Divisible_Number(x)"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(tuple1, tuple2):\n    return [item for item in tuple1 if item not in tuple2]\n\n# Example usage:\ntuple1 = [('Hello', 'dude'), ('How', 'are'), ('you', '?')]\ntuple2 = [('Hello', 'dude'), ('How', 'are')]\n\nresult = remove_matching_tuple(tuple1, tuple2)"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, n):\n    \"\"\"\n    This function takes an array of integers and returns the largest palindromic number in the given array.\n    \"\"\"\n    # Initialize the largest palindrome with the first element of the array\n    largest_palindrome = arr[0]\n\n    # Iterate through the array\n    for i in range(1, n):\n        # Check if the current element is a palindrome\n        if is_palindrome(arr[i]):\n            # Check if the current element is larger than the largest palindrome\n            if arr[i] > largest_palindrome:\n                # Update the largest palindrome\n                largest_palindrome = arr[i]\n\n    # Return the largest palindrome\n    return largest_palindrome\n\ndef is_palindrome(num):\n    \"\"\"\n    This function checks if a number is a palindrome.\n    \"\"\"\n    # Convert the number to a string\n    str_num = str(num)\n\n    # Iterate through the string\n    for i in range(len(str_num) // 2):\n        # Check if the characters at the start and end of the string are equal\n        if str_num[i] != str_num[-i-1]:\n            # If not, return False\n            return False\n\n    # If all characters are equal, return True\n    return True\n\n# Example usage\narr = [1, 232, 54545, 999991]\nn = len(arr)"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Compute binomial probability for the given number.\n    \"\"\"\n    return (p**k) * ((1-p)**(n-k))\n"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[-1])\n\n# Test\nlst = [(1, 3), (3, 2), (2, 1)]"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\nimport math\ndef area_pentagon(a):\n    return (a*a*math.sqrt(5*(5+2*math.sqrt(5))))/4\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(arr):\n    max_val = max(arr)\n    count = arr.count(max_val)\n    return count\n\n# Test\narr = [1,2,3,4,4]"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(tuple_list):\n    \"\"\"\n    Extract all the pairs which are symmetric in the given tuple list.\n    \"\"\"\n    symmetric_pairs = set()\n    for i in range(len(tuple_list) - 1):\n        for j in range(i + 1, len(tuple_list)):\n            if tuple_list[i][0] == tuple_list[j][1] and tuple_list[i][1] == tuple_list[j][0]:\n                symmetric_pairs.add(tuple(tuple_list[i]))\n                symmetric_pairs.add(tuple(tuple_list[j]))\n    return symmetric_pairs\n\n# Test\ntuple_list = [(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a, r, n):\n    \"\"\"\n    This function calculates the sum of geometric progression series.\n    \"\"\"\n    return a * (r**(n-1))\n\n# Example usage:\na = 1\nr = 2\nn = 5"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\narr = [1,2,3,5,8]\ntarget = 6"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary_tuple):\n    binary_string = ''.join(str(x) for x in binary_tuple)\n    return int(binary_string, 2)\n\n# Example usage:\nbinary_tuple = (1, 1, 0, 1, 0, 0, 1)"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nimport re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string by using regex.\n\n    Args:\n    string (str): The input string.\n\n    Returns:\n    str: The string with lowercase substrings removed.\n    \"\"\"\n    return re.sub(r'[a-z]', '', string)\n\n# Example usage\nstring = 'KDeoALOklOOHserfLoAJSIskdsf'\nresult = remove_lowercase(string)"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nimport heapq\n\ndef heap_queue_smallest(nums, k):\n    \"\"\"\n    This function finds the k smallest integers from a given list of numbers using heap queue algorithm.\n\n    Args:\n    nums (list): A list of integers.\n    k (int): The number of smallest integers to find.\n\n    Returns:\n    list: A list of k smallest integers.\n    \"\"\"\n    # Create a min heap\n    min_heap = []\n    # Iterate through the list of numbers\n    for num in nums:\n        # Push the number into the min heap\n        heapq.heappush(min_heap, num)\n        # If the size of the min heap is greater than k, pop the largest element\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    # Return the k smallest integers from the min heap\n    return min_heap\n\n# Example usage\nnums = [25, 35, 22, 85, 14, 65, 75, 25, 58]\nk = 3"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\nimport math\ndef surfacearea_cone(radius, height):\n    base_area = math.pi * radius**2\n    lateral_area = math.pi * radius * math.sqrt(radius**2 + height**2)\n    return base_area + lateral_area\n\n# Example usage:\nradius = 5\nheight = 12"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\nimport math\n\ndef diameter_circle(radius):\n    \"\"\"\n    Calculate the diameter of a circle.\n\n    Args:\n        radius (float): The radius of the circle.\n\n    Returns:\n        float: The diameter of the circle.\n    \"\"\"\n    return 2 * radius\n\n# Example usage:\nradius = 10\ndiameter = diameter_circle(radius)"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(lst):\n    return ' '.join(lst)\n\n# Test the function\nlst = ['hello','there','have','a','rocky','day']"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(num1, num2):\n    \"\"\"\n    This function finds the common divisor between two numbers in a given pair.\n    \"\"\"\n    # Find the greatest common divisor of two numbers\n    gcd = gcd_func(num1, num2)\n    # Return the common divisor\n    return gcd\n\ndef gcd_func(num1, num2):\n    \"\"\"\n    This function finds the greatest common divisor of two numbers.\n    \"\"\"\n    # If both numbers are equal, return the number\n    if num1 == num2:\n        return num1\n    # If one number is zero, return the other number\n    elif num1 == 0:\n        return num2\n    # If both numbers are negative, make them positive\n    elif num1 < 0:\n        num1 = num1 * -1\n    elif num2 < 0:\n        num2 = num2 * -1\n    # If both numbers are positive, find the greatest common divisor\n    elif num1 > num2:\n        return gcd_func(num1 - num2, num2)\n    else:\n        return gcd_func(num1, num2 - num1)\n\n# Test the function"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(num1, num2):\n    return num1 % num2\n\n# Example usage:"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(nums):\n    result = []\n    for i in range(len(nums)-1):\n        result.append(nums[i] + nums[i+1])\n    return result\n\n# Test"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    return n * (n + 1) * (n + 2) // 6\n\n# Test"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a new array \n    with all zeroes moved to the end of the array.\n    \"\"\"\n    # Initialize two pointers, one at the start of the array and one at the \n    # end of the array\n    start = 0\n    end = len(arr) - 1\n\n    # Iterate through the array from start to end\n    while start < end:\n        # If the element at the start is zero, move it to the end\n        if arr[start] == 0:\n            arr[start], arr[end] = arr[end], arr[start]\n            # Move the start pointer one step forward\n            start += 1\n            # Move the end pointer one step backward\n            end -= 1\n        # If the element at the start is not zero, move it to the start\n        elif arr[start] != 0:\n            start += 1\n        # If the element at the end is zero, move it to the start\n        elif arr[end] == 0:\n            arr[start], arr[end] = arr[end], arr[start]\n            # Move the start pointer one step forward\n            start += 1\n            # Move the end pointer one step backward\n            end -= 1\n        # If the element at the end is not zero, move it to the end\n        elif arr[end] != 0:\n            end -= 1\n    return arr\n\n# Example usage\narr = [6, 0, 8, 2, 3, 0, 4, 0, 1]"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k)\n\n# Example usage:"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words, remove_list):\n    \"\"\"\n    Remove specific words from a given list.\n\n    Args:\n    words (list): A list of words.\n    remove_list (list): A list of words to be removed.\n\n    Returns:\n    list: A list of words without the specified words.\n    \"\"\"\n    return [word for word in words if word not in remove_list]\n\n# Example usage:\nwords = ['red', 'green', 'blue', 'white', 'black', 'orange']\nremove_list = ['white', 'orange']\nresult = remove_words(words, remove_list)"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1, list2):\n    return sorted(list1) == sorted(list2)\n\nlist1 = [\"red\",\"green\",\"black\",\"orange\"]\nlist2 = [\"red\",\"pink\",\"green\",\"white\",\"black\"]\n"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    \"\"\"\n    This function calculates the average of odd numbers till a given odd number.\n    \"\"\"\n    count = 0\n    sum_odd = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum_odd += i\n            count += 1\n    if count == 0:\n        return 0\n    return sum_odd/count\n"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    for num in arr:\n        for j in range(num, k + 1):\n            dp[j] += dp[j - num]\n    return dp[k]\n\n# Test"]]
