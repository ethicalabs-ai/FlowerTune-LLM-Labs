[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\ndef remove_Occ(string, char):\n    first_occurrence = string.find(char)\n    last_occurrence = string.rfind(char)\n    if first_occurrence == -1:\n        return string\n    else:\n        return string[:first_occurrence] + string[last_occurrence+1:]\n\n# Test\nstring = \"hello\"\nchar = \"l\""], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\ndef sort_matrix(matrix):\n    \"\"\"\n    Sort a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list of list): A matrix of integers.\n\n    Returns:\n        list of list: A sorted matrix.\n    \"\"\"\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix according to the sum of its rows\n    sorted_matrix = sorted(matrix, key=lambda x: x[0][0] + x[0][1] + x[0][2])\n\n    # Return the sorted matrix\n    return sorted_matrix\n\n# Example usage:\nmatrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\nsorted_matrix = sort_matrix(matrix)"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\ndef count_common(words):\n    \"\"\"\n    Count the most common words in a dictionary.\n\n    Args:\n    words (list): A list of words.\n\n    Returns:\n    list: A list of tuples, each tuple contains a word and its count.\n    \"\"\"\n    # Create a dictionary to store the count of each word\n    count_dict = {}\n    # Iterate through the words\n    for word in words:\n        # If the word is already in the dictionary, increment its count\n        if word in count_dict:\n            count_dict[word] += 1\n        # If the word is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[word] = 1\n    # Sort the dictionary by its values in descending order\n    sorted_dict = sorted(count_dict.items(), key=lambda x: x[1], reverse=True)\n    # Return the list of tuples\n    return sorted_dict\n\n# Example usage\nwords = ['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\ndef find_Volume(base, height, side):\n    return base * height * side / 2\n\n# Example usage"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\ndef split_lowerstring(string):\n    \"\"\"\n    Split a string at lowercase letters.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of strings, each containing a lowercase letter.\n    \"\"\"\n    return [char for char in string if char.islower()]\n\n# Example usage:"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\ndef find_lowercase_underscore(text):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input string.\n\n    Returns:\n        str: The longest sequence of lowercase letters joined with an underscore.\n    \"\"\"\n    # Initialize the longest sequence\n    longest_sequence = \"\"\n    # Initialize the current sequence\n    current_sequence = \"\"\n    # Iterate through the characters in the string\n    for char in text:\n        # If the character is a lowercase letter\n        if char.islower():\n            # Append the character to the current sequence\n            current_sequence += char\n        # If the current sequence is longer than the longest sequence\n        elif len(current_sequence) > len(longest_sequence):\n            # Update the longest sequence\n            longest_sequence = current_sequence\n        # If the current character is not a lowercase letter\n        else:\n            # Reset the current sequence\n            current_sequence = \"\"\n    # Return the longest sequence\n    return longest_sequence\n\n# Example usage\ntext = \"aab_cbbbc\""], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\ndef square_perimeter(side_length):\n    return 4*side_length\n\n# Example usage"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\ndef remove_dirty_chars(string1, string2):\n    \"\"\"\n    This function removes characters from the first string which are present in the second string.\n    \"\"\"\n    # Create a set of characters from the second string\n    chars_from_second_string = set(string2)\n    # Create a set of characters from the first string\n    chars_from_first_string = set(string1)\n    # Create a set of characters which are common to both strings\n    common_chars = chars_from_first_string & chars_from_second_string\n    # Create a new string with common characters\n    new_string = string1.replace('', '')\n    # Return the new string\n    return new_string\n\n# Example usage\nstring1 = \"probasscurve\"\nstring2 = \"pros\""], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\ndef test_duplicate(arr):\n    \"\"\"\n    This function will return True if the given array contains any duplicate element.\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return True\n    return False\n\n# Example usage\narr = [1,2,3,4,5]"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\ndef is_woodall(num):\n    \"\"\"\n    Check if the given number is woodball or not.\n    \"\"\"\n    # Check if the number is divisible by 3\n    if num % 3 == 0:\n        # Check if the number is divisible by 7\n        if num % 7 == 0:\n            # Check if the number is divisible by 2\n            if num % 2 == 0:\n                return True\n    return False\n\n# Test the function"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\ndef multiples_of_num(n, m):\n    return [i for i in range(n, n+m*m, n)]\n\n# Test"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n\ndef find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n\n# Test the function\narr = [1, 2, 3, 4, 4, 5]"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\ndef maximum_Sum(list_of_lists):\n    max_sum = 0\n    for sublist in list_of_lists:\n        for num in sublist:\n            max_sum = max(max_sum, num)\n    return max_sum\n\nlist_of_lists = [[1,2,3],[4,5,6],[10,11,12],[7,8,9]]"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\ndef binary_to_decimal(binary_num):\n    decimal_num = 0\n    for i in range(len(binary_num)):\n        decimal_num += (binary_num[i] * (2 ** (len(binary_num) - i - 1)))\n    return decimal_num\n\n# Example usage\nbinary_num = \"100\"\ndecimal_num = binary_to_decimal(binary_num)"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\ndef find_Product(arr, target):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    product = 1\n    for num in count_dict:\n        if count_dict[num] == 1:\n            product *= num\n    if target in count_dict:\n        product *= target\n    return product\n\n# Test\narr = [1,1,2,3]\ntarget = 4"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\ndef check_k_elements(tuple_list, k):\n    return len(set(tuple_list)) == k\n\n# Example usage\ntuple_list = [(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )]\nk = 4"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\ndef remove_digits(strings):\n    return [''.join([x for x in s if x.isalpha()]) for s in strings]\n\n# Example usage\nstrings = ['4words', '3letters', '4digits']\nresult = remove_digits(strings)"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\ndef binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\ndef get_Odd_Occurrence(lst, n):\n    count_dict = {}\n    for i in lst:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    odd_count = 0\n    for i in count_dict:\n        if count_dict[i] % 2 != 0:\n            odd_count += 1\n    if odd_count == 0:\n        return None\n    for i in lst:\n        if count_dict[i] % 2 != 0:\n            return i\n\n# Test\nlst = [1,2,3,1,2,3,1]\nn = 7"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == string[i+1]:\n            count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\nimport heapq\n\ndef find_most_frequent(lists, k):\n    \"\"\"\n    Find the top k integers that occur most frequently from given lists of sorted and distinct integers.\n    \"\"\"\n    # Initialize a heap\n    heap = []\n    # Iterate through each list\n    for lst in lists:\n        # Iterate through each element in the list\n        for num in lst:\n            # Push the number onto the heap\n            heapq.heappush(heap, num)\n        # Pop the top k elements from the heap\n        for _ in range(k):\n            # Pop the top element from the heap\n            heapq.heappop(heap)\n    # Return the top k elements from the heap\n    return heap\n\n# Example usage\nlists = [[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]]\nk = 3"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\ndef max_Prime_Factors(n):\n    \"\"\"\n    This function takes a number as input and returns the largest prime factor of that number.\n    \"\"\"\n    # Initialize the largest prime factor\n    largest_prime_factor = 1\n    \n    # Iterate from 2 to the square root of the number\n    for i in range(2, int(n**0.5) + 1):\n        # Check if i is a factor of the number\n        if n % i == 0:\n            # Check if i is a prime factor\n            if is_Prime(i):\n                # Update the largest prime factor\n                largest_prime_factor = max(largest_prime_factor, i)\n            # Check if i is a factor of the number\n            if n % i != 0:\n                # Check if i is a prime factor\n                if is_Prime(i):\n                    # Update the largest prime factor\n                    largest_prime_factor = max(largest_prime_factor, i)\n    # Return the largest prime factor\n    return largest_prime_factor\n\ndef is_Prime(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is a prime number, False otherwise.\n    \"\"\"\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    # Check if the number is 2\n    if n == 2:\n        return True\n    # Check if the number is even\n    if n % 2 == 0:\n        return False\n    # Check odd factors\n    for i in range(3, int(n**0.5) + 1, 2):\n        # Check if i is a factor of the number\n        if n % i == 0:\n            return False\n    # Return True if the number is prime\n    return True\n\n# Example usage"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\ndef decimal_To_Binary(num):\n    if num == 0:\n        return '0'\n    elif num == 1:\n        return '1'\n    else:\n        return decimal_To_Binary(num // 2) + str(num % 2)\n\n# Test"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\ndef find_missing(arr, n):\n    for i in range(len(arr)):\n        if arr[i] != i:\n            return i\n    return n\n\n# Example usage:\narr = [1,2,3,5]\nn = 4"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\ndef find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n    \"\"\"\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    return n * find_rect_num(n - 1)\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\ndef find_Nth_Digit(num1, num2, n):\n    \"\"\"\n    This function finds the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n    # Calculate the decimal part of the fraction\n    decimal_part = num1 / num2\n    # Convert the decimal part to string\n    decimal_str = str(decimal_part)\n    # Get the nth digit\n    nth_digit = int(decimal_str[n-1])\n    return nth_digit\n\n# Example usage\nnum1, num2, n = 1, 2, 1"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n\ndef sort_mixed_list(lst):\n    \"\"\"\n    Sort a given mixed list of integers and strings.\n\n    Args:\n        lst (list): A list of integers and strings.\n\n    Returns:\n        list: A sorted list of integers and strings.\n    \"\"\"\n    # Convert strings to integers\n    lst = [x for x in lst if isinstance(x, str)] + [int(x) for x in lst if isinstance(x, int)]\n\n    # Sort the list\n    lst.sort()\n\n    # Return the sorted list\n    return lst\n\n# Example usage\nlst = [19,'red',12,'green','blue', 10,'white','green',1]"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\ndef div_even_odd(lst):\n    even_nums = [num for num in lst if num % 2 == 0]\n    odd_nums = [num for num in lst if num % 2 != 0]\n    return even_nums[0] // odd_nums[0]\n\n# Test"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\ndef rearrange_string(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in string:\n        if char_count[char] == 1:\n            del char_count[char]\n    return ''.join(sorted(char_count.keys()))\n\n# Test"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\nfrom collections import Counter\n\ndef freq_element(lst):\n    return Counter(lst)\n\nlst = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\ndef filter_evennumbers(lst):\n    return list(filter(lambda x: x % 2 == 0, lst))\n\n# Test"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\ndef find_Sum(arr, n):\n    count_dict = {}\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    count_list = list(count_dict.values())\n    return sum(x for x in count_list if x > n)\n\n# Test\narr = [1,2,3,1,1,4,5,6]\nn = 8"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\nimport re\n\ndef text_match(text):\n    pattern = r\"a[a-z]+b[a-z]+\"\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"aab_cbbbc\""], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(text, pattern):\n    \"\"\"\n    Returns True if the pattern is found at the beginning of the text.\n    \"\"\"\n    if text.startswith(pattern):\n        return True\n    else:\n        return False\n\n# Example usage\ntext = \"python is a programming language\"\npattern = \"python\"\n\nresult = text_match_string(text, pattern)"], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\ndef get_gcd(arr):\n    gcd = arr[0]\n    for num in arr[1:]:\n        gcd = gcd * num // gcd\n    return gcd\n\n# Example usage:"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n\ndef test_distinct(nums):\n    return len(nums) == len(set(nums))\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\ndef compute_Last_Digit(a, b):\n    \"\"\"\n    Compute the last digit of factorial of a divided by factorial of b.\n    \"\"\"\n    # Calculate factorial of a and b\n    factorial_a = 1\n    for i in range(1, a + 1):\n        factorial_a *= i\n    factorial_b = 1\n    for i in range(1, b + 1):\n        factorial_b *= i\n    # Calculate last digit of factorial of a\n    last_digit_a = factorial_a % 10\n    # Calculate last digit of factorial of b\n    last_digit_b = factorial_b % 10\n    # Calculate last digit of factorial of a divided by factorial of b\n    last_digit_div = (last_digit_a * last_digit_b) % 10\n    return last_digit_div\n\n# Example usage"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\ndef odd_bit_set_number(num):\n    return num | (1 << (num.bit_length() - 1))\n\n# Example usage:"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef extract_first_or_specified_element(lst, specified_element):\n    \"\"\"\n    Extract every first or specified element from a given two-dimensional list.\n\n    Args:\n        lst (list): A two-dimensional list.\n        specified_element (int): The index of the element to extract.\n\n    Returns:\n        list: A list of extracted elements.\n    \"\"\"\n    return [item[specified_element] for item in lst]\n\n# Example usage:\nlst = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]\nspecified_element = 0\n\nresult = extract_first_or_specified_element(lst, specified_element)"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\ndef min_length_list(lst):\n    return min(lst, key=len)\n\n# Test"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\ndef check_equilateral(a,b,c):\n    if a == b == c:\n        return True\n    else:\n        return False\n\n# Test"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(base, height):\n    return base * height\n\n# Test"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\ndef check_Equality(string):\n    if string[0] == string[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n# Test"], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\ndef counting_sort(arr):\n    max_val = max(arr)\n    count_arr = [0] * (max_val + 1)\n    for num in arr:\n        count_arr[num] += 1\n    sorted_arr = []\n    for i in range(max_val + 1):\n        sorted_arr.extend([i] * count_arr[i])\n    return sorted_arr\n\n# Example usage\narr = [1, 23, 4, 5, 6, 7, 8]\nsorted_arr = counting_sort(arr)"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(a, r, n):\n    return a * (r ** (n - 1))\n\n# Test"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\ndef check(n):\n    rev = 0\n    while n > 0:\n        rev = rev * 10 + n % 10\n        n //= 10\n    return n == 2 * rev - 1\n\n# Test"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\ndef find_Max_Num(nums, n):\n    \"\"\"\n    This function takes a list of digits and a number of digits as input\n    and returns the largest number that can be formed with the given digits.\n    \"\"\"\n    # Sort the list of digits in descending order\n    nums.sort(reverse=True)\n    # Initialize the result\n    result = 0\n    # Iterate over the list of digits\n    for i in range(n):\n        # Add the current digit to the result\n        result += nums[i] * (10 ** (n - i - 1))\n    # Return the result\n    return result\n\n# Example usage\nnums = [1, 2, 3]\nn = 3"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\ndef opposite_Signs(x, y):\n    if x * y < 0:\n        return True\n    else:\n        return False\n\n# Test cases"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\ndef is_octagonal(n):\n    \"\"\"\n    Returns True if n is an octagonal number, False otherwise.\n    \"\"\"\n    return n == sum(i * (3 - i) for i in range(1, n + 1))\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\ndef max_len_sub(arr, target):\n    \"\"\"\n    This function finds the maximum length of the subsequence with difference between adjacent elements for the given array.\n    \"\"\"\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] - arr[j] == target:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\narr = [2, 5, 6, 3, 7, 6, 5, 8]\ntarget = 8"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\ndef count_Substrings(string, n):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if sum(int(x) for x in string[i:j]) == j-i:\n                count += 1\n    return count\n\n# Example usage\nstring = '112112'\nn = 6"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\ndef smallest_num(lst):\n    return min(lst)\n\n# Test"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\ndef max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n    tuple_list (list): A list of tuples.\n\n    Returns:\n    int: The maximum difference between available pairs.\n    \"\"\"\n    # Sort the tuple list\n    tuple_list.sort(key=lambda x: x[1])\n\n    # Initialize the maximum difference\n    max_diff = 0\n\n    # Iterate through the tuple list\n    for i in range(len(tuple_list) - 1):\n        # Calculate the difference between the current and next elements\n        diff = tuple_list[i][1] - tuple_list[i + 1][1]\n\n        # Update the maximum difference if the difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n\n# Example usage\ntuple_list = [(3, 5), (1, 7), (10, 3), (1, 2)]"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\ndef subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n# Output: [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99)])\n# Output: [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98)])\n# Output: [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98), ('Physics', 95)])\n# Output: [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98), ('Physics', 95)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98), ('Physics', 95), ('Biology', 96)])\n# Output: [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98), ('Physics', 95), ('Biology', 96)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98), ('Physics', 95), ('Biology', 96), ('Chemistry', 97)])\n# Output: [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98), ('Physics', 95), ('Biology', 96), ('Chemistry', 97)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98), ('Physics', 95), ('Biology', 96), ('Chemistry', 97), ('Mathematics', 98)])\n# Output: [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98), ('Physics', 95), ('Biology', 96), ('Chemistry', 97), ('Mathematics', 98)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98), ('Physics', 95), ('Biology', 96), ('Chemistry', 97), ('Mathematics', 98), ('Geography', 99)])\n# Output: [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98), ('Physics', 95), ('Biology', 96), ('Chemistry', 97), ('Mathematics', 98), ('Geography', 99)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98), ('Physics', 95), ('Biology', 96), ('Chemistry', 97), ('Mathematics', 98), ('Geography', 99), ('Geography', 99)])\n# Output: [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98), ('Physics', 95), ('Biology', 96), ('Chemistry', 97), ('Mathematics', 98), ('Geography', 99), ('Geography', 99)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98), ('Physics', 95), ('Biology', 96), ('Chemistry', 97), ('Mathematics', 98), ('Geography', 99), ('Geography', 99), ('Geography', 99)])\n# Output: [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98), ('Physics', 95), ('Biology', 96), ('Chemistry', 97), ('Mathematics', 98), ('Geography', 99), ('Geography', 99), ('Geography', 99)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98), ('Physics', 95), ('Biology', 96), ('Chemistry', 97), ('Mathematics', 98), ('Geography', 99), ('Geography', 99), ('Geography', 99), ('Geography', 99)])\n# Output: [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98), ('Physics', 95), ('Biology', 96), ('Chemistry', 97), ('Mathematics', 98), ('Geography', 99), ('Geography', 99), ('Geography', 99), ('Geography', 99)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98), ('Physics', 95), ('Biology', 96), ('Chemistry', 97), ('Mathematics', 98), ('Geography', 99), ('Geography', 99), ('Geography', 99), ('Geography', 99), ('Geography', 99)])\n# Output: [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Geography', 98), ('Physics', 95), ('Biology', 96), ('Chemistry', 97), ('Mathematics', 98), ('Geography', 99), ('Geography', 99), ('Geography', 99), ('Geography', 99), ('Geography', 99)]\n\n# Test\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82), ('History', 99), ('Ge"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\ndef recursive_list_sum(lst):\n    \"\"\"\n    Recursively sum all elements in a list.\n    \"\"\"\n    if not lst:\n        return 0\n    return lst[0] + recursive_list_sum(lst[1:])\n\n# Example usage:"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\ndef pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\n# Test the function"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\ndef bell_number(n):\n    if n == 0:\n        return 1\n    return n * bell_number(n-1) + bell_number(n-2)\n\ndef num_ways_to_partition(n):\n    return bell_number(n)\n\n# Example usage:"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\ndef is_Monotonic(arr):\n    # Check if the array is monotonic\n    # If the array is monotonic, return True\n    # If the array is not monotonic, return False\n    # Use a for loop to iterate through the array\n    # Use a flag variable to keep track of the monotonicity\n    # If the array is monotonic, return True\n    # If the array is not monotonic, return False\n    for i in range(len(arr) - 1):\n        # If the current element is greater than the previous element,\n        # the array is monotonically increasing\n        if arr[i] > arr[i + 1]:\n            return False\n        # If the current element is less than the previous element,\n        # the array is monotonically decreasing\n        elif arr[i] < arr[i + 1]:\n            return False\n    # If the array is monotonic, return True\n    return True\n\n# Test the function\narr = [6, 5, 4, 4]"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\ndef is_sublist(main_list, sub_list):\n    return main_list.index(sub_list) == 0\n\nmain_list = [2,4,3,5,7]\nsub_list = [3,7]"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\ndef get_equal(tuple_list, length):\n    \"\"\"\n    This function takes a list of tuples and a length as input.\n    It returns a string stating whether all the given tuples have equal length or not.\n    \"\"\"\n    if len(tuple_list) == 0:\n        return 'List is empty'\n    if len(tuple_list[0]) != length:\n        return 'All tuples do not have same length'\n    return 'All tuples have same length'\n\n# Example usage"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\ndef comb_sort(lst):\n    def get_gap(lst, gap):\n        for i in range(len(lst) - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n    def get_shrink(lst, gap):\n        shrink = gap * 1.3\n        while gap > 1 and shrink > 1:\n            get_gap(lst, gap)\n            gap = int(gap / shrink)\n    get_shrink(lst, len(lst))\n    return lst\n\n# Example usage:\nlst = [5, 15, 37, 25, 79]"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\ndef dif_Square(n):\n    for i in range(1, int(n**0.5) + 1):\n        if n - i**2 == 0:\n            return True\n    return False\n\n# Example usage:"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\nimport re\n\ndef multiple_split(string):\n    return re.split(r'(\\*|\\s+)', string)\n\n# Test"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\ndef is_samepatterns(patterns, seq):\n    \"\"\"\n    Check if the given sequence follows the given patterns.\n    \"\"\"\n    # Check if the given sequence is empty\n    if not seq:\n        return True\n\n    # Check if the given sequence is the same as the first pattern\n    if seq == patterns[0]:\n        return is_samepatterns(patterns[1:], seq[1:])\n\n    # Check if the given sequence is the same as the second pattern\n    if seq == patterns[1]:\n        return is_samepatterns(patterns[2:], seq[1:])\n\n    # If the given sequence is not the same as any of the patterns, return False\n    return False\n\n# Example usage:\npatterns = [\"red\",\"green\",\"green\"]\nseq = [\"red\",\"green\",\"green\"]"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n\ndef find_tuples(tuples, k):\n    \"\"\"\n    Find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n        tuples (list): List of tuples.\n        k (int): Divisible by k.\n\n    Returns:\n        str: List of tuples.\n    \"\"\"\n    result = []\n    for tup in tuples:\n        if all(x % k == 0 for x in tup):\n            result.append(tup)\n    return '[({})]'.format(', '.join(map(str, result)))\n\n# Example usage:"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(width, height):\n    return width * height * 3\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\ndef is_Diff(num):\n    even_sum = sum(int(digit) for digit in str(num) if int(digit) % 2 == 0)\n    odd_sum = sum(int(digit) for digit in str(num) if int(digit) % 2 != 0)\n    return even_sum != odd_sum\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True\n\n# Test the function"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\ndef tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n# Example usage:"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\ndef zip_tuples(tuple1, tuple2):\n    return zip(tuple1, tuple2)\n\n# Example usage\ntuple1 = (7, 8, 4, 5, 9, 10)\ntuple2 = (1, 5, 6)"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\nimport math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Args:\n        radius (float): The radius of the sphere.\n\n    Returns:\n        float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * (radius ** 3)\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\ndef get_Char(string):\n    char_list = list(string)\n    char_list.sort()\n    return chr(ord(char_list[0])+ord(char_list[1])+ord(char_list[2]))\n\n# Test"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n - 1) + sequence(n - 2) + sequence(n - 3)\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\nimport math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Args:\n        radius (float): The radius of the sphere.\n\n    Returns:\n        float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius ** 2\n\n# Example usage:\nradius = 10\nsurface_area = surfacearea_sphere(radius)"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n    \"\"\"\n    return (3 * n**2 - n) // 2 + 1\n\n# Example usage:"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}\n\n# Example usage\ndict1 = { \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }\ndict2 = { \"G\": \"Green\", \"W\": \"White\" }\ndict3 = { \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" }\n\nresult = merge_dictionaries_three(dict1, dict2, dict3)"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\ndef freq_count(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n\n# Test\nlst = [10,10,10,10,20,20,20,20,40,40,50,50,30]"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\ndef closest_num(n):\n    \"\"\"\n    This function takes a number n and returns the closest smaller number.\n    \"\"\"\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n    elif n == 10:\n        return 9\n    elif n == 11:\n        return 9\n    elif n == 12:\n        return 10\n    elif n == 13:\n        return 11\n    elif n == 14:\n        return 12\n    elif n == 15:\n        return 13\n    elif n == 16:\n        return 14\n    elif n == 17:\n        return 15\n    elif n == 18:\n        return 16\n    elif n == 19:\n        return 17\n    elif n == 20:\n        return 18\n    elif n == 21:\n        return 19\n    elif n == 22:\n        return 20\n    elif n == 23:\n        return 21\n    elif n == 24:\n        return 22\n    elif n == 25:\n        return 23\n    elif n == 26:\n        return 24\n    elif n == 27:\n        return 25\n    elif n == 28:\n        return 26\n    elif n == 29:\n        return 27\n    elif n == 30:\n        return 28\n    elif n == 31:\n        return 29\n    elif n == 32:\n        return 30\n    elif n == 33:\n        return 31\n    elif n == 34:\n        return 32\n    elif n == 35:\n        return 33\n    elif n == 36:\n        return 34\n    elif n == 37:\n        return 35\n    elif n == 38:\n        return 36\n    elif n == 39:\n        return 37\n    elif n == 40:\n        return 38\n    elif n == 41:\n        return 39\n    elif n == 42:\n        return 40\n    elif n == 43:\n        return 41\n    elif n == 44:\n        return 42\n    elif n == 45:\n        return 43\n    elif n == 46:\n        return 44\n    elif n == 47:\n        return 45\n    elif n == 48:\n        return 46\n    elif n == 49:\n        return 47\n    elif n == 50:\n        return 48\n    elif n == 51:\n        return 49\n    elif n == 52:\n        return 50\n    elif n == 53:\n        return 51\n    elif n == 54:\n        return 52\n    elif n == 55:\n        return 53\n    elif n == 56:\n        return 54\n    elif n == 57:\n        return 55\n    elif n == 58:\n        return 56\n    elif n == 59:\n        return 57\n    elif n == 60:\n        return 58\n    elif n == 61:\n        return 59\n    elif n == 62:\n        return 60\n    elif n == 63:\n        return 61\n    elif n == 64:\n        return 62\n    elif n == 65:\n        return 63\n    elif n == 66:\n        return 64\n    elif n == 67:\n        return 65\n    elif n == 68:\n        return 66\n    elif n == 69:\n        return 67\n    elif n == 70:\n        return 68\n    elif n == 71:\n        return 69\n    elif n == 72:\n        return 70\n    elif n == 73:\n        return 71\n    elif n == 74:\n        return 72\n    elif n == 75:\n        return 73\n    elif n == 76:\n        return 74\n    elif n == 77:\n        return 75\n    elif n == 78:\n        return 76\n    elif n == 79:\n        return 77\n    elif n == 80:\n        return 78\n    elif n == 81:\n        return 79\n    elif n == 82:\n        return 80\n    elif n == 83:\n        return 81\n    elif n == 84:\n        return 82\n    elif n == 85:\n        return 83\n    elif n == 86:\n        return 84\n    elif n == 87:\n        return 85\n    elif n == 88:\n        return 86\n    elif n == 89:\n        return 87\n    elif n == 90:\n        return 88\n    elif n == 91:\n        return 89\n    elif n == 92:\n        return 90\n    elif n == 93:\n        return 91\n    elif n == 94:\n        return 92\n    elif n == 95:\n        return 93\n    elif n == 96:\n        return 94\n    elif n == 97:\n        return 95\n    elif n == 98:\n        return 96\n    elif n == 99:\n        return 97\n    elif n == 100:\n        return 98\n    elif n == 101:\n        return 99\n    elif n == 102:\n        return 100\n    elif n == 103:\n        return 101\n    elif n == 104:\n        return 102\n    elif n == 105:\n        return 103\n    elif n == 106:\n        return 104\n    elif n == 107:\n        return 105\n    elif n == 108:\n        return 106\n    elif n == 109:\n        return 107\n    elif n == 110:\n        return 108\n    elif n == 111:\n        return 109\n    elif n == 112:\n        return 110\n    elif n == 113:\n        return 111\n    elif n == 114:\n        return 112\n    elif n == 115:\n        return 113\n    elif n == 116:\n        return 114\n    elif n == 117:\n        return 115\n    elif n == 118:\n        return 116\n    elif n == 119:\n        return 117\n    elif n == 120:\n        return 118\n    elif n == 121:\n        return 119\n    elif n == 122:\n        return 120\n    elif n == 123:\n        return 121\n    elif n == 124:\n        return 122\n    elif n == 125:\n        return 123\n    elif n == 126:\n        return 124\n    elif n == 127:\n        return 125\n    elif n == 128:\n        return 126\n    elif n == 129:\n        return 127\n    elif n == 130:\n        return 128\n    elif n == 131:\n        return 129\n    elif n == 132:\n        return 130\n    elif n == 133:\n        return 131\n    elif n == 134:\n        return 132\n    elif n == 135:\n        return 133\n    elif n == 136:\n        return 134\n    elif n == 137:\n        return 135\n    elif n == 138:\n        return 136\n    elif n == 139:\n        return 137\n    elif n == 140:\n        return 138\n    elif n == 141:\n        return 139\n    elif n == 142:\n        return 140\n    elif n == 143:\n        return 141\n    elif n == 144:\n        return 142\n    elif n == 145:\n        return 143\n    elif n == 146:\n        return 144"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    \"\"\"\n    Returns the length of the longest word.\n    \"\"\"\n    return max(len(word) for word in words)\n\n# Example usage\nwords = [\"python\",\"PHP\",\"bigdata\"]"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\ndef find_substring(string_list, substring):\n    for s in string_list:\n        if s.find(substring) != -1:\n            return True\n    return False\n\n# Example usage:\nstring_list = [\"red\", \"black\", \"white\", \"green\", \"orange\"]\nsubstring = \"ack\""], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\ndef is_undulating(num):\n    \"\"\"\n    Checks whether the given number is undulating or not.\n    \"\"\"\n    return num.replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)\n\n# Test"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\ndef index_minimum(tuple_list):\n    min_index = 0\n    min_value = tuple_list[0][1]\n    for i, tup in enumerate(tuple_list):\n        if tup[1] < min_value:\n            min_index = i\n            min_value = tup[1]\n    return tuple_list[min_index][0]\n\n# Test"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\ndef Find_Min_Length(lst):\n    if not lst:\n        return 0\n    min_len = 1\n    for i in range(1, len(lst)):\n        if lst[i][0] == lst[i-1][-1]:\n            min_len += 1\n        else:\n            min_len = 1\n    return min_len\n\nlst = [[1],[1,2]]"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Example usage:"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(list_of_lists):\n    frequency_dict = {}\n    for lst in list_of_lists:\n        for item in lst:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict\n\n# Example usage:\nlist_of_lists = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(lst):\n    result = 1\n    for num in lst:\n        result *= num\n    return result/len(lst)\n\n# Test"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\ndef decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n    return binary[::-1]\n\n# Test"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\ndef next_smallest_palindrome(num):\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, return the next smallest palindrome\n        return int(num_str + num_str[1:] + num_str[0])\n    \n    # If it is not, find the next smallest palindrome\n    else:\n        # Find the smallest palindrome greater than the number\n        for i in range(num, 1000000):\n            if str(i) == str(i)[::-1]:\n                # If it is, return the next smallest palindrome\n                return int(str(i) + str(i[1:]) + str(i[0]))\n\n# Test the function"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\ndef kth_element(arr, k, index=0):\n    if k == 1:\n        return arr[index]\n    return kth_element(arr, k-1, index+1)\n\n# Example usage:\narr = [12,3,5,7,19]\nk = 5"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\ndef snake_to_camel(string):\n    words = string.split('_')\n    return words[0] + ''.join(word.capitalize() for word in words[1:])\n\n# Test"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    if n == 0 and m == 0:\n        return 1\n    elif n == 0:\n        return eulerian_num(n, m-1)\n    elif m == 0:\n        return eulerian_num(n-1, m)\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n\n# Test"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\ndef sort_sublists(lst):\n    return sorted(lst, key=lambda x: x[0])\n\n# Test"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\ndef count_true_booleans(lst):\n    count = 0\n    for x in lst:\n        if x:\n            count += 1\n    return count\n\n# Example usage:\nlst = [True, False, True]"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\ndef add_lists(list1, list2):\n    \"\"\"\n    Add the given list to the given tuples.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: The list added to the tuples.\n    \"\"\"\n    return list1 + list2\n\n# Example usage:\nlist1 = [5, 6, 7]\nlist2 = (9, 10)\nresult = add_lists(list1, list2)"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\ndef count_Hexadecimal(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if hex(i)[2:] == '0x':\n            count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\ndef merge_sorted_list(list1, list2, list3):\n    heapq.heapify(list1)\n    heapq.heapify(list2)\n    heapq.heapify(list3)\n    result = []\n    while list1 and list2 and list3:\n        if list1[0] <= list2[0] and list1[0] <= list3[0]:\n            result.append(list1[0])\n            heapq.heappop(list1)\n        elif list2[0] <= list1[0] and list2[0] <= list3[0]:\n            result.append(list2[0])\n            heapq.heappop(list2)\n        elif list3[0] <= list1[0] and list3[0] <= list2[0]:\n            result.append(list3[0])\n            heapq.heappop(list3)\n    if list1:\n        result.extend(list1)\n    elif list2:\n        result.extend(list2)\n    elif list3:\n        result.extend(list3)\n    return result\n\n# Example usage:\nlist1 = [25, 24, 15, 4, 5, 29, 110]\nlist2 = [19, 20, 11, 56, 25, 233, 154]\nlist3 = [24, 26, 54, 48]\n"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\ndef odd_Equivalent(binary_string, n):\n    count = 0\n    for i in range(n):\n        if binary_string[i] == '1':\n            count += 1\n    if count % 2 == 1:\n        return count\n    else:\n        return count - 1\n\n# Test"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\ndef extract_missing(ranges, start, end):\n    missing_ranges = []\n    for start_range, end_range in ranges:\n        if start_range < start:\n            missing_ranges.append((start_range, start))\n        if end_range > end:\n            missing_ranges.append((end, end_range))\n        if start_range <= start <= end_range:\n            missing_ranges.append((start, end_range))\n    if start < start_range:\n        missing_ranges.append((start, start_range))\n    if end_range > end:\n        missing_ranges.append((end_range, end))\n    if start_range <= start <= end_range:\n        missing_ranges.append((start, end_range))\n    return missing_ranges\n\n# Example usage:\nranges = [(6, 9), (15, 34), (48, 70)]\nstart, end = 2, 100"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\ndef common_in_nested_lists(list_of_lists):\n    # Your code goes here\n    return []\n\n# Example usage\nlist_item = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(radius, height):\n    return 2 * (radius + height)\n\n# Example usage:"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(string):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Args:\n        string (str): The string to check.\n\n    Returns:\n        bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n# Test the function"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\ndef assign_freq(lst):\n    freq_dict = {}\n    for tup in lst:\n        for item in tup:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return ', '.join(f'({item}, {freq})' for item, freq in freq_dict.items())\n\n# Example usage\nlst = [(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)]"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\ndef empty_dit(list_of_dicts):\n    for dict_ in list_of_dicts:\n        if dict_.keys()!= set():\n            return False\n    return True\n\nlist_of_dicts = [{\"a\":1,\"b\":2},{\"a\":1,\"b\":2},{\"a\":1,\"b\":2}]"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n\ndef tuple_to_int(tuple_of_ints):\n    return int(''.join(map(str, tuple_of_ints)))\n\n# Test"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\ndef list_to_float(lst):\n    \"\"\"\n    Converts all possible convertible elements in the list to float.\n    \"\"\"\n    def convert_to_float(x):\n        if isinstance(x, str):\n            return float(x)\n        elif isinstance(x, list):\n            return [convert_to_float(i) for i in x]\n        else:\n            return x\n\n    return list(map(convert_to_float, lst))\n\n# Example usage:"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\ndef string_to_list(string):\n    return list(string)\n\n# Test"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\ndef search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return target\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n# Example usage:\narr = [1,1,2,2,3]\ntarget = 5\nresult = search(arr, target)"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(lst):\n    \"\"\"\n    Returns the maximum product of the pairs of tuples within a given list.\n    \"\"\"\n    # Initialize max_product with the first element of the first tuple\n    max_product = lst[0][0]\n    # Iterate through the list of tuples\n    for t1, t2 in lst:\n        # Calculate the product of the two elements\n        product = t1 * t2\n        # Update max_product if the product is greater\n        if product > max_product:\n            max_product = product\n    return max_product\n\n# Example usage\nlst = [(2, 7), (2, 6), (1, 8), (4, 9)]"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\ndef check_triplet(arr, target_sum, start, end):\n    for i in range(start, end):\n        for j in range(i+1, end):\n            if arr[i] + arr[j] == target_sum:\n                return True\n    return False\n\n# Test the function\narr = [2, 7, 4, 0, 9, 5, 1, 3]\ntarget_sum = 8\nstart = 0\nend = len(arr) - 1\n"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\ndef smartNumber(n):\n    \"\"\"\n    This function returns the nth smart number.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 30\n\n    # Recursive case\n    return (n * smartNumber(n - 1) + n * smartNumber(n - 2) + n * smartNumber(n - 3))\n\n# Example usage"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\ndef is_amicable(num1, num2):\n    \"\"\"Check if two numbers are amicable.\"\"\"\n    return num1 == sum(divisors(num1)) and num2 == sum(divisors(num2))\n\ndef divisors(num):\n    \"\"\"Return a list of divisors of a number.\"\"\"\n    return [i for i in range(1, num + 1) if num % i == 0]\n\ndef amicable_numbers_sum(n):\n    \"\"\"Return the sum of all amicable numbers from 1 to n.\"\"\"\n    return sum(num for num in range(1, n + 1) if is_amicable(num, num + 1))\n\n# Example usage"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\nimport math\n\ndef angle_complex(real, imag):\n    return math.atan2(imag, real)\n\n# Example usage:\nreal = 0\nimag = 1\nangle = angle_complex(real, imag)"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\ndef find_length(binary_string, target_length):\n    count_0, count_1 = 0, 0\n    for char in binary_string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n    if count_0 < target_length or count_1 < target_length:\n        return 0\n    max_diff = abs(count_0 - count_1)\n    for i in range(len(binary_string) - target_length + 1):\n        if binary_string[i:i+target_length] == '0' * target_length:\n            max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n# Example usage\nbinary_string = \"11000010001\"\ntarget_length = 11"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\ndef sum_of_common_divisors(num1, num2):\n    # Find the gcd of two numbers\n    gcd = gcd(num1, num2)\n    # Find the sum of all divisors of gcd\n    divisors_of_gcd = [i for i in range(1, gcd+1) if gcd % i == 0]\n    # Find the sum of divisors of both numbers\n    divisors_of_num1 = [i for i in range(1, num1+1) if num1 % i == 0]\n    divisors_of_num2 = [i for i in range(1, num2+1) if num2 % i == 0]\n    # Find the sum of common divisors\n    common_divisors_sum = sum(divisors_of_gcd)\n    return common_divisors_sum\n\ndef gcd(num1, num2):\n    while num2 != 0:\n        num1, num2 = num2, num1 % num2\n    return num1\n\n# Test"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(x,y):\n    result = 0\n    while y > 0:\n        result += x\n        y -= 1\n    return result\n\n# Test"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\ndef long_words(n, words):\n    \"\"\"\n    Returns a list of words that are longer than n from a given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n# Example usage:\nwords = [\"python\", \"is\", \"a\", \"programming\", \"language\"]\nn = 3"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\ndef magic_square(n):\n    \"\"\"\n    Generate a magic square of size n.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return None\n\n    # Calculate the size of the magic square\n    size = n * n\n\n    # Generate the magic square\n    magic_square = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            magic_square[i][j] = i * n + j + 1\n\n    # Check if the magic square is valid\n    for row in magic_square:\n        if len(set(row)) != n:\n            return False\n    for col in range(n):\n        if len(set(magic_square[col])) != n:\n            return False\n    for i in range(n):\n        for j in range(n):\n            if magic_square[i][j] != magic_square[j][i]:\n                return False\n\n    # Check if the magic square is a magic square\n    for i in range(n):\n        for j in range(n):\n            if magic_square[i][j] != (i * n + j + 1) // n:\n                return False\n\n    return True\n\n# Test the function"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\ndef max_occurrences(lst):\n    \"\"\"\n    This function returns the item with maximum frequency in a given list.\n    \"\"\"\n    max_freq = 0\n    max_item = None\n    for item in lst:\n        freq = lst.count(item)\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    return max_item, max_freq\n\n# Test\nlst = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]\nmax_item, max_freq = max_occurrences(lst)"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\ndef reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    string_list = list(string)\n    left, right = 0, len(string_list) - 1\n    while left < right:\n        if string_list[left] not in vowels:\n            left += 1\n        elif string_list[right] not in vowels:\n            right -= 1\n        else:\n            string_list[left], string_list[right] = string_list[right], string_list[left]\n            left += 1\n            right -= 1\n    return \"\".join(string_list)\n\n# Example usage:"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\ndef tup_string(tup):\n    return \"\".join(tup)\n\n# Example usage:\ntup = ('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\ndef sum_negativenum(nums):\n    return sum(x for x in nums if x < 0)\n\n# Test"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\ndef check_last(arr, p, index):\n    if p == 0:\n        return \"EVEN\"\n    if p == 1:\n        return \"ODD\"\n    if p == 2:\n        return \"EVEN\"\n    if p == 3:\n        return \"ODD\"\n    if p == 4:\n        return \"EVEN\"\n    if p == 5:\n        return \"ODD\"\n    if p == 6:\n        return \"EVEN\"\n    if p == 7:\n        return \"ODD\"\n    if p == 8:\n        return \"EVEN\"\n    if p == 9:\n        return \"ODD\"\n    if p == 10:\n        return \"EVEN\"\n    if p == 11:\n        return \"ODD\"\n    if p == 12:\n        return \"EVEN\"\n    if p == 13:\n        return \"ODD\"\n    if p == 14:\n        return \"EVEN\"\n    if p == 15:\n        return \"ODD\"\n    if p == 16:\n        return \"EVEN\"\n    if p == 17:\n        return \"ODD\"\n    if p == 18:\n        return \"EVEN\"\n    if p == 19:\n        return \"ODD\"\n    if p == 20:\n        return \"EVEN\"\n    if p == 21:\n        return \"ODD\"\n    if p == 22:\n        return \"EVEN\"\n    if p == 23:\n        return \"ODD\"\n    if p == 24:\n        return \"EVEN\"\n    if p == 25:\n        return \"ODD\"\n    if p == 26:\n        return \"EVEN\"\n    if p == 27:\n        return \"ODD\"\n    if p == 28:\n        return \"EVEN\"\n    if p == 29:\n        return \"ODD\"\n    if p == 30:\n        return \"EVEN\"\n    if p == 31:\n        return \"ODD\"\n    if p == 32:\n        return \"EVEN\"\n    if p == 33:\n        return \"ODD\"\n    if p == 34:\n        return \"EVEN\"\n    if p == 35:\n        return \"ODD\"\n    if p == 36:\n        return \"EVEN\"\n    if p == 37:\n        return \"ODD\"\n    if p == 38:\n        return \"EVEN\"\n    if p == 39:\n        return \"ODD\"\n    if p == 40:\n        return \"EVEN\"\n    if p == 41:\n        return \"ODD\"\n    if p == 42:\n        return \"EVEN\"\n    if p == 43:\n        return \"ODD\"\n    if p == 44:\n        return \"EVEN\"\n    if p == 45:\n        return \"ODD\"\n    if p == 46:\n        return \"EVEN\"\n    if p == 47:\n        return \"ODD\"\n    if p == 48:\n        return \"EVEN\"\n    if p == 49:\n        return \"ODD\"\n    if p == 50:\n        return \"EVEN\"\n    if p == 51:\n        return \"ODD\"\n    if p == 52:\n        return \"EVEN\"\n    if p == 53:\n        return \"ODD\"\n    if p == 54:\n        return \"EVEN\"\n    if p == 55:\n        return \"ODD\"\n    if p == 56:\n        return \"EVEN\"\n    if p == 57:\n        return \"ODD\"\n    if p == 58:\n        return \"EVEN\"\n    if p == 59:\n        return \"ODD\"\n    if p == 60:\n        return \"EVEN\"\n    if p == 61:\n        return \"ODD\"\n    if p == 62:\n        return \"EVEN\"\n    if p == 63:\n        return \"ODD\"\n    if p == 64:\n        return \"EVEN\"\n    if p == 65:\n        return \"ODD\"\n    if p == 66:\n        return \"EVEN\"\n    if p == 67:\n        return \"ODD\"\n    if p == 68:\n        return \"EVEN\"\n    if p == 69:\n        return \"ODD\"\n    if p == 70:\n        return \"EVEN\"\n    if p == 71:\n        return \"ODD\"\n    if p == 72:\n        return \"EVEN\"\n    if p == 73:\n        return \"ODD\"\n    if p == 74:\n        return \"EVEN\"\n    if p == 75:\n        return \"ODD\"\n    if p == 76:\n        return \"EVEN\"\n    if p == 77:\n        return \"ODD\"\n    if p == 78:\n        return \"EVEN\"\n    if p == 79:\n        return \"ODD\"\n    if p == 80:\n        return \"EVEN\"\n    if p == 81:\n        return \"ODD\"\n    if p == 82:\n        return \"EVEN\"\n    if p == 83:\n        return \"ODD\"\n    if p == 84:\n        return \"EVEN\"\n    if p == 85:\n        return \"ODD\"\n    if p == 86:\n        return \"EVEN\"\n    if p == 87:\n        return \"ODD\"\n    if p == 88:\n        return \"EVEN\"\n    if p == 89:\n        return \"ODD\"\n    if p == 90:\n        return \"EVEN\"\n    if p == 91:\n        return \"ODD\"\n    if p == 92:\n        return \"EVEN\"\n    if p == 93:\n        return \"ODD\"\n    if p == 94:\n        return \"EVEN\"\n    if p == 95:\n        return \"ODD\"\n    if p == 96:\n        return \"EVEN\"\n    if p == 97:\n        return \"ODD\"\n    if p == 98:\n        return \"EVEN\"\n    if p == 99:\n        return \"ODD\"\n    if p == 100:\n        return \"EVEN\"\n    if p == 101:\n        return \"ODD\"\n    if p == 102:\n        return \"EVEN\"\n    if p == 103:\n        return \"ODD\"\n    if p == 104:\n        return \"EVEN\"\n    if p == 105:\n        return \"ODD\"\n    if p == 106:\n        return \"EVEN\"\n    if p == 107:\n        return \"ODD\"\n    if p == 108:\n        return \"EVEN\"\n    if p == 109:\n        return \"ODD\"\n    if p == 110:\n        return \"EVEN\"\n    if p == 111:\n        return \"ODD\"\n    if p == 112:\n        return \"EVEN\"\n    if p == 113:\n        return \"ODD\"\n    if p == 114:\n        return \"EVEN\"\n    if p == 115:\n        return \"ODD\"\n    if p == 116:\n        return \"EVEN\"\n    if p == 117:\n        return \"ODD\"\n    if p == 118:\n        return \"EVEN\"\n    if p == 119:\n        return \"ODD\"\n    if p == 120:\n        return \"EVEN\"\n    if p == 121:\n        return \"ODD\"\n    if p == 122:\n        return \"EVEN\"\n    if p == 123:\n        return \"ODD\"\n    if p == 124:\n        return \"EVEN\"\n    if p == 125:\n        return \"ODD\"\n    if p == 126:\n        return \"EVEN\"\n    if p == 127:\n        return \"ODD\"\n    if p == 128:\n        return \"EVEN\"\n    if p == 129:\n        return \"ODD\"\n    if p == 130:\n        return \"EVEN\"\n    if p == 131:\n        return \"ODD\"\n    if p == 132:\n        return \"EVEN\"\n    if p == 133:\n        return \"ODD\"\n    if p == 134:\n        return \"EVEN\"\n    if p == 135:\n        return \"ODD\"\n    if p == 136:\n        return \"EVEN\"\n    if p == 137:\n        return \"ODD\"\n    if p == 138:\n        return \"EVEN\"\n    if p == 139:\n       "], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\ndef hexagonal_num(n):\n    return n * (2 * n - 1)\n\n# Example usage:"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kwh):\n    \"\"\"\n    Calculate electricity bill\n    \"\"\"\n    if kwh<=0:\n        return 0\n    else:\n        return kwh*0.05\n"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\ndef zero_count(arr):\n    count = 0\n    for num in arr:\n        if num == 0:\n            count += 1\n    return count/len(arr)\n\n# Example usage:\narr = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n % 2 != 0:\n        return False\n    return is_Sum_Of_Powers_Of_Two(n // 2)\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\nimport math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\n# Example usage"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\ndef extract_singly(lst):\n    \"\"\"\n    Extract elements that occur singly in the given tuple list.\n    \"\"\"\n    return [x for x, y in lst for _ in range(1, len(lst) + 1) if x == y]\n\n# Example usage:\nlst = [(3, 4, 5), (4, 5, 7), (1, 4)]"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(arr):\n    \"\"\"\n    Sorts a list of elements using pancake sort.\n    \"\"\"\n    for i in range(len(arr), 0, -1):\n        max_idx = arr.index(max(arr[:i]))\n        arr[max_idx], arr[i-1] = arr[i-1], arr[max_idx]\n    return arr\n\n# Example usage\narr = [15, 79, 25, 38, 69]"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\nlist1 = [1,2,3,4,5,6,7,8]\nlist2 = [2,2,3,1,2,6,7,9]\nlist3 = [2,1,3,1,2,6,7,9]\n"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\ndef find_lists(tuple_of_lists):\n    return len(set(tuple_of_lists))\n\n# Example usage:\nlist_tuple = ([1, 2, 3, 4], [5, 6, 7, 8])"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\ndef sum_Pairs(arr, k):\n    \"\"\"\n    This function calculates the sum of absolute differences in all pairs of the given array.\n    \"\"\"\n    # Calculate the sum of absolute differences in all pairs of the given array\n    return sum(abs(x-y) for x, y in zip(arr, arr[k:]))\n\n# Example usage:\narr = [1,8,9,15,16]\nk = 5"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr, n):\n    max_diff = -float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n# Test\narr = (2,1,5,3)\nn = len(arr)"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(string):\n    \"\"\"\n    Returns the ascii value of total characters in a string.\n    \"\"\"\n    return sum(ord(char) for char in string)\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\ndef max_path_sum(triangle, start_row, start_col, end_row, end_col):\n    \"\"\"\n    Given a triangle of numbers, find the maximum total path sum from the start_row, start_col\n    to the end_row, end_col.\n    \"\"\"\n    if start_row == end_row:\n        return triangle[start_row][start_col]\n    else:\n        return max(\n            triangle[start_row][start_col] + max_path_sum(triangle, start_row + 1, start_col, end_row, end_col),\n            triangle[start_row][start_col] + max_path_sum(triangle, start_row + 1, start_col + 1, end_row, end_col),\n            triangle[start_row][start_col] + max_path_sum(triangle, start_row + 1, start_col - 1, end_row, end_col),\n        )\n\n# Example usage\ntriangle = [[1, 0, 0], [4, 8, 0], [1, 5, 3]]"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(num):\n    \"\"\"\n    Divide a number into two parts such that the sum of digits is maximum.\n    \"\"\"\n    if num == 0:\n        return 0, 0\n    elif num < 10:\n        return num, 0\n    else:\n        # Divide the number into two parts\n        a, b = divmod(num, 10)\n        # Calculate the sum of digits\n        sum_a = sum(list(str(a)))\n        sum_b = sum(list(str(b)))\n        # Return the maximum sum of digits\n        return max(sum_a, sum_b), max(sum_a, sum_b)\n\n# Example usage\nnum = 35\na, b = sum_digits_twoparts(num)"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\ndef longest_subseq_with_diff_one(arr, target):\n    dp = [[0 for _ in range(len(arr))] for _ in range(target+1)]\n    for i in range(len(arr)):\n        dp[0][i] = 1\n    for i in range(1, target+1):\n        for j in range(len(arr)):\n            if arr[j] == i:\n                dp[i][j] = dp[i-arr[j]][j-1] + 1\n            elif arr[j] < i:\n                dp[i][j] = max(dp[i][j-1], dp[i-arr[j]][j])\n    return dp[target][len(arr)-1]\n\n# Test\narr = [1, 2, 3, 4, 5, 3, 2]\ntarget = 7"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(num, start, end):\n    for i in range(start, end+1):\n        if num == i:\n            return True\n    return False\n\n# Test"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\ndef is_coprime(num1, num2):\n    \"\"\"\n    This function checks whether the given number is co-prime or not.\n    \"\"\"\n    if num1 == 0 or num2 == 0:\n        return False\n    if num1 == 1 or num2 == 1:\n        return True\n    if num1 == num2:\n        return True\n    if num1 == 2 or num2 == 2:\n        return True\n    if num1 % 2 == 0 or num2 % 2 == 0:\n        return False\n    if num1 % 3 == 0 or num2 % 3 == 0:\n        return False\n    if num1 % 5 == 0 or num2 % 5 == 0:\n        return False\n    if num1 % 7 == 0 or num2 % 7 == 0:\n        return False\n    if num1 % 11 == 0 or num2 % 11 == 0:\n        return False\n    if num1 % 13 == 0 or num2 % 13 == 0:\n        return False\n    if num1 % 17 == 0 or num2 % 17 == 0:\n        return False\n    if num1 % 19 == 0 or num2 % 19 == 0:\n        return False\n    if num1 % 23 == 0 or num2 % 23 == 0:\n        return False\n    if num1 % 29 == 0 or num2 % 29 == 0:\n        return False\n    if num1 % 31 == 0 or num2 % 31 == 0:\n        return False\n    if num1 % 37 == 0 or num2 % 37 == 0:\n        return False\n    if num1 % 41 == 0 or num2 % 41 == 0:\n        return False\n    if num1 % 43 == 0 or num2 % 43 == 0:\n        return False\n    if num1 % 47 == 0 or num2 % 47 == 0:\n        return False\n    if num1 % 53 == 0 or num2 % 53 == 0:\n        return False\n    if num1 % 59 == 0 or num2 % 59 == 0:\n        return False\n    if num1 % 61 == 0 or num2 % 61 == 0:\n        return False\n    if num1 % 67 == 0 or num2 % 67 == 0:\n        return False\n    if num1 % 71 == 0 or num2 % 71 == 0:\n        return False\n    if num1 % 73 == 0 or num2 % 73 == 0:\n        return False\n    if num1 % 79 == 0 or num2 % 79 == 0:\n        return False\n    if num1 % 83 == 0 or num2 % 83 == 0:\n        return False\n    if num1 % 89 == 0 or num2 % 89 == 0:\n        return False\n    if num1 % 97 == 0 or num2 % 97 == 0:\n        return False\n    return True\n\n# Example usage:"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    while left and right:\n        if left[0] <= right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    result.extend(left)\n    result.extend(right)\n    return result\n\n# Example usage:\narr = [3, 4, 2, 6, 5, 7, 1, 9]"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\ndef parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    y = a * x**2 + b * x + c\n    return (x, y)\n\n# Example usage:\na, b, c = 5, 3, 2\nvertex = parabola_vertex(a, b, c)"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef extract_element(lst, index):\n    return [item[index] for item in lst]\n\n# Example usage:\nlst = [[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]\nindex = 0"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    return num ^ (1 << 1)\n\n# Example usage:"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\ndef tuple_int_str(tuple_str):\n    \"\"\"\n    Convert a tuple of string values to a tuple of integer values.\n    \"\"\"\n    return tuple(map(int, tuple_str))\n\n# Example usage:\ntuple_str = (('333', '33'), ('1416', '55'))"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(lst):\n    \"\"\"\n    Given a list of integers, return a list of lists of integers.\n    For example, given [1,1,2,3,4,4.3,5,1], return [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]].\n    \"\"\"\n    encoded_list = []\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            count += 1\n        else:\n            encoded_list.append([count, lst[i-1]])\n            count = 1\n    encoded_list.append([count, lst[-1]])\n    return encoded_list\n\ndef decode_list(lst):\n    \"\"\"\n    Given a list of lists of integers, return a list of integers.\n    For example, given [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]], return [1, 1, 2, 3, 4, 4.3, 5].\n    \"\"\"\n    decoded_list = []\n    for i in range(len(lst)):\n        if i == 0:\n            decoded_list.append(lst[i][1])\n        elif lst[i][0] == lst[i-1][0]:\n            decoded_list.append(lst[i][1] + lst[i-1][1])\n        else:\n            decoded_list.append(lst[i][1])\n    return decoded_list\n\n# Test the functions\nlst = [1,1,2,3,4,4.3,5,1]\nencoded_lst = encode_list(lst)"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\ndef min_Ops(arr, k, n):\n    # Calculate the minimum number of operations required to make all elements equal\n    # O(n^2)\n    min_ops = 0\n    for i in range(n):\n        min_ops += abs(arr[i] - k)\n    return min_ops\n\n# Example usage\narr = [2,2,2,2]\nk = 4\nn = len(arr)"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\ndef month_season(month, day):\n    seasons = {\n        'January': 'winter',\n        'February': 'winter',\n        'March': 'spring',\n        'April': 'spring',\n        'May': 'spring',\n        'June': 'summer',\n        'July': 'summer',\n        'August': 'summer',\n        'September': 'fall',\n        'October': 'fall',\n        'November': 'fall',\n        'December': 'winter'\n    }\n    if month in seasons and 1 <= day <= 31:\n        return seasons[month]\n    else:\n        return 'Invalid date'\n\n# Test cases"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\ndef solution(a, b, n):\n    x = 0\n    y = 0\n    while n > 0:\n        if n % b == 0:\n            y += n // b\n            n = 0\n        else:\n            x += 1\n            n -= a\n            if n == 0:\n                break\n    return ('x = ', x, ', y = ', y)\n\n# Test"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]\n\n# Example usage:\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nlist2 = [2,4,6,8]"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\ndef sum_series(n):\n    \"\"\"\n    Calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    \"\"\"\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n\n# Example usage:"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\nimport math\n\ndef area_polygon(n, s):\n    \"\"\"\n    Calculate the area of a regular polygon.\n\n    Args:\n        n (int): The number of sides of the polygon.\n        s (float): The length of each side of the polygon.\n\n    Returns:\n        float: The area of the polygon.\n    \"\"\"\n    return (n * s**2) / (4 * math.tan(math.pi / n))\n\n# Example usage:"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\ndef areEquivalent(num1, num2):\n    \"\"\"\n    This function checks whether the sum of divisors are same or not.\n    \"\"\"\n    div1 = sum(i for i in range(1, num1+1) if num1 % i == 0)\n    div2 = sum(i for i in range(1, num2+1) if num2 % i == 0)\n    return div1 == div2\n"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].lower() == string[i+1].lower():\n            count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(arr, x):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count\n\narr = [5,4,7,2,1]\nx = 5"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    return 2 ** (len(bin(n)) - 2)\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\ndef frequency(arr, num):\n    count = 0\n    for i in arr:\n        if i == num:\n            count += 1\n    return count\n\narr = [1,2,3,4,5]\nnum = 4"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\ndef get_pell(n):\n    \"\"\"\n    Calculate the nth pell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*get_pell(n-1) + get_pell(n-2)\n"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])\n\n# Example usage:\nlst = [2,1,5,6,8,3,4,9,10,11,8,12]\nstart, end = 8, 10"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(n):\n    return n*5\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\ndef count_occurance(string):\n    \"\"\"\n    This function counts the occurence of characters 'std' in the given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char == 's':\n            count += 1\n        elif char == 'd':\n            count += 1\n    return count\n\n# Test the function\nstring = \"letstdlenstdporstd\""], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\nimport re\n\ndef remove_splchar(string):\n    return re.sub('[^a-zA-Z0-9]', '', string)\n\n# Test"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\ndef group_keyvalue(keyvalue_list):\n    result = {}\n    for key, value in keyvalue_list:\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n\n# Example usage:\nkeyvalue_list = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]\nresult = group_keyvalue(keyvalue_list)"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\ndef is_valid_parenthese(string):\n    stack = []\n    for char in string:\n        if char in [\"(\", \"[\", \"{\"]:\n            stack.append(char)\n        elif char in [\")\", \"]\", \"}\"]:\n            if len(stack) == 0:\n                return False\n            if char == \")\":\n                if stack[-1] != \"(\":\n                    return False\n            elif char == \"]\":\n                if stack[-1] != \"[\":\n                    return False\n            elif char == \"}\":\n                if stack[-1] != \"{\":\n                    return False\n            stack.pop()\n    return len(stack) == 0\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\ndef perimeter_triangle(a,b,c):\n    return a+b+c\n\n# Test"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\ndef answer(max_num, min_num):\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    lcm_range = max_num * min_num\n    lcm_list = []\n    for i in range(min_num, max_num + 1):\n        for j in range(i, max_num + 1):\n            if lcm(i, j) <= lcm_range:\n                lcm_list.append((i, j))\n\n    if lcm_list:\n        return lcm_list[0]\n    else:\n        return None\n\n# Test"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\ndef string_literals(strings, string):\n    \"\"\"\n    \"\"\"\n    for s in strings:\n        if s in string:\n            return True\n    return False\n"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\ndef is_num_keith(num):\n    \"\"\"\n    Returns True if the given number is a keith number, False otherwise.\n    \"\"\"\n    count = 1\n    while count < num:\n        if num % count == 0:\n            return False\n        count += 1\n    return True\n\n# Example usage:"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\nimport math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    # Radius of the earth in km\n    R = 6371.0\n\n    # Convert degrees to radians\n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n\n    # Differences in coordinates\n    delta_lat = lat2_rad - lat1_rad\n    delta_lon = lon2_rad - lon1_rad\n\n    # Haversine formula\n    a = math.sin(delta_lat/2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(delta_lon/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n\n    # Distance\n    distance = R * c\n    return distance\n\n# Example usage\nlat1, lon1, lat2, lon2 = 23.5, 67.5, 25.5, 69.5\ndistance = distance_lat_long(lat1, lon1, lat2, lon2)"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\ndef common_prefix(strings, n):\n    if n == 0:\n        return \"\"\n    for i in range(min(len(string) for string in strings)):\n        if strings[0][i] != strings[1][i] or strings[0][i] != strings[2][i] or strings[0][i] != strings[3][i]:\n            return strings[0][:i]\n    return strings[0][:n]\n\n# Example usage:\nstrings = [\"tablets\", \"tables\", \"taxi\", \"tamarind\"]\nn = 4"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nimport re\n\ndef find_character(string):\n    uppercase = re.findall(r\"[A-Z]\", string)\n    lowercase = re.findall(r\"[a-z]\", string)\n    special_char = re.findall(r\"[^A-Za-z0-9]\", string)\n    numeric = re.findall(r\"\\d\", string)\n    return (uppercase, lowercase, special_char, numeric)\n\n# Test"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\ndef count_pairs(arr, k, target):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count\n\n# Example usage:\narr = [1, 5, 3, 4, 2]\nk = 3\ntarget = 5"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(lst, num):\n    return [x for x in lst if x > num]\n\n# Test\nlst = [220, 330, 500]\nnum = 200"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\ndef parabola_focus(a, b, c):\n    \"\"\"\n    Calculate the focus of a parabola.\n    \"\"\"\n    x_focus = -b/(2*a)\n    y_focus = (x_focus**2 + c) / a\n    return (x_focus, y_focus)\n\n# Example usage:\na, b, c = 5, 3, 2\nfocus = parabola_focus(a, b, c)"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\nimport re\n\ndef check_literals(string, literals):\n    \"\"\"\n    Searches some literals strings in a string by using regex.\n\n    Args:\n        string (str): The string to search.\n        literals (list): The list of literals strings.\n\n    Returns:\n        str: The result of the search.\n    \"\"\"\n    regex = '|'.join(literals)\n    return re.search(regex, string).group() if re.search(regex, string) else 'Not matched!'\n\n# Example usage:\nstring = 'The quick brown fox jumps over the lazy dog.'\nliterals = ['fox']"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\ndef longest_common_subsequence(str1, str2, m, n):\n    dp = [[0 for x in range(n+1)] for x in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[m][n]\n\n# Driver code\nstr1 = \"AGGTAB\"\nstr2 = \"GXTXAYB\"\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\ndef prod_Square(n):\n    \"\"\"\n    Check whether the given number can be represented by product of two squares or not.\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return prod_Square(n // i) and prod_Square(i)\n    return False\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\ndef first_Missing_Positive(nums):\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] > 0 and nums[i] - 1 < len(nums) and nums[i] != nums[nums[i] - 1]:\n            return nums[i] + 1\n    return len(nums) + 1\n\n# Example usage:\nnums = [1,2,3,-1,5]"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\ndef count_Intgral_Points(x1, y1, x2, y2):\n    \"\"\"\n    This function counts the number of integral co-ordinates that lie inside a square.\n    \"\"\"\n    count = 0\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            if x**2 + y**2 <= 16:\n                count += 1\n    return count\n\n# Example usage:"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\ndef check_monthnumber(month):\n    if month == \"February\":\n        return False\n    elif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\n        return True\n    else:\n        return False\n\n# Test the function"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\ndef check_String(string):\n    if any(char.isalpha() for char in string) and any(char.isdigit() for char in string):\n        return True\n    else:\n        return False\n\n# Test"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\ndef remove_tuple(tuple_in):\n    tuple_out = tuple_in[:]\n    for i in range(len(tuple_out) - 1):\n        if tuple_out[i] == tuple_out[i + 1]:\n            tuple_out.remove(tuple_out[i])\n    return tuple_out\n\n# Test"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\ndef octal_To_Decimal(octal_num):\n    return int(octal_num, base=8)\n\n# Test"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n\ndef first(arr, target, left, right):\n    if left > right:\n        return -1\n    mid = (left + right) // 2\n    if arr[mid] == target:\n        if mid == 0 or arr[mid-1] < target:\n            return mid\n        else:\n            return first(arr, target, left, mid-1)\n    elif arr[mid] < target:\n        return first(arr, target, mid+1, right)\n    else:\n        return first(arr, target, left, mid-1)\n\ndef first_position(arr, target):\n    return first(arr, target, 0, len(arr)-1)\n\n# Example usage\narr = [1,2,3,4,5,6,6]\ntarget = 6"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\ndef remove_tuples(tuples, k):\n    return [t for t in tuples if len(t) == k]\n\n# Example usage:"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n\ndef find_exponentio(x, y):\n    return tuple(x[i]**y[i] for i in range(len(x)))\n\n# Example usage:\nx = (10, 4, 5, 6)\ny = (5, 6, 7, 5)"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\nimport math\n\ndef largest_triangle(a, b):\n    \"\"\"\n    Returns the largest triangle that can be inscribed in an ellipse.\n    \"\"\"\n    # Calculate the semi-major and semi-minor axes\n    a_max = a\n    b_max = b\n\n    # Calculate the area of the largest triangle\n    area = (a_max * b_max) / 2\n\n    # Calculate the semi-major and semi-minor axes of the largest triangle\n    a_triangle = math.sqrt(a_max**2 + b_max**2)\n    b_triangle = math.sqrt(a_max**2 + b_max**2)\n\n    # Calculate the area of the largest triangle\n    area_triangle = (a_triangle * b_triangle) / 2\n\n    # Return the largest triangle\n    return area_triangle\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    power = 0\n    while n > 0:\n        n >>= 1\n        power += 1\n    return 1 << (power - 1)\n\n# Example usage:"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\ndef position_max(lst):\n    max_val = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_val]\n\n# Test\nlst = [12,33,23,10,67,89,45,667,23,12,11,10,54]"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\ndef chkList(lst):\n    if len(lst) != len(set(lst)):\n        return False\n    else:\n        return True\n\n# Test"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(string):\n    \"\"\"\n    Remove even characters in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with even characters removed.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char % 2 != 0:\n            result += char\n    return result\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n\ndef hamming_Distance(x, y):\n    return bin(x ^ y).count('1')\n\n# Example usage\nx = 4\ny = 8"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\ndef count(string, char):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == char:\n            count += 1\n    return count\n\n# Example usage:\nstring = \"abcc\"\nchar = \"c\""], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\ndef inversion_elements(tuple_list):\n    inversions = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i] > tuple_list[j]:\n                inversions.append((tuple_list[i], tuple_list[j]))\n    return inversions\n\n# Test the function"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\ndef concatenate_elements(tuple_list):\n    result = []\n    for i in range(len(tuple_list) - 1):\n        result.append(tuple_list[i] + tuple_list[i+1])\n    return result\n\n# Test the function"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\ndef find_longest_repeating_subseq(string):\n    n = len(string)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if string[i-1] == string[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n][n]\n\n# Example usage:\nstring = \"AABEBCDD\""], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nimport re\n\ndef is_decimal(string):\n    pattern = r'^[-+]?\\d{1,3}(?:,\\d{3})*(?:\\.\\d+)?$'\n    return bool(re.match(pattern, string))\n\n# Test"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\ndef heap_replace(heap, item):\n    heap.append(item)\n    heap.sort()\n    return heap\n\n# Example usage:\nheap = [25, 44, 68, 21, 39, 23, 89]\nitem = 21"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\nimport re\n\ndef is_allowed_specific_char(string, allowed_chars):\n    \"\"\"\n    Check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9)\n    by using regex.\n\n    Args:\n    string (str): The string to check.\n    allowed_chars (str): The set of allowed characters.\n\n    Returns:\n    bool: True if the string contains only allowed characters, False otherwise.\n    \"\"\"\n    # Check if string is empty\n    if not string:\n        return False\n\n    # Check if string contains only allowed characters\n    return bool(re.match(r\"[a-zA-Z0-9]\", string))\n\n# Example usage\nstring = \"ABCDEFabcdef123450\"\nallowed_chars = \"abcdef012345\"\n"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\ndef count_Num(num):\n    count = 0\n    while num > 0:\n        if num & 1 == 1:\n            count += 1\n        num >>= 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\ndef fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))\n\n# Test"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\ndef concatenate_strings(str1, str2):\n    return str1 + str2\n\n# Example usage:\nstr1 = (\"Manjeet\", \"Nikhil\", \"Akshat\")\nstr2 = (\" Singh\", \" Meherwal\", \" Garg\")\n\nresult = concatenate_strings(str1, str2)"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(radian):\n    return radian * 180 / math.pi\n\n# Example usage:\nradian = math.pi / 2\ndegree = degree_radian(radian)"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\ndef decode_list(encoded_list):\n    decoded_list = []\n    for item in encoded_list:\n        if item[0] == 1:\n            decoded_list.append(item[1])\n        else:\n            for i in range(item[0]):\n                decoded_list.append(item[1])\n    return decoded_list\n\n# Test"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\ndef check_subset_list(list1, list2):\n    if list1 == []:\n        return True\n    if list2 == []:\n        return False\n    if list1[0] == list2[0]:\n        return check_subset_list(list1[1:], list2[1:])\n    else:\n        return check_subset_list(list1[1:], list2)\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nlist2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\ndef first_Repeated_Char(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n\n# Test"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\ndef min_Operations(x, y):\n    if x == y:\n        return 0\n    else:\n        return abs(x-y) + min_Operations(x+y, y)\n\n# Test"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\ndef extract_min_max(tuple_, k):\n    min_val = tuple_[0]\n    max_val = tuple_[0]\n    min_list = []\n    max_list = []\n    for i in range(k):\n        if tuple_[i] < min_val:\n            min_val = tuple_[i]\n        if tuple_[i] > max_val:\n            max_val = tuple_[i]\n        min_list.append(tuple_[i])\n        max_list.append(tuple_[i])\n    return min_list, max_list\n\n# Example usage:\ntuple_ = (5, 20, 3, 7, 6, 8)\nk = 2\nmin_list, max_list = extract_min_max(tuple_, k)"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\ndef replace_max_specialchar(string, max_occurrences):\n    special_char = [' ', ',', '.']\n    max_occurrences_count = max(string.count(char) for char in special_char)\n    if max_occurrences_count >= max_occurrences:\n        for i in range(max_occurrences_count):\n            string = string.replace(special_char[i], ':')\n    return string\n\n# Test\nstring = 'Python language, Programming language.'\nmax_occurrences = 2"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\ndef first_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n# Test"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\ndef check_type(tuple_data):\n    if type(tuple_data[0]) == type(tuple_data[1]) == type(tuple_data[2]) == type(tuple_data[3]) == type(tuple_data[4]) == type(tuple_data[5]):\n        return True\n    else:\n        return False\n\n# Test"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\ndef is_majority(arr, target, n):\n    left, right = 0, n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n    return False\n\n# Example usage\narr = [1, 2, 3, 3, 3, 3, 10]\ntarget = 3\nn = len(arr)\n"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\ndef find_Min(arr, start, end):\n    if start == end:\n        return arr[start]\n    if start == end - 1:\n        return min(arr[start], arr[end])\n    mid = (start + end) // 2\n    if arr[start] <= arr[mid]:\n        if arr[start] <= arr[end]:\n            return arr[start]\n        else:\n            return find_Min(arr, start + 1, end)\n    elif arr[start] >= arr[mid]:\n        return find_Min(arr, start, mid - 1)\n    else:\n        return find_Min(arr, mid + 1, end)\n\n# Example usage:\narr = [1,2,3,4,5]"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\ndef remove_odd_values(string):\n    \"\"\"\n    This function removes the characters which have odd index values of a given string.\n    \"\"\"\n    odd_values_string = \"\"\n    for i, char in enumerate(string):\n        if i % 2 == 0:\n            odd_values_string += char\n    return odd_values_string\n\n# Test"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\ndef min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n\n# Test"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\ndef all_Bits_Set_In_The_Given_Range(n, start, end):\n    # Check if start and end are within the range\n    if start > end:\n        return False\n    # Check if start and end are in the range\n    if start < 0 or end > 31:\n        return False\n    # Check if n is in the range\n    if n < 0 or n > 31:\n        return False\n    # Check if all bits are unset in the given range\n    return (n & (1 << start) & (1 << end)) == 0\n\n# Test the function"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\ndef re_arrange_array(arr, n):\n    # Initialize two pointers\n    left = 0\n    right = n - 1\n\n    # Iterate through the array\n    while left < right:\n        # If the element at left is negative, move left pointer\n        if arr[left] < 0:\n            left += 1\n        # If the element at right is positive, move right pointer\n        elif arr[right] > 0:\n            right -= 1\n        # If the element at left is positive, move right pointer\n        elif arr[left] > 0 and arr[right] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n\n    return arr\n\n# Example usage\narr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\nn = 9"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(string, char):\n    return string.replace(\" \", char)\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\ndef max_sum(triangle, n):\n    \"\"\"\n    Given a right triangle of numbers, return the maximum sum of the numbers in the triangle.\n    \"\"\"\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1):\n            max_sum += triangle[i][j]\n    return max_sum\n\n# Example usage:\ntriangle = [[1], [2,1], [3,3,2]]\nn = len(triangle)"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\ndef larg_nnum(data, n):\n    \"\"\"\n    Get the n largest items from a dataset.\n\n    Args:\n        data (list): The dataset.\n        n (int): The number of largest items.\n\n    Returns:\n        list: The n largest items.\n    \"\"\"\n    return sorted(data, reverse=True)[:n]\n\n# Example usage:\ndata = [10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100]\nn = 2"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n\n# Example usage:\nradius = 10\nheight = 5\nlateralsurface_cylinder(radius, height)\n# Output: 314.15000000000003\n\n# Test cases:"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side):\n    return side**3\n\n# Example usage:"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\ndef even_bit_set_number(num):\n    return num | (1 << (num & 0x1))\n\n# Example usage:"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\ndef No_of_Triangle(n,m):\n    count = 0\n    for i in range(1,n+1):\n        count += (i*m)\n    return count\n\n# Test"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\ndef check_occurences(tuples):\n    result = {}\n    for t1, t2 in tuples:\n        if t1 in result and t2 in result:\n            result[t1].append(t2)\n        elif t1 in result:\n            result[t1].append(t2)\n            result[t1].append(t2)\n        else:\n            result[t1] = [t2]\n    return result\n\n# Test"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\ndef number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count\n\n# Test\nstring = \"abc\""], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\ndef get_total_number_of_sequences(n, m):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 16\n    if n == 6:\n        return 32\n    if n == 7:\n        return 64\n    if n == 8:\n        return 128\n    if n == 9:\n        return 256\n    if n == 10:\n        return 512\n    return get_total_number_of_sequences(n-1, m) + get_total_number_of_sequences(n-2, m) + get_total_number_of_sequences(n-3, m) + get_total_number_of_sequences(n-4, m) + get_total_number_of_sequences(n-5, m) + get_total_number_of_sequences(n-6, m) + get_total_number_of_sequences(n-7, m) + get_total_number_of_sequences(n-8, m) + get_total_number_of_sequences(n-9, m) + get_total_number_of_sequences(n-10, m)\n\n# Example usage:"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(list1, list2):\n    list1.append(list2)\n    return list1\n\n# Test\nlist1 = [1, 3, 5, 7, 9, 10]\nlist2 = [2, 4, 6, 8]"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\ndef array_3d(rows, cols, depth):\n    return [[['*']*cols for _ in range(rows)] for _ in range(depth)]\n\n# Example usage:"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\ndef count_charac(string):\n    count=0\n    for char in string:\n        if char.isalpha():\n            count+=1\n    return count\n\n# Test\nstring = \"python programming\""], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\ndef sort_on_occurence(lst):\n    return sorted(lst, key=lambda x: lst.count(x[0]))\n\n# Test\nlst = [(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(num):\n    \"\"\"\n    This function returns the next perfect square greater than a given number.\n    \"\"\"\n    # Calculate the square root of the given number\n    sqrt = int(num**0.5) + 1\n\n    # Check if the given number is a perfect square\n    if sqrt * sqrt == num:\n        return num\n    else:\n        # Calculate the next perfect square\n        next_sqrt = sqrt + 1\n        next_num = next_sqrt * next_sqrt\n        return next_num\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\ndef max_sum(arr, k):\n    dp = [[0 for _ in range(k+1)] for _ in range(len(arr)+1)]\n    for i in range(len(arr)+1):\n        dp[i][0] = 0\n    for j in range(1, k+1):\n        dp[0][j] = 0\n    for i in range(1, len(arr)+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j] + max(arr[i-1], arr[i-1] + dp[i-1][j-1])\n    return dp[-1][-1]\n\n# Example usage:\narr = [1, 15, 51, 45, 33, 100, 12, 18, 9]\nk = 9"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\ndef babylonian_squareroot(x):\n    \"\"\"\n    Compute square root of x using the babylonian method.\n    \"\"\"\n    guess = x / 2.0\n    while guess * guess != x:\n        guess = (guess + x / guess) / 2.0\n    return guess\n\n# Example usage"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef longest_palindromic_subsequence(string):\n    n = len(string)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if string[i] == string[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]\n\n# Example usage:\nstring = \"TENS FOR TENS\""], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\ndef harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of n-1.\n\n    Args:\n        n (int): The number of terms in the harmonic sum.\n\n    Returns:\n        float: The harmonic sum of n-1.\n    \"\"\"\n    return sum(1/i for i in range(1, n+1))\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\ndef intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n# Test\narr1 = [1, 2, 3, 5, 7, 8, 9, 10]\narr2 = [1, 2, 4, 8, 9]"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\ndef count_X(tuple_X, X):\n    count = 0\n    for x in tuple_X:\n        if x == X:\n            count += 1\n    return count\n\n# Example usage\ntuple_X = (10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)\nX = 8"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(lst, element):\n    return [element] + lst\n\n# Test\nlst = ['Red', 'Green', 'Black']\nelement = 'c'"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\nimport math\n\ndef convert(z):\n    \"\"\"\n    Convert complex number to polar coordinates.\n\n    Args:\n        z (complex): Complex number.\n\n    Returns:\n        tuple: Polar coordinates of the complex number.\n    \"\"\"\n    r = abs(z)\n    theta = math.atan2(z.imag, z.real)\n    return (r, theta)\n\n# Example usage\nz = complex(1, 0)"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\ndef count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count\n\n# Test\nlst = [1,2,'abc',1.2]"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\ndef words_ae(string):\n    words = string.split()\n    words_ae_list = []\n    for word in words:\n        if word[0] in 'ae':\n            words_ae_list.append(word)\n    return words_ae_list\n\n# Example usage:\nstring = \"python programe\""], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors, n):\n    \"\"\"\n    Returns all combinations of n items from the given list of colors.\n    \"\"\"\n    if n == 0:\n        return [[]]\n    result = []\n    for i in range(len(colors)):\n        for item in combinations_colors(colors[i+1:], n-1):\n            result.append([colors[i]] + item)\n    return result\n\n# Example usage:\ncolors = [\"Red\",\"Green\",\"Blue\"]\nn = 1\nresult = combinations_colors(colors, n)\nfor item in result:\n    print(item)\n# Output:\n# [('Red',), ('Green',), ('Blue',)]\n# [('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Blue')]\n# [('Red', 'Green', 'Blue')]\n# [('Red', 'Green', 'Blue'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Blue')]\n# [('Red', 'Green', 'Blue'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Blue'), ('Red'), ('Green'), ('Blue')]\n# [('Red', 'Green', 'Blue'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue')]\n# [('Red', 'Green', 'Blue'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue')]\n# [('Red', 'Green', 'Blue'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'), ('Blue'), ('Red'), ('Green'),"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\ndef count_Primes_nums(n):\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return len(primes)\n\n# Example usage:"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(x,y):\n    return y,x\n\n# Test\nx,y = swap_numbers(10,20)"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\ndef count_odd(lst):\n    return len([x for x in lst if x % 2 != 0])\n\n# Test"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\ndef maximize_elements(tuple1, tuple2):\n    \"\"\"\n    Returns a tuple of elements from both tuples,\n    with the maximum value in each element.\n    \"\"\"\n    return tuple(max(x, y) for x, y in zip(tuple1, tuple2))\n\n# Example usage:\ntuple1 = ((1, 3), (4, 5), (2, 9), (1, 10))\ntuple2 = ((6, 7), (3, 9), (1, 1), (7, 3))"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\ndef newman_prime(n):\n    \"\"\"\n    Returns the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 7\n    elif n == 4:\n        return 11\n    elif n == 5:\n        return 13\n    elif n == 6:\n        return 17\n    elif n == 7:\n        return 19\n    elif n == 8:\n        return 23\n    elif n == 9:\n        return 29\n    elif n == 10:\n        return 31\n    elif n == 11:\n        return 37\n    elif n == 12:\n        return 41\n    elif n == 13:\n        return 43\n    elif n == 14:\n        return 47\n    elif n == 15:\n        return 53\n    elif n == 16:\n        return 59\n    elif n == 17:\n        return 61\n    elif n == 18:\n        return 67\n    elif n == 19:\n        return 71\n    elif n == 20:\n        return 73\n    elif n == 21:\n        return 79\n    elif n == 22:\n        return 83\n    elif n == 23:\n        return 89\n    elif n == 24:\n        return 97\n    elif n == 25:\n        return 101\n    elif n == 26:\n        return 103\n    elif n == 27:\n        return 107\n    elif n == 28:\n        return 109\n    elif n == 29:\n        return 113\n    elif n == 30:\n        return 127\n    elif n == 31:\n        return 131\n    elif n == 32:\n        return 137\n    elif n == 33:\n        return 139\n    elif n == 34:\n        return 149\n    elif n == 35:\n        return 151\n    elif n == 36:\n        return 157\n    elif n == 37:\n        return 163\n    elif n == 38:\n        return 167\n    elif n == 39:\n        return 173\n    elif n == 40:\n        return 179\n    elif n == 41:\n        return 181\n    elif n == 42:\n        return 191\n    elif n == 43:\n        return 193\n    elif n == 44:\n        return 197\n    elif n == 45:\n        return 199\n    elif n == 46:\n        return 211\n    elif n == 47:\n        return 223\n    elif n == 48:\n        return 227\n    elif n == 49:\n        return 229\n    elif n == 50:\n        return 233\n    elif n == 51:\n        return 239\n    elif n == 52:\n        return 241\n    elif n == 53:\n        return 251\n    elif n == 54:\n        return 257\n    elif n == 55:\n        return 263\n    elif n == 56:\n        return 269\n    elif n == 57:\n        return 271\n    elif n == 58:\n        return 277\n    elif n == 59:\n        return 281\n    elif n == 60:\n        return 283\n    elif n == 61:\n        return 293\n    elif n == 62:\n        return 307\n    elif n == 63:\n        return 311\n    elif n == 64:\n        return 313\n    elif n == 65:\n        return 317\n    elif n == 66:\n        return 331\n    elif n == 67:\n        return 337\n    elif n == 68:\n        return 347\n    elif n == 69:\n        return 349\n    elif n == 70:\n        return 353\n    elif n == 71:\n        return 359\n    elif n == 72:\n        return 367\n    elif n == 73:\n        return 373\n    elif n == 74:\n        return 379\n    elif n == 75:\n        return 383\n    elif n == 76:\n        return 389\n    elif n == 77:\n        return 397\n    elif n == 78:\n        return 401\n    elif n == 79:\n        return 409\n    elif n == 80:\n        return 419\n    elif n == 81:\n        return 421\n    elif n == 82:\n        return 431\n    elif n == 83:\n        return 433\n    elif n == 84:\n        return 439\n    elif n == 85:\n        return 443\n    elif n == 86:\n        return 449\n    elif n == 87:\n        return 457\n    elif n == 88:\n        return 461\n    elif n == 89:\n        return 463\n    elif n == 90:\n        return 479\n    elif n == 91:\n        return 487\n    elif n == 92:\n        return 491\n    elif n == 93:\n        return 499\n    elif n == 94:\n        return 503\n    elif n == 95:\n        return 509\n    elif n == 96:\n        return 521\n    elif n == 97:\n        return 523\n    elif n == 98:\n        return 541\n    elif n == 99:\n        return 547\n    elif n == 100:\n        return 557\n    elif n == 101:\n        return 563\n    elif n == 102:\n        return 571\n    elif n == 103:\n        return 577\n    elif n == 104:\n        return 587\n    elif n == 105:\n        return 593\n    elif n == 106:\n        return 599\n    elif n == 107:\n        return 601\n    elif n == 108:\n        return 607\n    elif n == 109:\n        return 613\n    elif n == 110:\n        return 617\n    elif n == 111:\n        return 619\n    elif n == 112:\n        return 631\n    elif n == 113:\n        return 643\n    elif n == 114:\n        return 647\n    elif n == 115:\n        return 653\n    elif n == 116:\n        return 659\n    elif n == 117:\n        return 661\n    elif n == 118:\n        return 673\n    elif n == 119:\n        return 677\n    elif n == 120:\n        return 683\n    elif n == 121:\n        return 691\n    elif n == 122:\n        return 701\n    elif n == 123:\n        return 709\n    elif n == 124:\n        return 719\n    elif n == 125:\n        return 727\n    elif n == 126:\n        return 733\n    elif n == 127:\n        return 739\n    elif n == 128:\n        return 743\n    elif n == 129:\n        return 751\n    elif n == 130:\n        return 757\n    elif n == 131:\n        return 769\n    elif n == 132:\n        return 773\n    elif n == 133:\n        return 787\n    elif n == 134:\n        return 797\n    elif n == 135:\n        return 809\n    elif n == 136:\n        return 811\n    elif n == 137:\n        return 821\n    elif n == 138:\n        return 823\n    elif n == 139:\n        return 827\n    elif n == 140:\n        return 829"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\ndef division_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] // tuple2[i])\n    return result\n\n# Example usage:\ntuple1 = (10, 4, 6, 9)\ntuple2 = (5, 2, 3, 3)"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\ndef split_two_parts(lst, n):\n    \"\"\"\n    Split a given list into two parts where the length of the first part of the list is given.\n    \"\"\"\n    return lst[:n], lst[n:]\n\n# Example usage:\nlst = [1,1,2,3,4,4,5,1]\nn = 3\n\nfirst_part, second_part = split_two_parts(lst, n)"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\ndef merge_dict(dict1, dict2):\n    \"\"\"\n    Merge two dictionaries.\n\n    Args:\n        dict1 (dict): The first dictionary.\n        dict2 (dict): The second dictionary.\n\n    Returns:\n        dict: The merged dictionary.\n    \"\"\"\n    return {**dict1, **dict2}\n\n# Example usage:\ndict1 = {'a': 100, 'b': 200}\ndict2 = {'x': 300, 'y': 200}\n\nmerged_dict = merge_dict(dict1, dict2)"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    Args:\n        age (int): The age of the dog in human years.\n\n    Returns:\n        int: The age of the dog in dog's years.\n    \"\"\"\n    return age * 7\n\n# Example usage:"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\ndef list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\n# Test\nlst = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']\nn = 3"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side):\n    return 6*side**2\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\ndef square_Sum(n):\n    return sum(i**2 for i in range(1, n+1, 2))\n\n# Example usage"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\ndef find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * find_star_num(n - 1) + (n - 1) * find_star_num(n - 2)\n\n# Example usage"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\ndef ascii_value(char):\n    return ord(char)\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n\ndef sum_even_and_even_index(arr, n):\n    \"\"\"\n    This function takes a list of integers and an integer n as input.\n    It returns the sum of even numbers at even positions.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n\n# Test the function\narr = [5, 6, 12, 1, 18, 8]\nn = 6"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\ndef even_Power_Sum(n):\n    \"\"\"\n    This function calculates the sum of fifth power of first n even natural numbers.\n    \"\"\"\n    return sum(i**5 for i in range(2, n+1, 2))\n\n# Example usage"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\ndef rear_extract(records):\n    \"\"\"\n    This function takes a list of tuples records and returns the rear element of each tuple.\n    \"\"\"\n    return [record[-1] for record in records]\n\n# Example usage\nrecords = [(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\ndef substract_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        if tuple1[i] == tuple2[i]:\n            result.append(0)\n        else:\n            result.append(tuple1[i] - tuple2[i])\n    return tuple(result)\n\n# Example usage:\ntuple1 = (10, 4, 5)\ntuple2 = (2, 5, 18)"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function calculates sum of even index binomial coefficients.\n    \"\"\"\n    # Calculate binomial coefficient\n    binomial_coeff = binomial_coeff(n)\n\n    # Initialize sum\n    sum_even_index_binomial_coeff = 0\n\n    # Iterate over even index\n    for i in range(0, n, 2):\n        # Calculate even index binomial coefficient\n        even_index_binomial_coeff = binomial_coeff[i]\n\n        # Add even index binomial coefficient to sum\n        sum_even_index_binomial_coeff += even_index_binomial_coeff\n\n    return sum_even_index_binomial_coeff\n\n# Test"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\ndef get_Position(arr, target, index):\n    for i in range(index, len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\n# Test\narr = [2,5,4]\ntarget = 3\nindex = 2"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    return 3.14159 * radius * radius * height\n\n# Example usage:\nradius = 10\nheight = 5"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\ndef dict_filter(dictionary, value):\n    \"\"\"\n    Filter a dictionary based on values.\n\n    Args:\n        dictionary (dict): The dictionary to filter.\n        value (int): The value to filter by.\n\n    Returns:\n        dict: The filtered dictionary.\n    \"\"\"\n    return {key: val for key, val in dictionary.items() if val == value}\n\n# Example usage:\ndictionary = {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}\nvalue = 170\nfiltered_dict = dict_filter(dictionary, value)"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\ndef count_first_elements(tuple_list):\n    count = 0\n    for i in range(len(tuple_list)):\n        if tuple_list[i] == tuple_list[0]:\n            count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\ndef is_num_decagonal(n):\n    \"\"\"\n    Check if a number is a decagonal number.\n    \"\"\"\n    if n < 1:\n        return False\n    return (n * (3 * n - 1)) // 2 == n\n\ndef decagonal_num(n):\n    \"\"\"\n    Return the nth decagonal number.\n    \"\"\"\n    if n < 1:\n        return 0\n    return (n * (3 * n - 1)) // 2\n\n# Example usage:"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\ndef sequential_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return (True, i)\n    return (False, -1)\n\narr = [11,23,58,31,56,77,43,12,65,19]\ntarget = 31\n\nresult = sequential_search(arr, target)"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n\n# Test"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n# Test\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(num):\n    freq = {}\n    for digit in str(num):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit, count in freq.items():\n        if count <= digit:\n            return False\n    return True\n\n# Test cases"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(lst, target):\n    return all(item == target for item in lst)\n\n# Test\nlst = [\"green\", \"orange\", \"black\", \"white\"]\ntarget = \"blue\""], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_two_three(text):\n    if text.count('a') == 1 and text.count('b') == 2:\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\n# Test"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\ndef max_sub_array_sum_repeated(arr, k, n):\n    max_sum = float('-inf')\n    for i in range(n):\n        temp_arr = arr * k\n        max_sum = max(max_sum, max_sub_array_sum(temp_arr, k))\n    return max_sum\n\ndef max_sub_array_sum(arr, k):\n    max_sum = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            max_sum = max(max_sum, sum(arr[i:j+1]))\n    return max_sum\n\narr = [10, 20, -30, -1]\nk = 4\nn = 3"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\ndef square_Sum(n):\n    \"\"\"\n    This function returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    return sum(i**2 for i in range(2, n+1, 2))\n\n# Example usage:"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\ndef modular_inverse(arr, p, n):\n    \"\"\"\n    This function counts array elements having modular inverse under given prime number p equal to itself.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % p == arr[i] % n:\n            count += 1\n    return count\n\n# Example usage:\narr = [1, 6, 4, 5]\np = 7\nn = 4\n\nresult = modular_inverse(arr, p, n)"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\ndef odd_Days(year):\n    # check if year is divisible by 4\n    if year % 4 == 0:\n        # check if year is divisible by 100\n        if year % 100 == 0:\n            # check if year is divisible by 400\n            if year % 400 == 0:\n                return 2\n            else:\n                return 0\n        else:\n            return 1\n    else:\n        return 0\n\n# Test"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lst):\n    max_len = 0\n    max_list = []\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_list = l\n    return max_list, max_len\n\n# Test\nlst = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]\nmax_list, max_len = max_length(lst)"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\ndef count_no_of_ways(n, k):\n    # base case\n    if n == 0:\n        return 1\n    # if n is 1\n    if n == 1:\n        return k\n    # if n is 2\n    if n == 2:\n        return k * k\n    # if n is greater than 2\n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k) + count_no_of_ways(n - 3, k)\n\n# Example usage"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\ndef find(dividend, divisor):\n    if divisor == 0:\n        raise ZeroDivisionError(\"Cannot divide by zero\")\n    return dividend // divisor\n\n# Test"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\nimport math\n\ndef otherside_rightangle(a, b):\n    c = math.sqrt(a**2 + b**2)\n    return c\n\n# Test"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\ndef max_val(lst):\n    return max(lst)\n\n# Test"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\ndef sum_div(n):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    return sum(i for i in range(1, n+1) if n % i == 0)\n\n# Example usage:"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\ndef get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\n# Driver code\narr = [1,20,6,4,5]\nn = len(arr)"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\ndef flatten_list(lst):\n    \"\"\"\n    This function takes a nested list structure and returns a flattened list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\ndef intersection_nested_lists(list1, list2):\n    result = []\n    for element in list1:\n        if element in list2:\n            result.append(element)\n    return result\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nlist2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]\n"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\ndef max_aggregate(tuples):\n    max_val = 0\n    max_name = \"\"\n    for name, score in tuples:\n        if score > max_val:\n            max_val = score\n            max_name = name\n    return max_name, max_val\n\n# Example usage\nlist_of_tuples = [('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]\nmax_name, max_score = max_aggregate(list_of_tuples)"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\ndef count_binary_seq(n):\n    \"\"\"\n    Counts the number of binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        if sum(bin(i)[2:n+2].count('1') for j in range(n)) == sum(bin(i)[n+2:2*n+2].count('1') for j in range(n)):\n            count += 1\n    return count\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\ndef dict_depth(dictionary):\n    \"\"\"\n    Returns the depth of a dictionary.\n    \"\"\"\n    if not isinstance(dictionary, dict):\n        return 0\n    max_depth = 0\n    for key, value in dictionary.items():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, dict_depth(value) + 1)\n        else:\n            max_depth += 1\n    return max_depth\n\n# Example usage\ndictionary = {'a':1, 'b': {'c': {'d': {}}}}"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\ndef set_Bit_Number(n):\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\ndef solve(arr1, arr2):\n    count1, count2 = 0, 0\n    for i in range(len(arr1)):\n        if arr1[i] != arr2[i]:\n            count1 += 1\n        if arr2[i] != arr1[i]:\n            count2 += 1\n    return count1 == count2\n\n# Test\narr1 = [1,0,2]\narr2 = [3,2,1]"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\ndef find_Element(arr, rotations, index):\n    # calculate the number of rotations\n    num_rotations = rotations[0][0]\n    for i in range(1, len(rotations)):\n        num_rotations += rotations[i-1][0]\n\n    # calculate the index in the rotated array\n    rotated_index = (index + num_rotations) % len(arr)\n\n    # return the element at the rotated index\n    return arr[rotated_index]\n\n# Test the function\narr = [1,2,3,4,5]\nrotations = [[0,2],[0,3]]\nindex = 2"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\ndef start_withp(words):\n    \"\"\"\n    Returns a tuple of two words from a list of words starting with letter 'p'.\n    \"\"\"\n    return (word for word in words if word.startswith('p'))\n\n# Example usage:\nwords = [\"Python PHP\", \"Java JavaScript\", \"c c++\"]\nresult = start_withp(words)\nfor word in result:\n    print(word)\n# Output:\n# Python\n# PHP\n# Java\n# JavaScript\n# c\n# c++\n\n# Test the function"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\ndef max_sum_increasing_subseq(arr, n, k, i):\n    dp = [0] * n\n    dp[i] = arr[i]\n    for j in range(i+1, n):\n        if arr[j] > arr[i] and dp[j] < dp[i] + arr[j]:\n            dp[j] = dp[i] + arr[j]\n    if dp[k] == 0:\n        return 0\n    return dp[k]\n\narr = [1, 101, 2, 3, 100, 4, 5]\nn = len(arr)\nk = 4\ni = 6"], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tuple_list, index, max_val):\n    \"\"\"\n    This function takes a tuple and two indices, and returns a new tuple with the element at the given index replaced by the element at the given index plus the maximum value.\n    \"\"\"\n    return tuple_list[:index] + (tuple_list[index] + max_val,) + tuple_list[index+1:]\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\ndef large_product(list1, list2, n):\n    \"\"\"\n    This function takes two lists of integers and a number of products to find.\n    It returns a list of the largest products of two integers from each list.\n    \"\"\"\n    # Initialize an empty list to store the largest products\n    largest_products = []\n    \n    # Iterate through the first list\n    for i in range(len(list1)):\n        # Iterate through the second list\n        for j in range(len(list2)):\n            # Calculate the product of the two integers\n            product = list1[i] * list2[j]\n            # Add the product to the list of largest products\n            largest_products.append(product)\n    \n    # Sort the list of largest products in descending order\n    largest_products.sort(reverse=True)\n    \n    # Return the largest products of two integers from each list\n    return largest_products[:n]\n\n# Example usage\nlist1 = [1, 2, 3, 4, 5, 6]\nlist2 = [3, 6, 8, 9, 10, 6]\nn = 3"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\ndef maximum(x, y):\n    if x > y:\n        return x\n    else:\n        return y\n\n# Example usage"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\ndef string_to_tuple(string):\n    return tuple(string)\n\n# Test"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\ndef set_left_most_unset_bit(num):\n    return num | (1 << (num.bit_length() - 1))\n\n# Example usage"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\nimport math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Args:\n    radius (float): The radius of the base of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    return (1/3) * math.pi * radius**2 * height\n\n# Example usage:\nradius = 5\nheight = 12\nvolume = volume_cone(radius, height)"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\ndef print_pos_nos(lst):\n    \"\"\"\n    This function prints positive numbers in a list.\n    \"\"\"\n    for i in lst:\n        if i > 0:\n            print(i)\n\n# Test the function"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\ndef max_sum_rectangular_grid(grid, n):\n    max_sum = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if i == j:\n                continue\n            max_sum += grid[i][j]\n    return max_sum\n\n# Example usage\ngrid = [[1, 4, 5], [2, 0, 0]]\nn = 3"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\ndef find_Max_Len_Even(string):\n    words = string.split()\n    max_len = 0\n    max_len_even = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            max_len_even += 1\n            if max_len_even > max_len:\n                max_len = max_len_even\n        else:\n            max_len = 0\n    return max_len\n\n# Test"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\ndef find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == len(arr) - 1 or arr[mid + 1] != target:\n                return mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n# Example usage:\narr = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9]\ntarget = 5"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\ndef modified_encode(lst):\n    \"\"\"\n    Given a list of integers, return a list of tuples, where each tuple\n    contains the number of times an element appears in the list, and the\n    element itself.\n    \"\"\"\n    result = []\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            count += 1\n        else:\n            result.append((count, lst[i-1]))\n            count = 1\n    result.append((count, lst[-1]))\n    return result\n\ndef modified_decode(lst):\n    \"\"\"\n    Given a list of tuples, return a list of integers.\n    \"\"\"\n    result = []\n    for i in range(0, len(lst)-1):\n        result.append(lst[i][1] * lst[i][0] + lst[i+1][1] * lst[i+1][0])\n    return result\n\n# Example usage\nlst = [1,1,2,3,4,4,5,1]\nmodified_result = modified_encode(lst)"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\ndef max_volume(a, b, c):\n    \"\"\"\n    Returns the maximum volume of a cuboid with given sum of sides.\n    \"\"\"\n    return a*b*c\n\n# Example usage"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\nimport re\n\ndef find_long_word(string):\n    \"\"\"\n    This function finds all five characters long word in the given string by using regex.\n    \"\"\"\n    pattern = r'\\b\\w{5}\\b'\n    return re.findall(pattern, string)\n\n# Example usage\nstring = 'Please move back to strem'"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\ndef sum_difference(n):\n    \"\"\"\n    Calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n\n    Args:\n    n (int): The number of natural numbers.\n\n    Returns:\n    int: The difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n    \"\"\"\n    # Calculate the squared sum of first n natural numbers\n    squared_sum = sum(x**2 for x in range(1, n+1))\n    \n    # Calculate the sum of squared first n natural numbers\n    sum_of_squares = sum(x**2 for x in range(1, n+1))\n    \n    # Calculate the difference between the squared sum and the sum of squared first n natural numbers\n    difference = squared_sum - sum_of_squares\n    \n    return difference\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\ndef find_demlo(num):\n    \"\"\"\n    This function takes a number as input and returns the demlo number.\n    \"\"\"\n    demlo_num = \"\"\n    for i in range(len(num)):\n        if num[i] == '1':\n            demlo_num += str(int(num[i]) * (10**(len(num)-i-1)))\n        else:\n            demlo_num += str(int(num[i]) * (10**(len(num)-i-1)))\n    return demlo_num\n\n# Example usage"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\ndef position_min(lst):\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]\n\n# Test"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\ndef re_arrange(arr, n):\n    \"\"\"\n    This function rearranges the given array in alternating positive and negative items.\n    \"\"\"\n    # Initialize the result array\n    result = []\n    \n    # Iterate through the given array\n    for i in range(0, len(arr), 2):\n        # Add positive items\n        if i < n:\n            result.append(arr[i])\n        # Add negative items\n        else:\n            result.append(-arr[i])\n    \n    # Return the result array\n    return result\n\n# Test the function\narr = [-5, -2, 5, 2, 4, 7, 1, 8, 0, -8]\nn = 10"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\ndef sum_of_alternates(lst):\n    \"\"\"\n    Returns the sum of alternate chains of tuples.\n    \"\"\"\n    return sum(lst[::2]), sum(lst[1::2])\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\ndef get_Min_Squares(n):\n    \"\"\"\n    This function returns the minimum number of squares whose sum is equal to a given number.\n    \"\"\"\n    # Initialize a list to store the count of squares\n    count = [0] * (n + 1)\n    # Initialize a list to store the minimum number of squares\n    min_count = [0] * (n + 1)\n    # Initialize a list to store the minimum number of squares\n    min_squares = [0] * (n + 1)\n    # Initialize a list to store the minimum number of squares\n    min_squares_list = []\n    # Iterate from 1 to n\n    for i in range(1, n + 1):\n        # Initialize a variable to store the minimum number of squares\n        min_count[i] = float('inf')\n        # Iterate from 1 to sqrt(i)\n        for j in range(1, int(i ** 0.5) + 1):\n            # If i - j is divisible by j\n            if i - j >= 0 and i - j % j == 0:\n                # Update the minimum count\n                min_count[i] = min(min_count[i], min_count[i - j] + 1)\n                # Update the minimum number of squares\n                min_squares[i] = min_squares[i - j] + 1\n                # Update the minimum number of squares list\n                if min_squares[i] > min_squares_list[i]:\n                    min_squares_list[i] = min_squares[i]\n    # Iterate from 1 to n\n    for i in range(1, n + 1):\n        # If min_count[i] is equal to min_count[i - 1]\n        if min_count[i] == min_count[i - 1]:\n            # Add the minimum number of squares to the list\n            min_squares_list.append(min_squares[i])\n    # Return the minimum number of squares\n    return min_squares_list\n\n# Test"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\ndef most_occurrences(strings):\n    # Your code here\n    pass\n\n# Test"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if a == b and b == c:\n        return True\n    else:\n        return False\n\n# Test"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(lst, n, k=None):\n    \"\"\"\n    Rotate a given list by specified number of items to the left direction.\n\n    Args:\n        lst (list): The list to be rotated.\n        n (int): The number of items to rotate.\n        k (int, optional): The number of items to rotate. Defaults to None.\n\n    Returns:\n        list: The rotated list.\n    \"\"\"\n    if k is None:\n        k = n\n    return lst[k:] + lst[:k]\n\n# Example usage:\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = 3\nk = 4"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\ndef count_negatives(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nimport re\n\ndef find_char(string):\n    \"\"\"\n    Find all three, four, five characters long words in the given string by using regex.\n    \"\"\"\n    pattern = r'\\b\\w{3,5}\\b'\n    return re.findall(pattern, string)\n\n# Example usage\nstring = 'For the four consumer complaints contact manager AKR reddy'"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\ndef count_unset_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\ndef char_frequency(string):\n    frequency = {}\n    for char in string:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency\n\n# Test\nstring = 'python'"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\ndef Sort(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n# Test"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\ndef check_Validity(a,b,c):\n    if a + b <= c:\n        return False\n    elif a + c <= b:\n        return False\n    elif b + c <= a:\n        return False\n    else:\n        return True\n\n# Test"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a, n, d):\n    return n * (a + (a + d * (n - 1))) / 2\n\n# Test"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\ndef check_monthnum(month):\n    if month == \"February\":\n        return True\n    else:\n        return False\n\n# Test the function"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\ndef text_match_word(text, word):\n    \"\"\"\n    Returns a string with the matched word at the end of the string.\n    \"\"\"\n    if text.endswith(word):\n        return f\"Found a match! {text.endswith(word)}\"\n    else:\n        return f\"No match! {text.endswith(word)}\"\n\n# Example usage:\ntext = \"python.\"\nword = \"python\""], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i] == string[j-1]:\n                count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\ndef find_Divisor(start, end):\n    max_divisor = 0\n    for i in range(1, min(end, start + 1)):\n        if start % i == 0 and end % i == 0:\n            max_divisor = i\n    return max_divisor\n\n# Example usage\nstart = 2\nend = 2"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\ndef sum_three_smallest_nums(nums):\n    nums.sort()\n    return sum(nums[:3])\n\n# Example usage:\nnums = [10,20,30,40,50,60,7]"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\ndef set_to_tuple(set_obj):\n    return tuple(sorted(set_obj))\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\ndef find_minimum_range(arrs):\n    min_range = float('inf')\n    for arr in arrs:\n        arr.sort()\n        for i in range(len(arr) - 1):\n            if arr[i] + arr[i+1] < min_range:\n                min_range = arr[i] + arr[i+1]\n    return min_range\n\n# Test\narrs = [[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\ndef dig_let(string):\n    \"\"\"\n    Calculate the number of digits and letters in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        tuple: A tuple containing the number of digits and letters.\n    \"\"\"\n    digits = 0\n    letters = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return digits, letters\n\n# Example usage\nstring = \"python\"\ndigits, letters = dig_let(string)"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\ndef count_Odd_Squares(start, end):\n    count = 0\n    for num in range(start, end+1):\n        if num % 2 != 0:\n            count += num**(num//2)\n    return count\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\ndef diff_consecutivenums(lst):\n    diff_list = []\n    for i in range(1, len(lst)):\n        diff_list.append(lst[i] - lst[i-1])\n    return diff_list\n\n# Test\nlst = [1, 1, 3, 4, 4, 5, 6, 7]"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\ndef zigzag(n, k):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 7\n    elif n == 6:\n        return 9\n    elif n == 7:\n        return 11\n    elif n == 8:\n        return 13\n    elif n == 9:\n        return 15\n    elif n == 10:\n        return 17\n    elif n == 11:\n        return 19\n    elif n == 12:\n        return 21\n    elif n == 13:\n        return 23\n    elif n == 14:\n        return 25\n    elif n == 15:\n        return 27\n    elif n == 16:\n        return 29\n    elif n == 17:\n        return 31\n    elif n == 18:\n        return 33\n    elif n == 19:\n        return 35\n    elif n == 20:\n        return 37\n    elif n == 21:\n        return 39\n    elif n == 22:\n        return 41\n    elif n == 23:\n        return 43\n    elif n == 24:\n        return 45\n    elif n == 25:\n        return 47\n    elif n == 26:\n        return 49\n    elif n == 27:\n        return 51\n    elif n == 28:\n        return 53\n    elif n == 29:\n        return 55\n    elif n == 30:\n        return 57\n    elif n == 31:\n        return 59\n    elif n == 32:\n        return 61\n    elif n == 33:\n        return 63\n    elif n == 34:\n        return 65\n    elif n == 35:\n        return 67\n    elif n == 36:\n        return 69\n    elif n == 37:\n        return 71\n    elif n == 38:\n        return 73\n    elif n == 39:\n        return 75\n    elif n == 40:\n        return 77\n    elif n == 41:\n        return 79\n    elif n == 42:\n        return 81\n    elif n == 43:\n        return 83\n    elif n == 44:\n        return 85\n    elif n == 45:\n        return 87\n    elif n == 46:\n        return 89\n    elif n == 47:\n        return 91\n    elif n == 48:\n        return 93\n    elif n == 49:\n        return 95\n    elif n == 50:\n        return 97\n    elif n == 51:\n        return 99\n    elif n == 52:\n        return 101\n    elif n == 53:\n        return 103\n    elif n == 54:\n        return 105\n    elif n == 55:\n        return 107\n    elif n == 56:\n        return 109\n    elif n == 57:\n        return 111\n    elif n == 58:\n        return 113\n    elif n == 59:\n        return 115\n    elif n == 60:\n        return 117\n    elif n == 61:\n        return 119\n    elif n == 62:\n        return 121\n    elif n == 63:\n        return 123\n    elif n == 64:\n        return 125\n    elif n == 65:\n        return 127\n    elif n == 66:\n        return 129\n    elif n == 67:\n        return 131\n    elif n == 68:\n        return 133\n    elif n == 69:\n        return 135\n    elif n == 70:\n        return 137\n    elif n == 71:\n        return 139\n    elif n == 72:\n        return 141\n    elif n == 73:\n        return 143\n    elif n == 74:\n        return 145\n    elif n == 75:\n        return 147\n    elif n == 76:\n        return 149\n    elif n == 77:\n        return 151\n    elif n == 78:\n        return 153\n    elif n == 79:\n        return 155\n    elif n == 80:\n        return 157\n    elif n == 81:\n        return 159\n    elif n == 82:\n        return 161\n    elif n == 83:\n        return 163\n    elif n == 84:\n        return 165\n    elif n == 85:\n        return 167\n    elif n == 86:\n        return 169\n    elif n == 87:\n        return 171\n    elif n == 88:\n        return 173\n    elif n == 89:\n        return 175\n    elif n == 90:\n        return 177\n    elif n == 91:\n        return 179\n    elif n == 92:\n        return 181\n    elif n == 93:\n        return 183\n    elif n == 94:\n        return 185\n    elif n == 95:\n        return 187\n    elif n == 96:\n        return 189\n    elif n == 97:\n        return 191\n    elif n == 98:\n        return 193\n    elif n == 99:\n        return 195\n    elif n == 100:\n        return 197\n    elif n == 101:\n        return 199\n    elif n == 102:\n        return 201\n    elif n == 103:\n        return 203\n    elif n == 104:\n        return 205\n    elif n == 105:\n        return 207\n    elif n == 106:\n        return 209\n    elif n == 107:\n        return 211\n    elif n == 108:\n        return 213\n    elif n == 109:\n        return 215\n    elif n == 110:\n        return 217\n    elif n == 111:\n        return 219\n    elif n == 112:\n        return 221\n    elif n == 113:\n        return 223\n    elif n == 114:\n        return 225\n    elif n == 115:\n        return 227\n    elif n == 116:\n        return 229\n    elif n == 117:\n        return 231\n    elif n == 118:\n        return 233\n    elif n == 119:\n        return 235\n    elif n == 120:\n        return 237\n    elif n == 121:\n        return 239\n    elif n == 122:\n        return 241\n    elif n == 123:\n        return 243\n    elif n == 124:\n        return 245\n    elif n == 125:\n        return 247\n    elif n == 126:\n        return 249\n    elif n == 127:\n        return 251\n    elif n == 128:\n        return 253\n    elif n == 129:\n        return 255\n    elif n == 130:\n        return 257\n    elif n == 131:\n        return 259\n    elif n == 132:\n        return 261\n    elif n == 133:\n        return 263\n    elif n == 134:\n        return 265\n    elif n == 135:\n        return 267\n    elif n == 136:\n        return 269\n    elif n == 137:\n        return 271\n    elif n == 138:\n        return 273\n    elif n == 139:\n        return 275\n    elif n == 140:\n        return 277\n    elif n == 141:\n        return 279\n    elif n == 142:\n        return 281\n    elif n == 143:\n        return 283\n    elif n == 144:\n        return 285\n    elif n == 145:"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\ndef count_Squares(width, height):\n    return width * height * 4\n\n# Example usage:"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n, values):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for val in values:\n        for i in range(val, n + 1):\n            dp[i] += dp[i - val]\n    return dp[n]\n\n# Example usage:"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\ndef check(string):\n    return string.isalnum() == False\n\n# Example usage:"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\ndef minimum_Length(string):\n    \"\"\"\n    This function takes a string as input and returns the minimum length of the string\n    by removing occurrence of only one character.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i] == string[i+1]:\n            count += 1\n    return count\n\n# Test the function\nstring = \"mnm\""], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\ndef first_Element(arr, k, n):\n    count_dict = {}\n    for i in range(n):\n        if arr[i] in count_dict:\n            count_dict[arr[i]] += 1\n        else:\n            count_dict[arr[i]] = 1\n    for i in range(n):\n        if count_dict[arr[i]] == k:\n            return arr[i]\n\narr = [0,1,2,3,4,5]\nk = 6\nn = len(arr)"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\ndef unique_Characters(string):\n    char_list = list(string)\n    char_set = set(char_list)\n    return len(char_set) == len(char_list)\n\n# Test the function"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(lst, index):\n    \"\"\"\n    Remove a specified column from a given nested list.\n\n    Args:\n        lst (list): The nested list.\n        index (int): The index of the column to remove.\n\n    Returns:\n        list: The modified nested list.\n    \"\"\"\n    return [row[index] for row in lst]\n\n# Example usage:\nnested_list = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\ncolumn_index = 0\n\nresult = remove_column(nested_list, column_index)"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\ndef tn_ap(a, d, n):\n    return a + (n-1)*d\n\n# Example usage:\na, d, n = 1, 5, 2"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\ndef count_Rectangles(r):\n    return (r**2) * 4\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\ndef find_angle(a, b):\n    return 180 - a - b\n\n# Test"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n\ndef find_max(tuples):\n    max_val = float('-inf')\n    for tup in tuples:\n        for val in tup:\n            if val > max_val:\n                max_val = val\n    return max_val\n\n# Example usage"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\ndef moddiv_list(list1, list2):\n    return map(lambda x, y: x % y, list1, list2)\n\nlist1 = [4,5,6]\nlist2 = [1, 2, 3]\n"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\ndef Check_Solution(a,b,c):\n    \"\"\"\n    This function checks whether one root of the quadratic equation is twice of the other or not.\n    \"\"\"\n    # calculate the discriminant\n    d = b**2 - 4*a*c\n    \n    # check if the discriminant is positive\n    if d > 0:\n        # calculate the roots\n        root1 = (-b + (d**0.5))/(2*a)\n        root2 = (-b - (d**0.5))/(2*a)\n        \n        # check if the roots are equal\n        if root1 == root2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n\n# Test"], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\ndef get_carol(n):\n    if n == 0:\n        return 1\n    return get_carol(n-1) + 4*get_carol(n-1) + 1\n\n# Test the function"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\ndef remove_empty(lst):\n    \"\"\"\n    Remove empty lists from a given list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        list: A list of lists with empty lists removed.\n    \"\"\"\n    return [item for item in lst if item]\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\ndef max_occurrences(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the item with maximum occurrences.\n    \"\"\"\n    # Create a dictionary to store the count of each item\n    count_dict = {}\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    # Find the item with maximum occurrences\n    max_item = max(count_dict, key=count_dict.get)\n\n    # Return the item with maximum occurrences\n    return max_item\n\n# Example usage\nlst = [1,2,3,1,2,3,12,4,2]"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\ndef add_K_element(lst, k):\n    return [(x[0] + k, x[1] + k, x[2] + k) for x in lst]\n\n# Example usage:\nlst = [(1, 3, 4), (2, 4, 6), (3, 8, 1)]\nk = 4"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n\ndef min_flip_to_make_string_alternate(binary_string: str) -> int:\n    \"\"\"\n    This function takes a binary string as input and returns the minimum number of flips required to make the given binary string a sequence of alternate characters.\n    \"\"\"\n    n = len(binary_string)\n    count = 0\n    for i in range(n):\n        if binary_string[i] == binary_string[i+1]:\n            count += 1\n        else:\n            pass\n    return count\n\n# Example usage\nbinary_string = \"0001010111\""], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(num):\n    count = 0\n    while num > 0:\n        num = num // 10\n        count += 1\n    return count\n\n# Test"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(nums):\n    \"\"\"\n    Find the largest product of the pair of adjacent elements from a given list of integers.\n    \"\"\"\n    if len(nums) < 2:\n        return None\n    max_product = float('-inf')\n    for i in range(len(nums)-1):\n        max_product = max(max_product, nums[i]*nums[i+1])\n    return max_product\n\n# Example usage:"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\ndef repeat_tuples(t, n):\n    return tuple(t for _ in range(n))\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\ndef lateralsurface_cuboid(length, width, height):\n    return 2*(length*width + width*height + height*length)\n\n# Example usage:"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\ndef float_sort(lst):\n    return sorted(lst, key=lambda x: float(x[1]))\n\n# Test"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\ndef smallest_missing(arr, start, end):\n    for i in range(start, end + 1):\n        if arr[i] != i:\n            return i\n    return end + 1\n\n# Example usage\narr = [0, 1, 2, 3, 4, 5, 6]\nstart, end = 0, len(arr) - 1"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\ndef heap_assending(lst):\n    heapq.heapify(lst)\n    return lst\n\n# Test\nlst = [18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(l, b, h):\n    return l*b*h\n\n# Test"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(string):\n    if len(string) == 1:\n        return [string]\n    result = []\n    for i in range(len(string)):\n        char = string[i]\n        rest = string[:i] + string[i+1:]\n        for perm in permute_string(rest):\n            result.append(char + perm)\n    return result\n\n# Example usage:"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num, multiple):\n    return (num + multiple//2) // multiple * multiple\n\n# Test"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n\ndef remove_replica(tup):\n    return tuple(set(tup))\n\n# Test"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string, char):\n    result = \"\"\n    for c in string:\n        if c != char:\n            result += c\n    return result\n\n# Test\nstring = \"aba\"\nchar = 'a'"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\ndef move_first(lst):\n    lst.insert(0, lst.pop())\n    return lst\n\n# Test"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(length, breadth, height):\n    surface_area = 2*(length*breadth + breadth*height + height*length)\n    return surface_area\n\n# Test"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\ndef multi_list(row, col):\n    return [[0 for _ in range(col)] for _ in range(row)]\n\n# Example usage:"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\ndef index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\n# Example usage:\nlst = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]\nindex = 0"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\ndef find_rotation_count(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] > arr[right]:\n            return right - left\n        left += 1\n        right -= 1\n    return 0\n\n# Example usage:\narr = [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\ndef even_bit_toggle_number(num):\n    return num | (1 << (num.bit_length() - 1))\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\ndef frequency_Of_Smallest(arr):\n    min_val = min(arr)\n    count = arr.count(min_val)\n    return count\n\n# Test\narr = [1,2,3,4,3]"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\ndef get_perrin(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n\n# Test"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\ndef swap_count(string):\n    stack = []\n    count = 0\n    for char in string:\n        if char == \"[\":\n            stack.append(char)\n        elif char == \"]\":\n            if not stack:\n                count += 1\n            else:\n                stack.pop()\n    return count\n\n# Test cases"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\ndef even_or_odd(hex_num):\n    hex_num = hex_num.upper()\n    if hex_num[0] == \"0\" and hex_num[1] == \"0\":\n        return \"Even\"\n    elif hex_num[0] == \"1\" and hex_num[1] == \"0\":\n        return \"Even\"\n    elif hex_num[0] == \"2\" and hex_num[1] == \"0\":\n        return \"Even\"\n    elif hex_num[0] == \"3\" and hex_num[1] == \"0\":\n        return \"Even\"\n    elif hex_num[0] == \"4\" and hex_num[1] == \"0\":\n        return \"Even\"\n    elif hex_num[0] == \"5\" and hex_num[1] == \"0\":\n        return \"Even\"\n    elif hex_num[0] == \"6\" and hex_num[1] == \"0\":\n        return \"Even\"\n    elif hex_num[0] == \"7\" and hex_num[1] == \"0\":\n        return \"Even\"\n    elif hex_num[0] == \"8\" and hex_num[1] == \"0\":\n        return \"Even\"\n    elif hex_num[0] == \"9\" and hex_num[1] == \"0\":\n        return \"Even\"\n    elif hex_num[0] == \"A\" and hex_num[1] == \"0\":\n        return \"Even\"\n    elif hex_num[0] == \"B\" and hex_num[1] == \"0\":\n        return \"Even\"\n    elif hex_num[0] == \"C\" and hex_num[1] == \"0\":\n        return \"Even\"\n    elif hex_num[0] == \"D\" and hex_num[1] == \"0\":\n        return \"Even\"\n    elif hex_num[0] == \"E\" and hex_num[1] == \"0\":\n        return \"Even\"\n    elif hex_num[0] == \"F\" and hex_num[1] == \"0\":\n        return \"Even\"\n    elif hex_num[0] == \"0\" and hex_num[1] == \"1\":\n        return \"Odd\"\n    elif hex_num[0] == \"1\" and hex_num[1] == \"1\":\n        return \"Odd\"\n    elif hex_num[0] == \"2\" and hex_num[1] == \"1\":\n        return \"Odd\"\n    elif hex_num[0] == \"3\" and hex_num[1] == \"1\":\n        return \"Odd\"\n    elif hex_num[0] == \"4\" and hex_num[1] == \"1\":\n        return \"Odd\"\n    elif hex_num[0] == \"5\" and hex_num[1] == \"1\":\n        return \"Odd\"\n    elif hex_num[0] == \"6\" and hex_num[1] == \"1\":\n        return \"Odd\"\n    elif hex_num[0] == \"7\" and hex_num[1] == \"1\":\n        return \"Odd\"\n    elif hex_num[0] == \"8\" and hex_num[1] == \"1\":\n        return \"Odd\"\n    elif hex_num[0] == \"9\" and hex_num[1] == \"1\":\n        return \"Odd\"\n    elif hex_num[0] == \"A\" and hex_num[1] == \"1\":\n        return \"Odd\"\n    elif hex_num[0] == \"B\" and hex_num[1] == \"1\":\n        return \"Odd\"\n    elif hex_num[0] == \"C\" and hex_num[1] == \"1\":\n        return \"Odd\"\n    elif hex_num[0] == \"D\" and hex_num[1] == \"1\":\n        return \"Odd\"\n    elif hex_num[0] == \"E\" and hex_num[1] == \"1\":\n        return \"Odd\"\n    elif hex_num[0] == \"F\" and hex_num[1] == \"1\":\n        return \"Odd\"\n    elif hex_num[0] == \"0\" and hex_num[1] == \"2\":\n        return \"Odd\"\n    elif hex_num[0] == \"1\" and hex_num[1] == \"2\":\n        return \"Odd\"\n    elif hex_num[0] == \"2\" and hex_num[1] == \"2\":\n        return \"Odd\"\n    elif hex_num[0] == \"3\" and hex_num[1] == \"2\":\n        return \"Odd\"\n    elif hex_num[0] == \"4\" and hex_num[1] == \"2\":\n        return \"Odd\"\n    elif hex_num[0] == \"5\" and hex_num[1] == \"2\":\n        return \"Odd\"\n    elif hex_num[0] == \"6\" and hex_num[1] == \"2\":\n        return \"Odd\"\n    elif hex_num[0] == \"7\" and hex_num[1] == \"2\":\n        return \"Odd\"\n    elif hex_num[0] == \"8\" and hex_num[1] == \"2\":\n        return \"Odd\"\n    elif hex_num[0] == \"9\" and hex_num[1] == \"2\":\n        return \"Odd\"\n    elif hex_num[0] == \"A\" and hex_num[1] == \"2\":\n        return \"Odd\"\n    elif hex_num[0] == \"B\" and hex_num[1] == \"2\":\n        return \"Odd\"\n    elif hex_num[0] == \"C\" and hex_num[1] == \"2\":\n        return \"Odd\"\n    elif hex_num[0] == \"D\" and hex_num[1] == \"2\":\n        return \"Odd\"\n    elif hex_num[0] == \"E\" and hex_num[1] == \"2\":\n        return \"Odd\"\n    elif hex_num[0] == \"F\" and hex_num[1] == \"2\":\n        return \"Odd\"\n    elif hex_num[0] == \"0\" and hex_num[1] == \"3\":\n        return \"Odd\"\n    elif hex_num[0] == \"1\" and hex_num[1] == \"3\":\n        return \"Odd\"\n    elif hex_num[0] == \"2\" and hex_num[1] == \"3\":\n        return \"Odd\"\n    elif hex_num[0] == \"3\" and hex_num[1] == \"3\":\n        return \"Odd\"\n    elif hex_num[0] == \"4\" and hex_num[1] == \"3\":\n        return \"Odd\"\n    elif hex_num[0] == \"5\" and hex_num[1] == \"3\":\n        return \"Odd\"\n    elif hex_num[0] == \"6\" and hex_num[1] == \"3\":\n        return \"Odd\"\n    elif hex_num[0] == \"7\" and hex_num[1] == \"3\":\n        return \"Odd\"\n    elif hex_num[0] == \"8\" and hex_num[1] == \"3\":\n        return \"Odd\"\n    elif hex_num[0] == \"9\" and hex_num[1] == \"3\":\n        return \"Odd\"\n    elif hex_num[0] == \"A\" and hex_num[1] == \"3\":\n        return \"Odd\"\n    elif hex_num[0] == \"B\" and hex_num[1] == \"3\":\n        return \"Odd\"\n    elif hex_num[0] == \"C\" and hex_num[1] == \"3\":\n        return \"Odd\"\n    elif hex_num[0] == \"D\" and hex_num[1] == \"3\":\n        return \"Odd\"\n    elif hex_num[0] == \"E\" and hex_num[1] == \"3\":\n        return \"Odd\"\n    elif hex_num[0] == \"F\" and hex_num[1] == \"3\":\n        return \"Odd\"\n    elif hex_num[0] == \"0\" and hex_num[1] == \"4\":\n        return \"Odd\"\n    elif hex_num[0] == \"1\" and hex_num[1] == \"4\":\n        return \"Odd\"\n    elif hex_num[0] == \"2\" and hex_num[1] == \"4\":\n        return \"Odd\"\n    elif hex_num[0] == \"3\" and hex_num[1] == \"4\":\n        return \"Odd\"\n    elif hex_num[0] == \"4\" and hex_num[1] == \"4\":\n        return \""], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    This function returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # First, we check if n is a power of 2.\n    if n == 1:\n        return 1\n    # If n is not a power of 2, we calculate the highest power of 2 that is less than or equal to n.\n    # We do this by subtracting 1 from n and then dividing by 2.\n    # We then check if the result is a power of 2.\n    # If it is, we return the result.\n    # If it is not, we recursively call the function with the result and divide it by 2.\n    # We continue this process until we reach a power of 2.\n    if n & (n - 1) == 0:\n        return n\n    else:\n        return highest_Power_of_2(n // 2)\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n# Example usage:"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\ndef add_string(lst, string):\n    \"\"\"\n    Add a string to the beginning of all items in a list.\n\n    Args:\n        lst (list): A list of items.\n        string (str): A string to be added to the beginning of each item.\n\n    Returns:\n        list: A list of items with the string added to the beginning of each item.\n    \"\"\"\n    return [string + item for item in lst]\n\n# Example usage:\nlst = [1,2,3,4]\nstring = 'temp'"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\ndef convert_list_dictionary(list_of_strings, list_of_values, list_of_keys):\n    result = {}\n    for i in range(len(list_of_strings)):\n        result[list_of_strings[i]] = {list_of_keys[i]: list_of_values[i]}\n    return result\n\n# Test\nlist_of_strings = [\"S001\", \"S002\", \"S003\", \"S004\"]\nlist_of_values = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]\nlist_of_keys = [0, 1, 2, 3]\n"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\ndef get_max_sum(n):\n    if n <= 1:\n        return n\n    elif n % 2 == 0:\n        return max(get_max_sum(n//2), n)\n    elif n % 3 == 0:\n        return max(get_max_sum(n//3), n)\n    elif n % 5 == 0:\n        return max(get_max_sum(n//5), n)\n    else:\n        return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//5), n)\n\n# Test the function"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length_list(lst):\n    return max(lst, key=len)\n\n# Test\nlst = [[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\ndef check_distinct(tuple_to_check):\n    return tuple_to_check == tuple(set(tuple_to_check))\n\n# Test cases"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\ndef first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    return None\n\n# Example usage:"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\nimport re\n\ndef check_char(string):\n    pattern = r'^.*?\\1$'\n    return bool(re.search(pattern, string))\n\n# Test"], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\ndef median_numbers(a, b, c):\n    \"\"\"\n    This function calculates the median of three numbers.\n    \"\"\"\n    # Sort the numbers\n    sorted_nums = sorted([a, b, c])\n    \n    # Calculate the median\n    if len(sorted_nums) % 2 == 0:\n        median = (sorted_nums[len(sorted_nums) // 2 - 1] + sorted_nums[len(sorted_nums) // 2]) / 2\n    else:\n        median = sorted_nums[len(sorted_nums) // 2]\n    \n    return median\n\n# Example usage:"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\ndef sum_of_digits(nums):\n    \"\"\"\n    Compute the sum of digits of each number of a given list.\n    \"\"\"\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n\n# Example usage:"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\ndef bitwise_xor(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] ^ tuple2[i])\n    return tuple(result)\n\n# Example usage:\ntuple1 = (10, 4, 6, 9)\ntuple2 = (5, 2, 3, 3)"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\ndef extract_freq(lst):\n    freq = {}\n    for tup in lst:\n        for item in tup:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq\n\n# Example usage:\nlst = [(3, 4), (1, 2), (4, 3), (5, 6)]"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\ndef add_nested_tuples(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append((tuple1[i][0] + tuple2[i][0], tuple1[i][1] + tuple2[i][1]))\n    return result\n\n# Example usage\ntuple1 = ((1, 3), (4, 5), (2, 9), (1, 10))\ntuple2 = ((6, 7), (3, 9), (1, 1), (7, 3))"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\ndef ncr_modp(n, k, p):\n    \"\"\"\n    Compute the value of nCr mod p.\n    \"\"\"\n    # Base case\n    if k == 0:\n        return 1\n    # Base case\n    if k == n:\n        return 1\n    # Recursive case\n    return (ncr_modp(n-1, k-1, p) * ncr_modp(k, k, p)) % p\n\n# Example usage\nn, k, p = 10, 2, 13"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\nimport re\n\ndef is_valid_URL(url):\n    pattern = r\"^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w.-]+)+[\\w\\-._~:/?#[\\]@!$&'()*+,;=.]+$\"\n    return bool(re.match(pattern, url))\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\ndef minimum(x, y):\n    if x < y:\n        return x\n    else:\n        return y\n\n# Example usage:"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\ndef check_tuplex(tuple_list, element):\n    for item in tuple_list:\n        if item == element:\n            return True\n    return False\n\n# Test"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n# Test the function"], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\ndef rearrange_bigger(num):\n    \"\"\"\n    This function takes a number as input and returns the next bigger number by rearranging the digits of the given number.\n    \"\"\"\n    # Get the digits of the number\n    digits = list(str(num))\n    \n    # Initialize the result\n    result = int(''.join(sorted(digits, reverse=True)))\n    \n    # Check if the result is greater than the input number\n    if result > num:\n        return result\n    else:\n        return num\n\n# Example usage"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(arr1, arr2, k):\n    \"\"\"\n    This function returns k number of pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    pairs = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                pairs.append([arr1[i], arr2[j]])\n    return pairs[:k]\n\narr1 = [1,3,7]\narr2 = [2,4,6]\nk = 2"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(lst):\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n\n# Test"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\ndef min_val(lst):\n    min_val = lst[0]\n    for item in lst:\n        if isinstance(item, int):\n            if item < min_val:\n                min_val = item\n        elif isinstance(item, str):\n            if item < min_val:\n                min_val = item\n    return min_val\n\n# Test the function"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\nimport re\n\ndef snake_to_camel(string):\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), string)\n\n# Example usage"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\ndef remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]\n\n# Example usage\nnumbers = [1,2,3,4,5,6,7,8,9]\nresult = remove_odd(numbers)"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\ndef extract_nth_element(lst, n):\n    return [item[n] for item in lst]\n\n# Example usage:\nlst = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\ndef overlapping(seq1, seq2):\n    for elem in seq1:\n        if elem in seq2:\n            return True\n    return False\n\n# Test"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\ndef max_Product(arr):\n    max_left = max_right = float('-inf')\n    min_left = min_right = float('inf')\n    for i in range(len(arr)):\n        if arr[i] > max_left:\n            max_right = max_left\n            max_left = arr[i]\n        elif arr[i] < max_left:\n            max_right = arr[i]\n        if arr[i] > min_right:\n            min_left = max_right\n            min_right = arr[i]\n        elif arr[i] < min_right:\n            min_left = min_right\n            min_right = arr[i]\n    return (max_left * max_right, min_left * min_right)\n\n# Example usage:\narr = [1,2,3,4,7,0,8,4]"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(num):\n    if num == 0:\n        return 0\n    elif num < 3:\n        return num\n    else:\n        return num//3 + breakSum(num//3) + breakSum(num//3 - (num//3)%3)\n\n# Test"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\ndef group_tuples(tuples):\n    \"\"\"\n    Given list of tuple, return list of tuples with common first element\n    \"\"\"\n    common_first_elements = []\n    for t1, t2 in tuples:\n        if t1 == t2:\n            common_first_elements.append(t1)\n    return common_first_elements\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\ndef Find_Max(lst):\n    max_len = 0\n    max_list = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i] + lst[j]) > max_len:\n                max_len = len(lst[i] + lst[j])\n                max_list = lst[i] + lst[j]\n    return max_list\n\n# Test"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\ndef round_and_sum(nums):\n    \"\"\"\n    This function takes a list of numbers and rounds each number to the nearest integer.\n    It then calculates the total sum of the rounded numbers and multiplies it by the length of the list.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        total_sum += round(num)\n    return total_sum * len(nums)\n\n# Example usage\nnums = [22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\ndef cube_Sum(n):\n    return sum(x**3 for x in range(2, n+1, 2))\n\n# Test"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\ndef concatenate_tuple(tuple_of_str):\n    return '-'.join(str(item) for item in tuple_of_str)\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\ndef find_Average_Of_Cube(n):\n    \"\"\"\n    This function calculates the average of cubes of first n natural numbers.\n    \"\"\"\n    # Initialize sum of cubes\n    sum_of_cubes = 0\n    \n    # Iterate through the range of n\n    for i in range(1, n + 1):\n        # Calculate the cube of the current number\n        cube = i ** 3\n        \n        # Add the cube to the sum of cubes\n        sum_of_cubes += cube\n    \n    # Calculate the average of cubes\n    average_of_cubes = sum_of_cubes / n\n    \n    # Return the average of cubes\n    return average_of_cubes\n\n# Example usage"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\ndef get_maxgold(matrix, x, y):\n    if x < 0 or x >= len(matrix) or y < 0 or y >= len(matrix[0]):\n        return -1\n    if matrix[x][y] == 0:\n        return 0\n    if matrix[x][y] < 0:\n        return -1\n    matrix[x][y] = -matrix[x][y]\n    max_gold = get_maxgold(matrix, x-1, y) + get_maxgold(matrix, x+1, y) + get_maxgold(matrix, x, y-1) + get_maxgold(matrix, x, y+1)\n    matrix[x][y] = 0\n    return max_gold\n\nmatrix = [[1, 3, 1, 5],\n          [2, 2, 4, 1],\n          [5, 0, 2, 3],\n          [0, 6, 1, 2]]\n\nx, y = 3, 3"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\ndef extract_rear(tuple_of_strings):\n    return [string[-1] for string in tuple_of_strings]\n\n# Test"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\ndef count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\ndef count_element_in_list_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\ndef count_element_in_list_list_list(lst, element):\n    count = 0\n    for sublist in lst:\n        for item in sublist:\n            if element in item:\n                count += 1\n    return count\n\ndef count_element_in_list_list_list_list(lst, element):\n    count = 0\n    for sublist in lst:\n        for item in sublist:\n            for subitem in item:\n                if element in subitem:\n                    count += 1\n    return count\n\ndef count_element_in_list_list_list_list_list(lst, element):\n    count = 0\n    for sublist in lst:\n        for item in sublist:\n            for subitem in item:\n                for subsubitem in subitem:\n                    if element in subsubitem:\n                        count += 1\n    return count\n\ndef count_element_in_list_list_list_list_list_list(lst, element):\n    count = 0\n    for sublist in lst:\n        for item in sublist:\n            for subitem in item:\n                for subsubitem in subitem:\n                    for subsubsubitem in subsubitem:\n                        if element in subsubsubitem:\n                            count += 1\n    return count\n\ndef count_element_in_list_list_list_list_list_list_list(lst, element):\n    count = 0\n    for sublist in lst:\n        for item in sublist:\n            for subitem in item:\n                for subsubitem in subitem:\n                    for subsubsubitem in subsubitem:\n                        for subsubsubsubitem in subsubsubitem:\n                            if element in subsubsubsubitem:\n                                count += 1\n    return count\n\ndef count_element_in_list_list_list_list_list_list_list_list(lst, element):\n    count = 0\n    for sublist in lst:\n        for item in sublist:\n            for subitem in item:\n                for subsubitem in subitem:\n                    for subsubsubitem in subsubitem:\n                        for subsubsubsubitem in subsubsubitem:\n                            for subsubsubsubsubitem in subsubsubsubitem:\n                                if element in subsubsubsubsubitem:\n                                    count += 1\n    return count\n\ndef count_element_in_list_list_list_list_list_list_list_list_list(lst, element):\n    count = 0\n    for sublist in lst:\n        for item in sublist:\n            for subitem in item:\n                for subsubitem in subitem:\n                    for subsubsubitem in subsubitem:\n                        for subsubsubsubitem in subsubsubitem:\n                            for subsubsubsubsubitem in subsubsubsubitem:\n                                for subsubsubsubsubsubitem in subsubsubsubsubitem:\n                                    if element in subsubsubsubsubsubitem:\n                                        count += 1\n    return count\n\ndef count_element_in_list_list_list_list_list_list_list_list_list_list(lst, element):\n    count = 0\n    for sublist in lst:\n        for item in sublist:\n            for subitem in item:\n                for subsubitem in subitem:\n                    for subsubsubitem in subsubitem:\n                        for subsubsubsubitem in subsubsubitem:\n                            for subsubsubsubsubitem in subsubsubsubitem:\n                                for subsubsubsubsubsubitem in subsubsubsubsubitem:\n                                    for subsubsubsubsubsubsubitem in subsubsubsubsubsubitem:\n                                        if element in subsubsubsubsubsubsubitem:\n                                            count += 1\n    return count\n\ndef count_element_in_list_list_list_list_list_list_list_list_list_list_list(lst, element):\n    count = 0\n    for sublist in lst:\n        for item in sublist:\n            for subitem in item:\n                for subsubitem in subitem:\n                    for subsubsubitem in subsubitem:\n                        for subsubsubsubitem in subsubsubitem:\n                            for subsubsubsubsubitem in subsubsubsubitem:\n                                for subsubsubsubsubsubitem in subsubsubsubsubitem:\n                                    for subsubsubsubsubsubsubitem in subsubsubsubsubsubitem:\n                                        for subsubsubsubsubsubsubitem in subsubsubsubsubsubsubitem:\n                                            if element in subsubsubsubsubsubsubitem:\n                                                count += 1\n    return count\n\ndef count_element_in_list_list_list_list_list_list_list_list_list_list_list_list(lst, element):\n    count = 0\n    for sublist in lst:\n        for item in sublist:\n            for subitem in item:\n                for subsubitem in subitem:\n                    for subsubsubitem in subsubitem:\n                        for subsubsubsubitem in subsubsubitem:\n                            for subsubsubsubsubitem in subsubsubsubitem:\n                                for subsubsubsubsubsubitem in subsubsubsubsubitem:\n                                    for subsubsubsubsubsubsubitem in subsubsubsubsubsubitem:\n                                        for subsubsubsubsubsubsubitem in subsubsubsubsubsubsubitem:\n                                            for subsubsubsubsubsubsubitem in subsubsubsubsubsubsubitem:\n                                                for subsubsubsubsubsubsubitem in subsubsubsubsubsubsubitem:\n                                                    if element in subsubsubsubsubsubsubitem:\n                                                        count += 1\n    return count\n\ndef count_element_in_list_list_list_list_list_list_list_list_list_list_list_list(lst, element):\n    count = 0\n    for sublist in lst:\n        for item in sublist:\n            for subitem in item:\n                for subsubitem in subitem:\n                    for subsubsubitem in subsubitem:\n                        for subsubsubsubitem in subsubsubitem:\n                            for subsubsubsubsubitem in subsubsubsubitem:\n                                for subsubsubsubsubsubitem in subsubsubsubsubitem:\n                                    for subsubsubsubsubsubsubitem in subsubsubsubsubsubitem:\n                                        for subsubsubsubsubsubsubitem in subsubsubsubsubsubsubitem:\n                                            for subsubsubsubsubsubsubitem in subsubsubsubsubsubsubitem:\n                                                for subsubsubsubsubsubsubitem in subsubsubsubsubsubsubitem:\n                                                    for subsubsubsubsubsubsubitem in subsubsubsubsubsubsubitem:\n                                                        if element in subsubsubsubsubsubsubitem:\n                                                            count += 1\n    return count\n\ndef count_element_in_list_list_list_list_list_list_list_list_list_list_list_list_list(lst, element):\n    count = 0\n    for sublist in lst:\n        for item in sublist:\n            for subitem in item:\n                for subsubitem in subitem:\n                    for subsubsubitem in subsubitem:\n                        for subsubsubsubitem in subsubsubitem:\n                            for subsubsubsubsubitem in subsubsubsubitem:\n                                for subsubsubsubsubsubitem in subsubsubsubsubitem:\n                                    for subsubsubsubsubsubsubitem in subsubsubsubsubsubitem:\n                                        for subsubsubsubsubsubsubitem in subsubsubsubsubsubsubitem:\n                                            for subsubsubsubsubsubsubitem in subsubsubsubsubsubsubitem:\n                                                for subsubsubsubsubsubsubitem in subsubsubsubsubsubsubitem:\n                                                    for subsubsubsubsubsubsubitem in subsubsubsubsubsubsubitem:\n                                                        for subsubsubsubsubsubsubitem in subsubsubsubsubsubsubitem:\n                                                            if element in subsubsubsubsubsubsubitem:\n                                                                count += 1\n    return count\n\ndef count_element_in_list_list_list_list_list_list_list_list_list_list_list_list_list_list(lst, element):\n    count = 0\n    for sublist in lst:\n        for item in sublist:\n            for subitem in item:\n                for subsubitem in subitem:\n                    for subsubsubitem in subsubitem:\n                        for subsubsubsubitem in subsubsubitem:\n                            for subsubsubsubsubitem in subsubsubsubitem:\n                                for subsubsubsubsubsubitem in subsubsubsubsubitem:\n                                    for subsubsubsubsubsubsubitem in subsubsubsubsubsubitem:\n                                        for subsubsubsubsubsub"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\ndef filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n# Test"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\nimport re\n\ndef change_date_format(date_str):\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    match = re.search(pattern, date_str)\n    if match:\n        return match.group(3) + '-' + match.group(2) + '-' + match.group(1)\n    else:\n        return date_str\n\n# Example usage\ndate_str = \"2026-01-02\""], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\n# Example usage:\narr = [12, 23, 4, 5, 3, 2, 12, 81, 56, 95]"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\ndef and_tuples(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and_tuples(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and_tuple(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n    for i in range(min(len(tuple1), len(tuple2))):\n        result.append(tuple1[i] and tuple2[i])\n    return result\n\ndef elementwise_and(tuple1, tuple2):\n    result = []\n   "], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a,b,c):\n    return -b/a\n\n# Example usage:"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\ndef common_element(list1, list2):\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n\n# Test\nlist1 = [1,2,3,4,5]\nlist2 = [5,6,7,8,9]"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a,b,c):\n    \"\"\"\n    Calculate the median of a trapezium.\n    \"\"\"\n    # Calculate the lengths of the bases\n    base1, base2 = b, c\n    if a < b:\n        base1, base2 = base2, base1\n    # Calculate the height\n    height = (a + b) / 2\n    # Calculate the area\n    area = (base1 + base2) * height\n    # Calculate the perimeter\n    perimeter = base1 + base2 + 2 * height\n    return area, perimeter\n\n# Example usage:\na, b, c = 15, 25, 35\narea, perimeter = median_trapezium(a, b, c)"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\ndef check_greater(arr, num):\n    for i in range(len(arr)):\n        if arr[i] < num:\n            return 'No, entered number is less than those in the array'\n    return 'Yes, entered number is greater than those in the array'\n\narr = [1, 2, 3, 4, 5]\nnum = 4"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\ndef text_match_one(text):\n    if text.count('a') == 1 and text.count('b') > 0:\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\ndef last_Digit(n):\n    return n % 10\n\n# Test"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\ndef neg_nos(nums):\n    \"\"\"\n    This function prints negative numbers in a list.\n    \"\"\"\n    for num in nums:\n        if num < 0:\n            print(num)\n\n# Test\nneg_nos([-1,4,5,-6])\n# Output: -1,-6\n\n# Test\nneg_nos([1,2,3,4,5])\n# Output: None\n\n# Test\nneg_nos([0,1,2,3,4,5])\n# Output: None\n\n# Test\nneg_nos([1,2,3,4,5,-6])\n# Output: -6\n\n# Test\nneg_nos([1,2,3,4,5,6])\n# Output: None\n\n# Test\nneg_nos([1,2,3,4,5,6,-7])\n# Output: -7\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8])\n# Output: -7,-8\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9])\n# Output: -7,-8,-9\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10])\n# Output: -7,-8,-9,-10\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10,-11])\n# Output: -7,-8,-9,-10,-11\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10,-11,-12])\n# Output: -7,-8,-9,-10,-11,-12\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10,-11,-12,-13])\n# Output: -7,-8,-9,-10,-11,-12,-13\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10,-11,-12,-13,-14])\n# Output: -7,-8,-9,-10,-11,-12,-13,-14\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10,-11,-12,-13,-14,-15])\n# Output: -7,-8,-9,-10,-11,-12,-13,-14,-15\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16])\n# Output: -7,-8,-9,-10,-11,-12,-13,-14,-15,-16\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17])\n# Output: -7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18])\n# Output: -7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19])\n# Output: -7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20])\n# Output: -7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21])\n# Output: -7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22])\n# Output: -7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23])\n# Output: -7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24])\n# Output: -7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25])\n# Output: -7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26])\n# Output: -7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27])\n# Output: -7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27\n\n# Test\nneg_nos([1,2,3,4,5,6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(string):\n    result = \"\"\n    for char in string:\n        if char % 2 == 0:\n            result += char\n    return result\n\n# Example usage:"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\ndef count_bidirectional(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i][0] == lst[j][0] and lst[i][1] == lst[j][1]:\n                count += 1\n    return count\n\nlst = [(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\ndef multiple_to_single(list_of_nums):\n    return int(''.join(map(str, list_of_nums)))\n\n# Test the function"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Initialize a dictionary to store the adverb positions\n    adverb_positions = {}\n\n    # Iterate through the words\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if word.endswith('ly'):\n            # Store the adverb position\n            adverb_positions[word] = (i, words.index(word))\n\n    # Return the adverb positions\n    return adverb_positions\n\n# Example usage\nsentence = \"clearly!! we can see the sky\"\nadverb_positions = find_adverb_position(sentence)\nfor adverb, position in adverb_positions.items():\n    print(adverb, \":\", position)\n\n# Output\n# clearly : (0, 7)\n# can : (1, 5)\n# see : (2, 6)\n# the : (3, 4)\n# sky : (4, 8)\n\n# Example with multiple adverbs\nsentence = \"clearly, we can see the sky, and the stars\"\nadverb_positions = find_adverb_position(sentence)\nfor adverb, position in adverb_positions.items():\n    print(adverb, \":\", position)\n\n# Output\n# clearly : (0, 7)\n# can : (1, 5)\n# see : (2, 6)\n# the : (3, 4)\n# sky : (4, 8)\n# and : (5, 6)\n# the : (6, 7)\n# stars : (7, 10)\n\n# Example with multiple adverbs in the same position\nsentence = \"clearly, we can see the sky, and the stars, and the moon\"\nadverb_positions = find_adverb_position(sentence)\nfor adverb, position in adverb_positions.items():\n    print(adverb, \":\", position)\n\n# Output\n# clearly : (0, 7)\n# can : (1, 5)\n# see : (2, 6)\n# the : (3, 4)\n# sky : (4, 8)\n# and : (5, 6)\n# the : (6, 7)\n# stars : (7, 10)\n# and : (8, 9)\n# the : (9, 10)\n# moon : (10, 12)\n\n# Example with multiple adverbs in different positions\nsentence = \"clearly, we can see the sky, and the stars, and the moon, and clearly, we can see the stars\"\nadverb_positions = find_adverb_position(sentence)\nfor adverb, position in adverb_positions.items():\n    print(adverb, \":\", position)\n\n# Output\n# clearly : (0, 7)\n# can : (1, 5)\n# see : (2, 6)\n# the : (3, 4)\n# sky : (4, 8)\n# and : (5, 6)\n# the : (6, 7)\n# stars : (7, 10)\n# and : (8, 9)\n# the : (9, 10)\n# moon : (10, 12)\n# clearly : (13, 16)\n# we : (14, 15)\n# can : (15, 16)\n# see : (16, 17)\n# the : (17, 18)\n# stars : (18, 20)\n# and : (19, 20)\n# the : (20, 21)\n# moon : (21, 23)\n\n# Example with multiple adverbs in different positions and multiple sentences\nsentences = [\"clearly, we can see the sky, and the stars, and the moon\", \"clearly, we can see the stars, and the moon, and the sky\"]\nadverb_positions = find_adverb_position(sentences[0])\nfor adverb, position in adverb_positions.items():\n    print(adverb, \":\", position)\n\n# Output\n# clearly : (0, 7)\n# can : (1, 5)\n# see : (2, 6)\n# the : (3, 4)\n# sky : (4, 8)\n# and : (5, 6)\n# the : (6, 7)\n# stars : (7, 10)\n# and : (8, 9)\n# the : (9, 10)\n# moon : (10, 12)\n\nadverb_positions = find_adverb_position(sentences[1])\nfor adverb, position in adverb_positions.items():\n    print(adverb, \":\", position)\n\n# Output\n# clearly : (0, 7)\n# can : (1, 5)\n# see : (2, 6)\n# the : (3, 4)\n# sky : (4, 8)\n# and : (5, 6)\n# the : (6, 7)\n# stars : (7, 10)\n# and : (8, 9)\n# the : (9, 10)\n# moon : (10, 12)\n# clearly : (13, 16)\n# we : (14, 15)\n# can : (15, 16)\n# see : (16, 17)\n# the : (17, 18)\n# stars : (18, 20)\n# and : (19, 20)\n# the : (20, 21)\n# moon : (21, 23)\n\n# Example with multiple adverbs in different positions and multiple sentences with different adverb positions\nsentences = [\"clearly, we can see the sky, and the stars, and the moon\", \"clearly, we can see the stars, and the moon, and the sky\", \"clearly, we can see the stars, and the moon, and the sky, and clearly, we can see the stars\"]\nadverb_positions = find_adverb_position(sentences[0])\nfor adverb, position in adverb_positions.items():\n    print(adverb, \":\", position)\n\n# Output\n# clearly : (0, 7)\n# can : (1, 5)\n# see : (2, 6)\n# the : (3, 4)\n# sky : (4, 8)\n# and : (5, 6)\n# the : (6, 7)\n# stars : (7, 10)\n# and : (8, 9)\n# the : (9, 10)\n# moon : (10, 12)\n\nadverb_positions = find_adverb_position(sentences[1])\nfor adverb, position in adverb_positions.items():\n    print(adverb, \":\", position)\n\n# Output\n# clearly : (0, 7)\n# can : (1, 5)\n# see : (2, 6)\n# the : (3, 4)\n# sky : (4, 8)\n# and : (5, 6)\n# the : (6, 7)\n# stars : (7, 10)\n# and : (8, 9)\n# the : (9, 10)\n# moon : (10, 12)\n# clearly : (13, 16)\n# we : (14, 15)\n# can : (15, 16)\n# see : (16, 17)\n# the : (17, 18)\n# stars : (18, 20)\n# and : (19, 20)\n# the : (20, 21)\n# moon : (21, 23)\n\nadverb_positions = find_adverb_position(sentences[2])\nfor adverb, position in adverb_positions.items():\n    print(adverb, \":\", position)\n\n# Output\n# clearly : (0, 7)\n# can : (1, 5)\n# see : (2, 6)\n# the : (3, 4)\n# sky : (4, 8)\n# and : (5, 6)\n# the : (6, 7)\n# stars : (7, 10)\n# and : (8, 9)\n# the : (9, 10)\n# moon : (10, 12)"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\ndef surfacearea_cube(side):\n    return 6 * side**2\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\ndef positive_count(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count / len(arr)\n\n# Test\narr = [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\ndef largest_neg(lst):\n    \"\"\"\n    This function returns the largest negative number from the given list.\n    \"\"\"\n    largest = -float('inf')\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest\n\n# Example usage\nlst = [1,2,3,-4,-6]"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n\ndef trim_tuple(tuple_list, k):\n    \"\"\"\n    Trim each tuple by k in the given tuple list.\n    \"\"\"\n    return [tuple(x[i] for x in t)[:k] for t in tuple_list]\n\n# Example usage:\ntuple_list = [(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)]\nk = 2"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\ndef index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append((tuple1[i][0] * tuple2[i][0], tuple1[i][1] * tuple2[i][1]))\n    return result\n\n# Example usage:\ntuple1 = ((1, 3), (4, 5), (2, 9), (1, 10))\ntuple2 = ((6, 7), (3, 9), (1, 1), (7, 3))"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(list_of_elements, tuple_of_elements):\n    count = 0\n    for element in list_of_elements:\n        if element in tuple_of_elements:\n            count += 1\n    return count\n\nlist_of_elements = ['a', 'b', 'c', 'd']\ntuple_of_elements = ('a', 'b', 'c', 'd')\n"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\ndef cube_nums(nums):\n    return list(map(lambda x: x**3, nums))\n\n# Test"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers.\n    \"\"\"\n    perrin_nums = [0, 1, 2]\n    for i in range(3, n+1):\n        perrin_nums.append(perrin_nums[i-2] + perrin_nums[i-3] + perrin_nums[i-4])\n    return perrin_nums[-1]\n\n# Example usage"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\ndef check_Triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return 'No'\n    else:\n        return 'Yes'\n\n# Test"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\ndef extract_string(lst, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n\n    Args:\n        lst (list): A list of strings.\n        size (int): The size of strings to extract.\n\n    Returns:\n        list: A list of extracted strings.\n    \"\"\"\n    return [s for s in lst if len(s) >= size]\n\n# Example usage\nstrings = ['Python', 'list', 'exercises', 'practice', 'solution']\nsize = 8\n\nresult = extract_string(strings, size)"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\nimport re\n\ndef remove_whitespaces(string):\n    return re.sub(r'\\s+', '', string)\n\n# Example usage\nstring = ' Google    Flutter '"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\ndef loss_amount(amount, loss):\n    if amount < loss:\n        return amount - loss\n    else:\n        return None\n\n# Example usage:\namount = 1500\nloss = 1200"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\ndef sumofFactors(n):\n    \"\"\"\n    This function returns the sum of even factors of a number.\n    \"\"\"\n    # Initialize sum\n    sum = 0\n    \n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Check if i is a factor of n\n        if n % i == 0:\n            # Check if i is even\n            if i % 2 == 0:\n                # Add i to sum\n                sum += i\n    return sum\n\n# Test"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\ndef text_match_wordz(text):\n    \"\"\"\n    Returns a string containing the matched word.\n    \"\"\"\n    return text.lower().count(\"z\") > 0\n\n# Example usage:\ntext = \"pythonz.\""], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(monthnumb):\n    if monthnumb == 1 or monthnumb == 3 or monthnumb == 5 or monthnumb == 7 or monthnumb == 8 or monthnumb == 10 or monthnumb == 12:\n        return True\n    else:\n        return False\n\n# Test"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\ndef reverse_string_list(string_list):\n    return [string[::-1] for string in string_list]\n\n# Example usage:\nstring_list = ['Red', 'Green', 'Blue', 'White', 'Black']"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\ndef Find_Min(lst):\n    min_len = len(lst[0])\n    min_list = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_list = sublist\n    return min_list\n\n# Test\nlst = [[1],[1,2],[1,2,3]]"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\ndef rectangle_area(length, width):\n    return length * width\n\n# Test"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\nimport re\n\ndef remove_uppercase(string):\n    return re.sub(r'[A-Z]', '', string)\n\n# Example usage:\nstring = 'cAstyoUrFavoRitETVshoWs'"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\ndef Extract(lst):\n    return [item[0] for item in lst]\n\n# Test"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\ndef upper_ctr(string):\n    \"\"\"\n    Count the upper case characters in a given string.\n    \"\"\"\n    return sum(1 for c in string if c.isupper())\n\n# Example usage"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\ndef combinations_list(lst):\n    # Base case\n    if len(lst) == 0:\n        return [[]]\n\n    # Recursive case\n    result = []\n    for i in range(len(lst)):\n        element = lst[i]\n        rest = lst[:i] + lst[i+1:]\n        for combination in combinations_list(rest):\n            result.append([element] + combination)\n    return result\n\n# Test"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\ndef max_subarray_product(arr):\n    \"\"\"\n    This function finds the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product *= num\n        max_product = max(max_product, current_product)\n        if current_product < 0:\n            current_product = 1\n    return max_product\n\n# Example usage\narr = [1, -2, -3, 0, 7, -8, -2]"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\ndef check_value(dictionary, value):\n    \"\"\"\n    Check if all values in a dictionary are same.\n\n    Args:\n        dictionary (dict): A dictionary.\n        value (int): The value to compare.\n\n    Returns:\n        bool: True if all values are same, False otherwise.\n    \"\"\"\n    return all(x == value for x in dictionary.values())\n\n# Example usage:"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\ndef drop_empty(dictionary):\n    \"\"\"\n    Drop empty items from a given dictionary.\n\n    Args:\n        dictionary (dict): A dictionary of items.\n\n    Returns:\n        dict: A dictionary with empty items removed.\n    \"\"\"\n    return {k: v for k, v in dictionary.items() if v is not None}\n\n# Example usage:"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n\ndef find_peak(arr, n):\n    # Check if array is empty\n    if n == 0:\n        return None\n\n    # Check if array has only one element\n    if n == 1:\n        return arr[0]\n\n    # Check if array has two elements\n    if n == 2:\n        if arr[0] > arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n\n    # Initialize left and right pointers\n    left = 0\n    right = n - 1\n\n    # Find the peak element\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[mid + 1]:\n            right = mid\n        else:\n            left = mid + 1\n\n    # Return the peak element\n    return arr[left]\n\n# Example usage\narr = [1, 3, 20, 4, 1, 0]\nn = len(arr)"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\ndef decimal_to_Octal(num):\n    if num == 0:\n        return '0'\n    elif num == 1:\n        return '1'\n    else:\n        result = ''\n        while num > 0:\n            result += str(num % 8)\n            num //= 8\n        return result[::-1]\n\n# Test"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\ndef max_product(arr, n):\n    max_product = 1\n    min_product = 1\n    for i in range(n):\n        if arr[i] > 0:\n            if arr[i] > max_product:\n                max_product = arr[i]\n            if arr[i] < min_product:\n                min_product = arr[i]\n        elif arr[i] < 0:\n            if arr[i] < min_product:\n                min_product = arr[i]\n            if arr[i] > max_product:\n                max_product = arr[i]\n    return max_product * min_product\n\n# Test\narr = [3, 100, 4, 5, 150, 6]\nn = len(arr)"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n\ndef max_profit(prices, k):\n    \"\"\"\n    Args:\n    prices (list): List of prices of stocks\n    k (int): Maximum number of transactions\n\n    Returns:\n    int: Maximum profit earned\n    \"\"\"\n    n = len(prices)\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + max(prices[i-1] - prices[i-1-j], 0))\n    return dp[n][k]\n\n# Example usage:\nprices = [1, 5, 2, 3, 7, 6, 4, 5]\nk = 3\nmax_profit_val = max_profit(prices, k)"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\ndef add_pairwise(tuple_list):\n    result = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            result.append(tuple_list[i] + tuple_list[j])\n    return result\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\ndef find_remainder(arr, n, m):\n    \"\"\"\n    This function finds remainder of array multiplication divided by n.\n    \"\"\"\n    # Calculate total multiplication\n    total_multiplication = sum(x * y for x, y in zip(arr, range(1, n + 1)))\n    # Calculate remainder\n    remainder = total_multiplication % n\n    # Calculate remainder of remainder divided by m\n    remainder_of_remainder = remainder % m\n    return remainder_of_remainder\n\n# Test\narr = [ 100, 10, 5, 25, 35, 14 ]\nn = 6\nm = 11"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\ndef check_Consecutive(lst):\n    \"\"\"\n    This function checks whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] + 1 == lst[i+1]:\n            return True\n    return False\n\n# Test\nlst = [1,2,3,4,5]"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\ndef tuple_intersection(list1, list2):\n    \"\"\"\n    This function takes two tuple lists as input and returns the intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a dictionary to store the elements of the first tuple list\n    dict1 = {}\n    for tup in list1:\n        for elem in tup:\n            if elem in dict1:\n                dict1[elem] += 1\n            else:\n                dict1[elem] = 1\n\n    # Create a dictionary to store the elements of the second tuple list\n    dict2 = {}\n    for tup in list2:\n        for elem in tup:\n            if elem in dict2:\n                dict2[elem] += 1\n            else:\n                dict2[elem] = 1\n\n    # Create a set to store the common elements\n    common_elements = set()\n    for elem in dict1:\n        if elem in dict2:\n            common_elements.add(elem)\n\n    # Create a list of tuples to store the intersection\n    result = []\n    for elem in common_elements:\n        if dict1[elem] == dict2[elem]:\n            result.append((elem, dict1[elem]))\n\n    return result\n\n# Test the function\nlist1 = [(3, 4), (5, 6), (9, 10), (4, 5)]\nlist2 = [(5, 4), (3, 4), (6, 5), (9, 11)]"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\ndef replace_char(string, old, new):\n    \"\"\"\n    Replaces all occurrences of old with new in string.\n    \"\"\"\n    return string.replace(old, new)\n\n# Example usage:\nstring = \"polygon\"\nold = \"y\"\nnew = \"l\"\n\nresult = replace_char(string, old, new)"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n# Example usage:\ncounter = {'Math':81, 'Physics':83, 'Chemistry':87}"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\ndef big_sum(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of the largest and smallest value in the array.\n    \"\"\"\n    arr.sort()\n    return arr[-1] + arr[0]\n\n# Test the function"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\ndef is_lower(string):\n    return string.lower() == string\n\n# Test"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\ndef remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with lowercase substrings removed.\n    \"\"\"\n    return string.replace(\"python\", \"PYTH\")\n\n# Example usage:"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\ndef first_Digit(num):\n    return (num//10)%10\n\n# Test"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\ndef get_max_occuring_char(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = max(char_count.values())\n    max_char = [char for char, count in char_count.items() if count == max_count]\n    return max_char[0]\n\n# Test"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\ndef is_subset_sum(nums, target_sum, index=0):\n    if target_sum == 0:\n        return True\n    if target_sum < 0 or index == len(nums):\n        return False\n    return is_subset_sum(nums, target_sum - nums[index], index + 1) or is_subset_sum(nums, target_sum, index + 1)\n\n# Example usage:\nnums = [3, 34, 4, 12, 5, 2]\ntarget_sum = 9"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\nimport re\n\ndef find_sequences(string):\n    pattern = r\"([A-Z])([a-z]*)\"\n    return re.search(pattern, string)\n"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\ndef first_Factorial_Divisible_Number(x):\n    \"\"\"\n    This function returns the first natural number whose factorial is divisible by x.\n    \"\"\"\n    for i in range(1, x+1):\n        if factorial(i) % x == 0:\n            return i\n    return -1\n\ndef factorial(x):\n    \"\"\"\n    This function returns the factorial of x.\n    \"\"\"\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x-1)\n\n# Example usage"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\ndef remove_matching_tuple(list1, list2):\n    result = []\n    for item in list1:\n        if item not in list2:\n            result.append(item)\n    return result\n\n# Test\nlist1 = [('Hello', 'dude'), ('How', 'are'), ('you', '?')]\nlist2 = [('Hello', 'dude'), ('How', 'are')]"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\ndef largest_palindrome(arr, n):\n    \"\"\"\n    This function finds the largest palindromic number in the given array.\n    \"\"\"\n    largest = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j] and arr[i] == arr[i] + arr[j] and arr[i] + arr[j] > largest:\n                largest = arr[i] + arr[j]\n    return largest\n\n# Example usage\narr = [1, 232, 54545, 999991]\nn = len(arr)"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\nimport math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Compute binomial probability for the given number.\n\n    Args:\n        n (int): Total number of trials.\n        k (int): Number of successes.\n        p (float): Probability of success.\n\n    Returns:\n        float: Binomial probability.\n    \"\"\"\n    return math.comb(n, k) * p**k * (1-p)**(n-k)\n\n# Example usage\nn = 10\nk = 5\np = 1.0/3\n"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\ndef sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[-1])\n\n# Test\nlst = [(1, 3), (3, 2), (2, 1)]"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\nimport math\ndef area_pentagon(a):\n    s = (a*a*math.sqrt(5+2*math.sqrt(5)))/10\n    return s\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\ndef frequency_Of_Largest(arr):\n    max_val = max(arr)\n    count = arr.count(max_val)\n    return count\n\n# Example usage\narr = [1,2,3,4,4]"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\ndef extract_symmetric(tuple_list):\n    \"\"\"\n    Extract all the pairs which are symmetric in the given tuple list.\n    \"\"\"\n    symmetric_pairs = set()\n    for t1, t2 in zip(tuple_list, tuple_list[::-1]):\n        if t1 == t2:\n            symmetric_pairs.add(tuple(sorted([t1, t2])))\n    return symmetric_pairs\n\n# Example usage\ntuple_list = [(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\ndef sum_gp(a, r, n):\n    \"\"\"\n    Calculate the sum of geometric progression series.\n    \"\"\"\n    return a * (r**(n-1))\n\n# Example usage:"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\n# Test\narr = [1,2,3,5,8]\ntarget = 6"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n\ndef calculate_polygons(x, y, width, height, radius):\n    \"\"\"\n    Calculate a grid of hexagon coordinates.\n\n    Args:\n        x (int): x coordinate of the center of the grid\n        y (int): y coordinate of the center of the grid\n        width (int): width of the grid\n        height (int): height of the grid\n        radius (int): radius of the hexagons\n\n    Returns:\n        list: list of lists containing 6 tuples of x, y point coordinates\n    \"\"\"\n    # Calculate the number of hexagons in each row\n    num_rows = (width - 2 * radius) // (2 * radius + 1)\n    # Calculate the number of hexagons in each column\n    num_cols = (height - 2 * radius) // (2 * radius + 1)\n\n    # Calculate the coordinates of the hexagons\n    hexagons = []\n    for row in range(num_rows + 1):\n        for col in range(num_cols + 1):\n            # Calculate the x and y coordinates of the center of the hexagon\n            center_x = x + radius * (2 * radius + 1) * col + radius * (2 * radius + 1) * (2 * radius + 1) // 2\n            center_y = y + radius * (2 * radius + 1) * row + radius * (2 * radius + 1) * (2 * radius + 1"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\ndef binary_to_integer(binary_tuple):\n    return ''.join(str(x) for x in binary_tuple)\n\n# Test"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nimport re\n\ndef remove_lowercase(string):\n    return re.sub(r'[a-z]', '', string)\n\n# Example usage:\nstring = 'KDeoALOklOOHserfLoAJSIskdsf'"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\nimport heapq\n\ndef heap_queue_smallest(nums, k):\n    # Create a min heap\n    min_heap = []\n    # Iterate through the list of numbers\n    for num in nums:\n        # Push the number into the heap\n        heapq.heappush(min_heap, num)\n        # If the heap size is greater than k\n        if len(min_heap) > k:\n            # Pop the smallest element from the heap\n            heapq.heappop(min_heap)\n    # Return the k smallest elements from the heap\n    return heapq.nsmallest(k, min_heap)\n\n# Example usage\nnums = [25, 35, 22, 85, 14, 65, 75, 25, 58]\nk = 3"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\nimport math\n\ndef surfacearea_cone(radius, height):\n    \"\"\"\n    Calculate the surface area of a cone.\n\n    Args:\n        radius (float): The radius of the base of the cone.\n        height (float): The height of the cone.\n\n    Returns:\n        float: The surface area of the cone.\n    \"\"\"\n    base_area = math.pi * radius**2\n    lateral_area = math.pi * radius * math.sqrt(radius**2 + height**2)\n    surface_area = base_area + lateral_area\n    return surface_area\n\n# Example usage:\nradius = 5\nheight = 12"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n# Test the function"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\nimport math\n\ndef diameter_circle(radius):\n    return 2 * math.pi * radius\n"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\ndef concatenate_elements(lst):\n    return ' '.join(lst)\n\n# Example usage:\nlst = ['hello','there','have','a','rocky','day']"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\ndef num_comm_div(num1, num2):\n    \"\"\"\n    This function returns the common divisor between two numbers in a given pair.\n    \"\"\"\n    # Check if both numbers are equal\n    if num1 == num2:\n        return num1\n    # Check if one of the numbers is zero\n    if num1 == 0:\n        return num2\n    # Check if both numbers are zero\n    if num2 == 0:\n        return num1\n    # Check if both numbers are negative\n    if num1 < 0 and num2 < 0:\n        return abs(num1)\n    # Check if one of the numbers is negative\n    if num1 < 0:\n        return abs(num1)\n    # Check if both numbers are positive\n    if num2 < 0:\n        return abs(num2)\n    # If both numbers are positive, check for common divisor\n    if num1 > num2:\n        return num1\n    else:\n        return num2\n\n# Test the function"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\ndef find(a, b):\n    return a % b\n\n# Test"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(nums):\n    result = []\n    for i in range(len(nums)-1):\n        result.append(nums[i] + nums[i+1])\n    return result\n\n# Example usage\nnums = [1, 1, 3, 4, 4, 5, 6, 7]"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\ndef sum_Of_Series(n):\n    return n*(n+1)*(n+2)//6\n\n# Example usage"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    \"\"\"\n    This function takes an array as input and returns the array with all zeroes at the end.\n    \"\"\"\n    # Initialize two pointers, one for the start of the array and one for the end\n    start = 0\n    end = len(arr) - 1\n\n    # Iterate through the array from start to end\n    while start < end:\n        # If the element at the start is zero, swap it with the element at the end\n        if arr[start] == 0:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n        # If the element at the start is not zero, move the start pointer forward\n        elif arr[start] != 0:\n            start += 1\n        # If the element at the end is zero, swap it with the element at the start\n        elif arr[end] == 0:\n            arr[start], arr[end] = arr[end], arr[start]\n            end -= 1\n        # If the element at the end is not zero, move the end pointer backward\n        else:\n            end -= 1\n    return arr\n\n# Example usage\narr = [6, 0, 8, 2, 3, 0, 4, 0, 1]"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\ndef permutation_coefficient(n, k):\n    if k == 0 or k == n:\n        return 1\n    return permutation_coefficient(n-1, k-1) + permutation_coefficient(n-1, k)\n\n# Example usage:"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\ndef remove_words(words, exclude_words):\n    \"\"\"\n    Remove specific words from a given list.\n\n    Args:\n    words (list): A list of words.\n    exclude_words (list): A list of words to exclude.\n\n    Returns:\n    list: A list of words without the excluded words.\n    \"\"\"\n    return [word for word in words if word not in exclude_words]\n\n# Example usage:\nwords = ['red', 'green', 'blue', 'white', 'black', 'orange']\nexclude_words = ['white', 'orange']\nresult = remove_words(words, exclude_words)"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\ndef same_order(list1, list2):\n    return sorted(list1) == sorted(list2)\n\nlist1 = [\"red\",\"green\",\"black\",\"orange\"]\nlist2 = [\"red\",\"pink\",\"green\",\"white\",\"black\"]\n"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\ndef average_Odd(n):\n    count = 0\n    sum = 0\n    for i in range(1, n+1, 2):\n        if i % 2 != 0:\n            count += 1\n            sum += i\n    return sum/count\n"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\ndef no_of_subsequences(arr, k):\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    for num in arr:\n        for i in range(num, k + 1):\n            dp[i] += dp[i - num]\n    return dp[k]\n\n# Test\narr = [1,2,3,4]\nk = 10"]]
