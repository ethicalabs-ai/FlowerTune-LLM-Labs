[["#include<assert.h>\n#include<bits/stdc++.h>\n// Check if in given vector of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\n// (false)\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\n// (true)\nbool has_close_elements(std::vector<float> numbers, float threshold) { \n    for (int i = 0; i < numbers.size() - 1; i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the vector of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string paren_string) { \n    std::vector<std::string> groups;\n    std::string group;\n    int paren_count = 0;\n    for (int i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n            paren_count++;\n            group += '(';\n        } else if (paren_string[i] == ')') {\n            paren_count--;\n            group += ')';\n        }\n        if (paren_count == 0) {\n            groups.push_back(group);\n            group = \"\";\n        }\n    }\n    return groups;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5f))\n// (0.5f)\nfloat truncate_number(float number) { return number - floorf(number); }\nint main() {\n    assert(truncate_number(3.5f) == 0.5f);\n    assert(truncate_number(3.0f) == 0.0f);\n    assert(truncate_number(3.999f) == 0.999f);\n    assert(truncate_number(3.001f) == 0.001f);\n    assert(truncate_number(3.0001f) == 0.0001f);\n    assert(truncate_number(3.00001f) == 0.00001f);\n    assert(truncate_number(3.000001f) == 0.000001f);\n    assert(truncate_number(3.0000001f) == 0.0000001f);\n    assert(truncate_number(3.00000001f) == 0.00000001f);\n    assert(truncate_number(3.000000001f) == 0.000000001f);\n    assert(truncate_number(3.0000000001f) == 0.0000000001f);\n    assert(truncate_number(3.00000000001f) == 0.00000000001f);\n    assert(truncate_number(3.000000000001f) == 0.000000000001f);\n    assert(truncate_number(3.0000000000001f) == 0.0000000000001f);\n    assert(truncate_number(3.00000000000001f) == 0.00000000000001f);\n    assert(truncate_number(3.000000000000001f) == 0.000000000000001f);\n    assert(truncate_number(3.0000000000000001f) == 0.0000000000000001f);\n    assert(truncate_number(3.00000000000000001f) == 0.00000000000000001f);\n    assert(truncate_number(3.000000000000000001f) == 0.000000000000000001f);\n    assert(truncate_number(3.0000000000000000001f) == 0.0000000000000000001f);\n    assert(truncate_number(3.00000000000000000001f) == 0.00000000000000000001f);\n    assert(truncate_number(3.000000000000000000001f) == 0.000000000000000000001f);\n    assert(truncate_number(3.0000000000000000000001f) == 0.0000000000000000000001f);\n    assert(truncate_number(3.00000000000000000000001f) == 0.00000000000000000000001f);\n    assert(truncate_number(3.000000000000000000000001f) == 0.000000000000000000000001f);\n    assert(truncate_number(3.0000000000000000000000001f) == 0.0000000000000000000000001f);\n    assert(truncate_number(3.00000000000000000000000001f) == 0.00000000000000000000000001f);\n    assert(truncate_number(3.000000000000000000000000001f) == 0.000000000000000000000000001f);\n    assert(truncate_number(3.0000000000000000000000000001f) == 0.0000000000000000000000000001f);\n    assert(truncate_number(3.00000000000000000000000000001f) == 0.00000000000000000000000000001f);\n    assert(truncate_number(3.000000000000000000000000000001f) == 0.000000000000000000000000000001f);\n    assert(truncate_number(3.0000000000000000000000000000001f) == 0.0000000000000000000000000000001f);\n    assert(truncate_number(3.00000000000000000000000000000001f) == 0.00000000000000000000000000000001f);\n    assert(truncate_number(3.000000000000000000000000000000001f) == 0.000"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations) { \n    long balance = 0;\n    for (auto op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n// (1.0f)\nfloat mean_absolute_deviation(std::vector<float> numbers) { \n    float sum = 0.0f;\n    float mean = 0.0f;\n    for (auto n : numbers) {\n        sum += n;\n    }\n    mean = sum / numbers.size();\n    float mad = 0.0f;\n    for (auto n : numbers) {\n        mad += fabsf(n - mean);\n    }\n    return mad / numbers.size();"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Insert a number 'delimeter' between every two consecutive elements of input vector `numbers'\n// >>> intersperse((std::vector<long>()), (4))\n// (std::vector<long>())\n// >>> intersperse((std::vector<long>({(long)1, (long)2, (long)3})), (4))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)4, (long)3}))\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) { \n    std::vector<long> result;\n    for (auto num : numbers) {\n        result.push_back(num);\n        result.push_back(delimeter);\n    }\n    result.pop_back();\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string paren_string) { \n    std::vector<long> result;\n    std::string str = paren_string;\n    str = str.substr(1, str.length() - 2);\n    std::string temp = \"\";\n    long max_depth = 0;\n    long current_depth = 0;\n    for (long i = 0; i < str.length(); i++) {\n        if (str[i] == '(') {\n            current_depth++;\n            if (current_depth > max_depth) {\n                max_depth = current_depth;\n            }\n        }\n        else if (str[i] == ')') {\n            current_depth--;\n        }\n        if (str[i] == ' ') {\n            result.push_back(max_depth);\n            max_depth = 0;\n            current_depth = 0;\n            temp = \"\";\n        }\n        else {\n            temp += str[i];\n        }\n    }\n    result.push_back(max_depth);\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) { \n    std::vector<std::string> filtered_strings;\n    for (auto str : strings) {\n        if (str.find(substring) != std::string::npos) {\n            filtered_strings.push_back(str);\n        }\n    }\n    return filtered_strings;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product((std::vector<long>()))\n// (std::make_tuple(0, 1))\n// >>> sum_product((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::make_tuple(10, 24))\nstd::tuple<long, long> sum_product(std::vector<long> numbers) { \n    long sum = 0;\n    long product = 1;\n    for (auto num : numbers) {\n        sum += num;\n        product *= num;\n    }\n    return std::make_tuple(sum, product);"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// From a given vector of integers, generate a vector of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)2})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4}))\nstd::vector<long> rolling_max(std::vector<long> numbers) { \n    std::vector<long> result;\n    result.reserve(numbers.size());\n    long max = 0;\n    for (long i = 0; i < numbers.size(); ++i) {\n        max = std::max(max, numbers[i]);\n        result.push_back(max);\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome((\"\"))\n// (\"\")\n// >>> make_palindrome((\"cat\"))\n// (\"catac\")\n// >>> make_palindrome((\"cata\"))\n// (\"catac\")\nstd::string make_palindrome(std::string string) { \n    int n = string.length();\n    int i = 0, j = n - 1;\n    while (i < j) {\n        if (string[i] == string[j]) {\n            i++;\n            j--;\n        } else {\n            break;\n        }\n    }\n    std::string prefix = string.substr(0, i);\n    std::string suffix = string.substr(i, j + 1);\n    std::string rev_prefix = std::string(prefix.rbegin(), prefix.rend());\n    std::string rev_suffix = std::string(suffix.rbegin(), suffix.rend());\n    return rev_prefix + suffix + rev_suffix;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor((\"010\"), (\"110\"))\n// (\"100\")\nstd::string string_xor(std::string a, std::string b) { \n    std::string result = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        result += (a[i] == b[i] ? \"0\" : \"1\");\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n// std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string> longest(std::vector<std::string> strings) { \n    assert(!strings.empty());\n    std::string longest = strings[0];\n    for (auto& str : strings) {\n        if (str.size() > longest.size()) {\n            longest = str;\n        }\n    }\n    return longest;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor((3), (5))\n// (1)\n// >>> greatest_common_divisor((25), (15))\n// (5)\nlong greatest_common_divisor(long a, long b) { \n    if (b == 0) \n        return a; \n    return greatest_common_divisor(b, a % b); "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n// (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) { \n    std::vector<std::string> prefixes;\n    for (int i = 0; i < string.length(); i++) {\n        prefixes.push_back(string.substr(0, i + 1));\n    }\n    return prefixes;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence((0))\n// (\"0\")\n// >>> string_sequence((5))\n// (\"0 1 2 3 4 5\")\nstd::string string_sequence(long n) { \n    std::string s;\n    for (long i = 0; i <= n; i++) {\n        s += std::to_string(i) + \" \";\n    }\n    return s;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) { \n    std::unordered_set<char> distinct_characters;\n    for (char c : string) {\n        distinct_characters.insert(tolower(c));\n    }\n    return distinct_characters.size();"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4, (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4, (long)4}))\nstd::vector<long> parse_music(std::string music_string) { \n    std::vector<long> beats;\n    std::string note;\n    for (int i = 0; i < music_string.size(); i++) {\n        if (music_string[i] == 'o') {\n            beats.push_back(4);\n        } else if (music_string[i] == '|' && music_string[i+1] == 'o') {\n            beats.push_back(2);\n            i++;\n        } else if (music_string[i] == '|' && music_string[i+1] == '.') {\n            beats.push_back(1);\n            i++;\n        }\n    }\n    return beats;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong how_many_times(std::string string, std::string substring) { \n    long count = 0;\n    long pos = 0;\n    while (pos < string.length()) {\n        pos = string.find(substring, pos);\n        if (pos == std::string::npos) {\n            break;\n        }\n        count++;\n        pos += substring.length();\n    }\n    return count;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string numbers) { \n    std::vector<std::string> v;\n    std::string s;\n    for (int i = 0; i < numbers.size(); i++) {\n        s = numbers.substr(i, 1);\n        v.push_back(s);\n    }\n    std::sort(v.begin(), v.end());\n    std::string result;\n    for (int i = 0; i < v.size(); i++) {\n        result += v[i];\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// From a supplied vector of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f})))\n// (std::make_tuple(2.0f, 2.2f))\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})))\n// (std::make_tuple(2.0f, 2.0f))\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) { \n    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    std::tuple<float, float> closest;\n    for (int i = 0; i < numbers.size() - 1; ++i) {\n        float diff = std::abs(numbers[i] - numbers[i + 1]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest = std::make_tuple(numbers[i], numbers[i + 1]);\n        }\n    }\n    return closest;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers (of at least two elements), apply a linear transform to that vector,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f})))\n// (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) { \n    float min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n    std::vector<float> rescaled;\n    for (auto& n : numbers) {\n        rescaled.push_back((n - min) / (max - min));\n    }\n    return rescaled;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers((std::vector<std::any>({(std::string)\"a\", (std::string)3.14f, (std::string)5})))\n// (std::vector<long>({(long)5}))\n// >>> filter_integers((std::vector<std::any>({1, 2, 3, \"abc\", std::map<long,long>(), std::vector<long>()})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\nstd::vector<long> filter_integers(std::vector<std::any> values) { \n    std::vector<long> result;\n    for (auto& v : values) {\n        if (v.type() == typeid(long)) {\n            result.push_back(static_cast<long>(v));\n        }\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return length of given string\n// >>> string_length((\"\"))\n// (0)\n// >>> string_length((\"abc\"))\n// (3)\nlong string_length(std::string string) { return string.length(); }\nint main() {\n    std::string str = \"abc\";\n    std::cout << string_length(str) << std::endl;\n    return 0;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n// (5)\nlong largest_divisor(long n) { \n    for (long i = n - 1; i > 0; i--) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 1;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long n) { \n    std::vector<long> factors;\n    while (n % 2 == 0) {\n        factors.push_back(2);\n        n /= 2;\n    }\n    for (long i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 2)\n        factors.push_back(n);\n    return factors;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// From a vector of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4})))\n// (std::vector<long>({(long)1, (long)3, (long)4}))\nstd::vector<long> remove_duplicates(std::vector<long> numbers) { \n    std::unordered_map<long, int> count;\n    for (long n : numbers) {\n        count[n]++;\n    }\n    std::vector<long> result;\n    for (long n : numbers) {\n        if (count[n] == 1) {\n            result.push_back(n);\n        }\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) { \n    std::string result = \"\"; \n    for (int i = 0; i < string.length(); i++) { \n        if (string[i] >= 'a' && string[i] <= 'z') { \n            result += string[i] - 32; \n        } \n        else if (string[i] >= 'A' && string[i] <= 'Z') { \n            result += string[i] + 32; \n        } \n        else { \n            result += string[i]; \n        } \n    } \n    return result; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string> strings) { \n    std::string result;\n    for (auto& str : strings) {\n        result += str;\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) { \n    std::vector<std::string> filtered_strings;\n    for (auto& str : strings) {\n        if (str.substr(0, prefix.size()) == prefix) {\n            filtered_strings.push_back(str);\n        }\n    }\n    return filtered_strings;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4, (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n// >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long> get_positive(std::vector<long> l) { \n    std::vector<long> res;\n    for (auto x : l) {\n        if (x > 0)\n            res.push_back(x);\n    }\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n// >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n// (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n// >>> is_prime((1))\n// (false)\nbool is_prime(long n) { \n    if (n <= 1) \n        return false;\n    if (n <= 3) \n        return true;\n    if (n % 2 == 0 || n % 3 == 0) \n        return false;\n    for (long i = 5; i * i <= n; i = i + 6) \n        if (n % i == 0 || n % (i + 2) == 0) \n            return false;\n    return true;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_third((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2})))\n// (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5}))\nstd::vector<long> sort_third(std::vector<long> l) { \n    std::vector<long> l1;\n    std::vector<long> l2;\n    std::vector<long> l3;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0) {\n            l1.push_back(l[i]);\n        } else if (i % 3 == 1) {\n            l2.push_back(l[i]);\n        } else {\n            l3.push_back(l[i]);\n        }\n    }\n    std::sort(l2.begin(), l2.end());\n    l1.insert(l1.end(), l3.begin(), l3.end());\n    l1.insert(l1.end(), l2.begin(), l2.end());\n    return l1;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long> l) { \n    std::set<long> s(l.begin(), l.end());\n    return std::vector<long>(s.begin(), s.end());"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n// (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\nlong max_element(std::vector<long> l) { return *std::max_element(l.begin(), l.end()); }\nint main() {\n    std::vector<long> l = {1, 2, 3};\n    assert(max_element(l) == 3);\n    l = {5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10};\n    assert(max_element(l) == 123);\n    return 0;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n// (3)\nlong fizz_buzz(long n) { \n    long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            while (i > 0) {\n                if (i % 10 == 7) {\n                    count++;\n                }\n                i /= 10;\n            }\n        }\n    }\n    return count;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_even((std::vector<long>({(long)5, (long)6, (long)3, (long)4})))\n// (std::vector<long>({(long)3, (long)6, (long)5, (long)4}))\nstd::vector<long> sort_even(std::vector<long> l) { \n    std::vector<long> l_even;\n    std::vector<long> l_odd;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            l_even.push_back(l[i]);\n        } else {\n            l_odd.push_back(l[i]);\n        }\n    }\n    std::sort(l_even.begin(), l_even.end());\n    l_odd.insert(l_odd.end(), l_even.begin(), l_even.end());\n    return l_odd;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib((1))\n// (2)\n// >>> prime_fib((2))\n// (3)\n// >>> prime_fib((3))\n// (5)\n// >>> prime_fib((4))\n// (13)\n// >>> prime_fib((5))\n// (89)\nlong prime_fib(long n) { \n    long a = 0, b = 1, c = 0, i = 0;\n    while (c < n) {\n        c = a + b;\n        a = b;\n        b = c;\n        i++;\n        if (is_prime(c)) {\n            n--;\n        }\n    }\n    return c;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are three distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool triples_sum_to_zero(std::vector<long> l) { \n    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nlong car_race_collision(long n) { \n    return n/2;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector with elements incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) { \n    for (long i = 0; i < l.size(); i++) {\n        l[i] += 1;\n    }\n    return l;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are two distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool pairs_sum_to_zero(std::vector<long> l) { \n    std::set<long> s;\n    for (long x : l) {\n        if (s.find(-x) != s.end()) {\n            return true;\n        }\n        s.insert(x);\n    }\n    return false;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n// >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n// (\"111\")\nstd::string change_base(long x, long base) { \n    std::string result = \"\"; \n    while (x > 0) { \n        result = std::to_string(x % base) + result; \n        x /= base; \n    } \n    return result; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area((5), (3))\n// (7.5f)\nfloat triangle_area(long a, long h) { return 0.5f * a * h; }\nint main() {\n    assert(triangle_area(5, 3) == 7.5f);\n    return 0;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4((5))\n// (4)\n// >>> fib4((6))\n// (8)\n// >>> fib4((7))\n// (14)\nlong fib4(long n) { \n    long a = 0, b = 0, c = 2, d = 0;\n    for (long i = 3; i <= n; i++) {\n        d = a + b + c + d;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0f)\nfloat median(std::vector<long> l) { \n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n/2 - 1] + l[n/2]) / 2.0f;\n    } else {\n        return l[n/2];\n    }"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string is a palindrome\n// >>> is_palindrome((\"\"))\n// (true)\n// >>> is_palindrome((\"aba\"))\n// (true)\n// >>> is_palindrome((\"aaaaa\"))\n// (true)\n// >>> is_palindrome((\"zbcd\"))\n// (false)\nbool is_palindrome(std::string text) { \n    int left = 0;\n    int right = text.length() - 1;\n    while (left < right) {\n        if (text[left] != text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp((3), (5))\n// (3)\n// >>> modp((1101), (101))\n// (2)\n// >>> modp((0), (101))\n// (1)\n// >>> modp((3), (11))\n// (8)\n// >>> modp((100), (101))\n// (1)\nlong modp(long n, long p) { return (n % p + p) % p; }\nlong modp(long n, long p, long m) { return (n % p + p) % p; }\nlong modp(long n, long p, long m, long k) { return (n % p + p) % p; }\nlong modp(long n, long p, long m, long k, long l) { return (n % p + p) % p; }\nlong modp(long n, long p, long m, long k, long l, long o) { return (n % p + p) % p; }\nlong modp(long n, long p, long m, long k, long l, long o, long q) { return (n % p + p) % p; }\nlong modp(long n, long p, long m, long k, long l, long o, long q, long r) { return (n % p + p) % p; }\nlong modp(long n, long p, long m, long k, long l, long o, long q, long r, long s) { return (n % p + p) % p; }\nlong modp(long n, long p, long m, long k, long l, long o, long q, long r, long s, long t) { return (n % p + p) % p; }\nlong modp(long n, long p, long m, long k, long l, long o, long q, long r, long s, long t, long u) { return (n % p + p) % p; }\nlong modp(long n, long p, long m, long k, long l, long o, long q, long r, long s, long t, long u, long v) { return (n % p + p) % p; }\nlong modp(long n, long p, long m, long k, long l, long o, long q, long r, long s, long t, long u, long v, long w) { return (n % p + p) % p; }\nlong modp(long n, long p, long m, long k, long l, long o, long q, long r, long s, long t, long u, long v, long w, long x) { return (n % p + p) % p; }\nlong modp(long n, long p, long m, long k, long l, long o, long q, long r, long s, long t, long u, long v, long w, long x, long y) { return (n % p + p) % p; }\nlong modp(long n, long p, long m, long k, long l, long o, long q, long r, long s, long t, long u, long v, long w, long x, long y, long z) { return (n % p + p) % p; }\nlong modp(long n, long p, long m, long k, long l, long o, long q, long r, long s, long t, long u, long v, long w, long x, long y, long z, long aa) { return (n % p + p) % p; }\nlong modp(long n, long p, long m, long k, long l, long o, long q, long r, long s, long t, long u, long v, long w, long x, long y, long z, long aa, long bb) { return (n % p + p) % p; }\nlong modp(long n, long p, long m, long k, long l, long o, long q, long r, long s, long t, long u, long v, long w, long x, long y, long z, long aa, long bb, long cc) { return (n % p + p) % p; }\nlong modp(long n, long p, long m, long k, long l, long o, long q, long r, long s, long t, long u, long v, long w, long x, long y, long z, long aa, long bb, long cc, long dd) { return (n % p + p) % p; }\nlong modp(long n,"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels((\"\"))\n// (\"\")\n// >>> remove_vowels((\"abcdef\"))\n// (\"bcdf\")\n// >>> remove_vowels((\"aaaaa\"))\n// (\"\")\n// >>> remove_vowels((\"aaBAA\"))\n// (\"B\")\n// >>> remove_vowels((\"zbcd\"))\n// (\"zbcd\")\nstd::string remove_vowels(std::string text) { \n    std::string result = text;\n    for (int i = 0; i < text.length(); i++) {\n        char c = text[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            result.erase(i, 1);\n            i--;\n        }\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if all numbers in the vector l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long> l, long t) { return std::all_of(l.begin(), l.end(), [t](long x){ return x < t; }); }\nint main() {\n    assert(below_threshold({1, 2, 4, 10}, 100) == true);\n    assert(below_threshold({1, 20, 4, 10}, 5) == false);\n    return 0;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Add two numbers x and y\n// >>> add((2), (3))\n// (5)\n// >>> add((5), (7))\n// (12)\nlong add(long x, long y) { return x + y; }\nint main() {\n    assert(add(2, 3) == 5);\n    assert(add(5, 7) == 12);\n    return 0;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Check if two words have the same characters.\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n// (true)\n// >>> same_chars((\"abcd\"), (\"dddddddabc\"))\n// (true)\n// >>> same_chars((\"dddddddabc\"), (\"abcd\"))\n// (true)\n// >>> same_chars((\"eabcd\"), (\"dddddddabc\"))\n// (false)\n// >>> same_chars((\"abcd\"), (\"dddddddabce\"))\n// (false)\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n// (false)\nbool same_chars(std::string s0, std::string s1) { \n    std::unordered_map<char, int> m0, m1;\n    for (char c : s0) m0[c]++;\n    for (char c : s1) m1[c]++;\n    return m0 == m1;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci number.\n// >>> fib((10))\n// (55)\n// >>> fib((1))\n// (1)\n// >>> fib((8))\n// (21)\nlong fib(long n) { \n    if (n <= 1) \n        return n; \n    return fib(n-1) + fib(n-2); "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"<>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>> correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string brackets) { \n    int count = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n            count++;\n        } else if (brackets[i] == '>') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count == 0;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1, (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1, (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4, (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long> l) { \n    bool isMonotonic = true;\n    long prev = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (prev > l[i]) {\n            isMonotonic = false;\n            break;\n        }\n        prev = l[i];\n    }\n    if (isMonotonic) {\n        return true;\n    }\n    isMonotonic = true;\n    prev = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (prev < l[i]) {\n            isMonotonic = false;\n            break;\n        }\n        prev = l[i];\n    }\n    return isMonotonic;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1, (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2, (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) { \n    std::set<long> s1(l1.begin(), l1.end());\n    std::set<long> s2(l2.begin(), l2.end());\n    std::vector<long> v;\n    for (auto x : s1) {\n        if (s2.find(x) != s2.end()) {\n            v.push_back(x);\n        }\n    }\n    return v;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n// (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long n) { \n    long largest = 1;\n    while (n % 2 == 0) {\n        largest = 2;\n        n /= 2;\n    }\n    for (long i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            largest = i;\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        largest = n;\n    }\n    return largest;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n((30))\n// (465)\n// >>> sum_to_n((100))\n// (5050)\n// >>> sum_to_n((5))\n// (15)\n// >>> sum_to_n((10))\n// (55)\n// >>> sum_to_n((1))\n// (1)\nlong sum_to_n(long n) { return (n * (n + 1)) / 2; }\nint main() {\n    assert(sum_to_n(30) == 465);\n    assert(sum_to_n(100) == 5050);\n    assert(sum_to_n(5) == 15);\n    assert(sum_to_n(10) == 55);\n    assert(sum_to_n(1) == 1);\n    return 0;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>> correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string brackets) { \n    int balance = 0;\n    for (char c : brackets) {\n        if (c == '(') {\n            balance++;\n        } else if (c == ')') {\n            balance--;\n        }\n        if (balance < 0) {\n            return false;\n        }\n    }\n    return balance == 0;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4, (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long> xs) { \n    std::vector<long> ret;\n    for (int i = 1; i < xs.size(); i++) {\n        ret.push_back(xs[i] * i);\n    }\n    return ret;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n// >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) { \n    if (n == 0 || n == 1) \n        return 0;\n    if (n == 2) \n        return 1;\n    long a = 0, b = 0, c = 1;\n    for (long i = 3; i <= n; i++) {\n        long d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count((\"abcde\"))\n// (2)\n// >>> vowels_count((\"ACEDY\"))\n// (3)\nlong vowels_count(std::string s) { \n    long count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n            count++;\n        }\n    }\n    if (s.size() > 0 && s[s.size() - 1] == 'y') {\n        count++;\n    }\n    return count;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift((12), (1))\n// (\"21\")\n// >>> circular_shift((12), (2))\n// (\"12\")\nstd::string circular_shift(long x, long shift) { \n    std::string s = std::to_string(x);\n    long n = s.length();\n    shift = shift % n;\n    if (shift == 0) {\n        return s;\n    }\n    return s.substr(n - shift) + s.substr(0, n - shift);"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum((\"\"))\n// (0)\n// >>> digitSum((\"abAB\"))\n// (131)\n// >>> digitSum((\"abcCd\"))\n// (67)\n// >>> digitSum((\"helloE\"))\n// (69)\n// >>> digitSum((\"woArBld\"))\n// (131)\n// >>> digitSum((\"aAaaaXa\"))\n// (153)\nlong digitSum(std::string s) { \n    long sum = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n    return sum;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution((\"5 apples and 6 oranges\"), (19))\n// (8)\n// >>> fruit_distribution((\"0 apples and 1 oranges\"), (3))\n// (2)\n// >>> fruit_distribution((\"2 apples and 3 oranges\"), (100))\n// (95)\n// >>> fruit_distribution((\"100 apples and 1 oranges\"), (120))\n// (19)\nlong fruit_distribution(std::string s, long n) { \n    std::string temp = s;\n    temp = temp.substr(0, temp.find(\"and\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"apples\"));\n    temp = temp.substr(0, temp.find(\"ap"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a vector, [ smalest_value, its index ],\n// If there are no even values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n// Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr) { \n    long min = LONG_MAX;\n    long min_index = LONG_MAX;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    if (min_index == LONG_MAX) {\n        return {};\n    }\n    return {min, min_index};"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty vector of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4, (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n// (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4, (long)4})))\n// (-1)\nlong search(std::vector<long> lst) { \n    std::map<long, long> freq;\n    for (long x : lst) {\n        freq[x]++;\n    }\n    for (auto x : freq) {\n        if (x.second >= x.first) {\n            return x.first;\n        }\n    }\n    return -1;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers, return vector in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5, (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n// >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> strange_sort_list(std::vector<long> lst) { \n    std::vector<long> result;\n    if (lst.size() == 0) return result;\n    std::vector<long> min_max;\n    min_max.push_back(*std::min_element(lst.begin(), lst.end()));\n    result.push_back(min_max[0]);\n    lst.erase(std::remove(lst.begin(), lst.end(), min_max[0]), lst.end());\n    while (lst.size() > 0) {\n        min_max.push_back(*std::max_element(lst.begin(), lst.end()));\n        result.push_back(min_max[0]);\n        lst.erase(std::remove(lst.begin(), lst.end(), min_max[0]), lst.end());\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area((3), (4), (5))\n// (6.0f)\n// >>> triangle_area((1), (2), (10))\n// (float(-1))\nfloat triangle_area(long a, long b, long c) { \n    // Check if the three sides form a valid triangle\n    if (a + b > c && a + c > b && b + c > a) {\n        // Calculate the area of the triangle\n        float s = (a + b + c) / 2;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        return round(area * 100) / 100;\n    }\n    else {\n        return -1;\n    }"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1, (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n// (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long w) { \n    long sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if (sum > w) {\n        return false;\n    }\n    return std::is_palindrome(q);"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers, find the minimum number of elements that\n// need to be changed to make the vector palindromic. A palindromic vector is a vector that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6})))\n// (4)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2})))\n// (1)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1})))\n// (0)\nlong smallest_change(std::vector<long> arr) { \n    int n = arr.size();\n    int count = 0;\n    for (int i = 0; i < n/2; i++) {\n        if (arr[i] != arr[n-1-i]) {\n            count++;\n        }\n    }\n    return count;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts two vectors of strings and returns the vector that has \n// total number of chars in the all strings of the vector less than the other vector.\n// if the two vectors have the same number of chars, return the first vector.\n// Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n// (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n// (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) { \n    int sum1 = 0;\n    int sum2 = 0;\n    for (auto& str : lst1) {\n        sum1 += str.size();\n    }\n    for (auto& str : lst2) {\n        sum2 += str.size();\n    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return lst2;\n    }"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) { \n    // check if a is divisible by 2\n    if (a % 2 == 0) {\n        a = a / 2;\n        // check if a is divisible by 3\n        if (a % 3 == 0) {\n            a = a / 3;\n            // check if a is divisible by 5\n            if (a % 5 == 0) {\n                return true;\n            }\n        }\n    }\n    return false;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power((1), (4))\n// (true)\n// >>> is_simple_power((2), (2))\n// (true)\n// >>> is_simple_power((8), (2))\n// (true)\n// >>> is_simple_power((3), (2))\n// (false)\n// >>> is_simple_power((3), (1))\n// (false)\n// >>> is_simple_power((5), (3))\n// (false)\nbool is_simple_power(long x, long n) { \n    if (n == 1) \n        return x == 1; \n    long p = 1; \n    while (p < x) \n        p *= n; \n    return p == x; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n// (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>> iscube((180))\n// (false)\nbool iscube(long a) { \n    long b = 1;\n    while (b * b * b <= a) {\n        if (b * b * b == a) {\n            return true;\n        }\n        b++;\n    }\n    return false;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key((\"AB\"))\n// (1)\n// >>> hex_key((\"1077E\"))\n// (2)\n// >>> hex_key((\"ABED1A33\"))\n// (4)\n// >>> hex_key((\"123456789ABCDEF0\"))\n// (6)\n// >>> hex_key((\"2020\"))\n// (2)\nlong hex_key(std::string num) { \n    long count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        char c = num[i];\n        if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D' || c == 'E' || c == 'F') {\n            count++;\n        }\n    }\n    return count;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n// (\"db100000db\")\nstd::string decimal_to_binary(long decimal) { \n    std::string binary = \"\";\n    while(decimal > 0) {\n        binary = std::to_string(decimal % 2) + binary;\n        decimal = decimal / 2;\n    }\n    return \"db\" + binary + \"db\";"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy((\"a\"))\n// (false)\n// >>> is_happy((\"aa\"))\n// (false)\n// >>> is_happy((\"abcd\"))\n// (true)\n// >>> is_happy((\"aabb\"))\n// (false)\n// >>> is_happy((\"adb\"))\n// (true)\n// >>> is_happy((\"xyy\"))\n// (false)\nbool is_happy(std::string s) { \n    if (s.length() < 3) return false;\n    for (int i = 0; i < s.length() - 2; i++) {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f})))\n// (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) { \n    std::vector<std::string> grades_letter;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0) {\n            grades_letter.push_back(\"A+\");\n        } else if (grades[i] >= 3.7) {\n            grades_letter.push_back(\"A\");\n        } else if (grades[i] >= 3.3) {\n            grades_letter.push_back(\"A-\");\n        } else if (grades[i] >= 3.0) {\n            grades_letter.push_back(\"B+\");\n        } else if (grades[i] >= 2.7) {\n            grades_letter.push_back(\"B\");\n        } else if (grades[i] >= 2.3) {\n            grades_letter.push_back(\"B-\");\n        } else if (grades[i] >= 2.0) {\n            grades_letter.push_back(\"C+\");\n        } else if (grades[i] >= 1.7) {\n            grades_letter.push_back(\"C\");\n        } else if (grades[i] >= 1.3) {\n            grades_letter.push_back(\"C-\");\n        } else if (grades[i] >= 1.0) {\n            grades_letter.push_back(\"D+\");\n        } else if (grades[i] >= 0.7) {\n            grades_letter.push_back(\"D\");\n        } else if (grades[i] >= 0.0) {\n            grades_letter.push_back(\"D-\");\n        } else {\n            grades_letter.push_back(\"E\");\n        }\n    }\n    return grades_letter;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length((\"Hello\"))\n// (true)\n// >>> prime_length((\"abcdcba\"))\n// (true)\n// >>> prime_length((\"kittens\"))\n// (true)\n// >>> prime_length((\"orange\"))\n// (false)\nbool prime_length(std::string string) { \n    int length = string.length();\n    if (length < 2) return false;\n    for (int i = 2; i < length; i++) {\n        if (length % i == 0) return false;\n    }\n    return true;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlong starts_one_ends(long n) { \n    // If n is 1, then there is only one number, 1\n    if (n == 1) \n        return 1; \n    // If n is 2, then there are two numbers, 11 and 21\n    if (n == 2) \n        return 2; \n    // If n is 3, then there are three numbers, 111, 121, 211\n    if (n == 3) \n        return 3; \n    // If n is 4, then there are four numbers, 1111, 1211, 2111, 2211\n    if (n == 4) \n        return 4; \n    // If n is 5, then there are five numbers, 11111, 12111, 21111, 22111, 23111\n    if (n == 5) \n        return 5; \n    // If n is 6, then there are six numbers, 111111, 121111, 211111, 221111, 231111, 311111\n    if (n == 6) \n        return 6; \n    // If n is 7, then there are seven numbers, 1111111, 1211111, 2111111, 2211111, 2311111, 3111111, 3211111\n    if (n == 7) \n        return 7; \n    // If n is 8, then there are eight numbers, 11111111, 12111111, 21111111, 22111111, 23111111, 31111111, 32111111, 33111111\n    if (n == 8) \n        return 8; \n    // If n is 9, then there are nine numbers, 111111111, 121111111, 211111111, 221111111, 231111111, 311111111, 321111111, 331111111, 341111111\n    if (n == 9) \n        return 9; \n    // If n is 10, then there are ten numbers, 1111111111, 1211111111, 2111111111, 2211111111, 2311111111, 3111111111, 3211111111, 3311111111, 3411111111, 4111111111\n    if (n == 10) \n        return 10; \n    // If n is 11, then there are eleven numbers, 11111111111, 12111111111, 21111111111, 22111111111, 23111111111, 31111111111, 32111111111, 33111111111, 34111111111, 41111111111, 51111111111\n    if (n == 11) \n        return 11; \n    // If n is 12, then there are twelve numbers, 111111111111, 121111111111, 211111111111, 221111111111, 231111111111, 311111111111, 321111111111, 331111111111, 341111111111, 411111111111, 511111111111, 611111111111\n    if (n == 12) \n        return 12; \n    // If n is 13, then there are thirteen numbers, 1111111111111, 1211111111111, 2111111111111, 2211111111111, 2311111111111, 3111111111111, 3211111111111, 3311111111111, 3411111111111, 4111111111111, 5111111111111, 6111111111111, 7111111111111\n    if (n == 13) \n        return 13; \n    // If n is 14, then there are fourteen numbers, 11111111111111, 12111111111111, 21111111111111, 22111111111111, 23111111111111, 31111111111111, 32111111111111, 33111111111111, 34111111111111, 41111111111111, 51111111111111, 61111111111111, 71111111111111, 81111111111111"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve((1000))\n// (\"1\")\n// >>> solve((150))\n// (\"110\")\n// >>> solve((147))\n// (\"1100\")\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nstd::string solve(long N) { \n    std::string s = \"\";\n    while (N > 0) {\n        s = std::to_string(N % 2) + s;\n        N /= 2;\n    }\n    return s;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\nlong add(std::vector<long> lst) { \n    long sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle((\"Hi\"))\n// (\"Hi\")\n// >>> anti_shuffle((\"hello\"))\n// (\"ehllo\")\n// >>> anti_shuffle((\"Hello World!!!\"))\n// (\"Hello !!!Wdlor\")\nstd::string anti_shuffle(std::string s) { \n    std::string result = \"\";\n    std::string temp = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            result += temp;\n            result += \" \";\n            temp = \"\";\n        }\n        else {\n            temp += s[i];\n        }\n    }\n    result += temp;\n    std::string sorted = \"\";\n    for (int i = 0; i < result.length(); i++) {\n        sorted += std::min(result[i], result[i+1]);\n    }\n    return sorted;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional data, as a nested vectors,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the vector,\n// and return vector of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()), (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) { \n    std::vector<std::tuple<long, long>> res;\n    for (long i = 0; i < lst.size(); i++) {\n        for (long j = 0; j < lst[i].size(); j++) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end());\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative integers, return a cocpp of the given vector after sorting,\n// you will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given vector.\n// Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n// >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long> array) { \n    if (array.size() == 0) return array;\n    if (array.size() == 1) return array;\n    if ((array[0] + array[array.size() - 1]) % 2 == 0) {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(), array.end());\n    }\n    return array;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt((\"hi\"))\n// (\"lm\")\n// >>> encrypt((\"asdfghjkl\"))\n// (\"ewhjklnop\")\n// >>> encrypt((\"gf\"))\n// (\"kj\")\n// >>> encrypt((\"et\"))\n// (\"ix\")\nstd::string encrypt(std::string s) { \n    std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        char c = s[i];\n        if (c >= 'a' && c <= 'z') {\n            c = (c - 'a' + 2) % 26 + 'a';\n        } else if (c >= 'A' && c <= 'Z') {\n            c = (c - 'A' + 2) % 26 + 'A';\n        }\n        result += c;\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n// Return None if there is no such element.\n// >>> next_smallest((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// 2\n// >>> next_smallest((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2})))\n// 2\n// >>> next_smallest((std::vector<long>()))\n// std::nullopt\n// >>> next_smallest((std::vector<long>({(long)1, (long)1})))\n// std::nullopt\nstd::optional<long> next_smallest(std::vector<long> lst) { \n    if (lst.size() < 2) return std::nullopt;\n    long min = *std::min_element(lst.begin(), lst.end());\n    long second_min = std::numeric_limits<long>::max();\n    for (auto& x : lst) {\n        if (x < second_min && x != min) {\n            second_min = x;\n        }\n    }\n    if (second_min == std::numeric_limits<long>::max()) return std::nullopt;\n    return second_min;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n// >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n// (1)\nlong is_bored(std::string S) { \n    long boredom = 0;\n    std::string s = S;\n    std::string word;\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n    std::string temp16;\n    std::string temp17;\n    std::string temp18;\n    std::string temp19;\n    std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n    std::string temp32;\n    std::string temp33;\n    std::string temp34;\n    std::string temp35;\n    std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n    std::string temp48;\n    std::string temp49;\n    std::string temp50;\n    std::string temp51;\n    std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n    std::string temp62;\n    std::string temp63;\n    std::string temp64;\n    std::string temp65;\n    std::string temp66;\n    std::string temp67;\n    std::string temp68;\n    std::string temp69;\n    std::string temp70;\n    std::string temp71;\n    std::string temp72;\n    std::string temp73;\n    std::string temp74;\n    std::string temp75;\n    std::string temp76;\n    std::string temp77;\n    std::string temp78;\n    std::string temp79;\n    std::string temp80;\n    std::string temp81;\n    std::string temp82;\n    std::string temp83;\n    std::string temp84;\n    std::string temp85;\n    std::string temp86;\n    std::string temp87;\n    std::string temp88;\n    std::string temp89;\n    std::string temp90;\n    std::string temp91;\n    std::string temp92;\n    std::string temp93;\n    std::string temp94;\n    std::string temp95;\n    std::string temp96;\n    std::string temp97;\n    std::string temp98;\n    std::string temp99;\n    std::string temp100;\n    std::string temp101;\n    std::string temp102;\n    std::string temp103;\n    std::string temp104;\n    std::string temp105;\n    std::string temp106;\n    std::string temp107;\n    std::string temp108;\n    std::string temp109;\n    std::string temp110;\n    std::string temp111;\n    std::string temp112;\n    std::string temp113;\n    std::string temp114;\n    std::string temp115;\n    std::string temp116;\n    std::string temp117;\n    std::string temp118;\n    std::string temp119;\n    std::string temp120;\n    std::string temp121;\n    std::string temp122;\n    std::string temp123;\n    std::string temp124;\n    std::string temp125;\n    std::string temp126;\n    std::string temp127;\n    std::string temp128"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n// (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>> any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6f), (-2.2f), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) { \n    // Check if any of the numbers is equal to the sum of the other two\n    if (x == y + z || y == x + z || z == x + y) {\n        return true;\n    }\n    return false;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string message) { \n    std::string encoded = \"\"; \n    for (char c : message) { \n        if (isupper(c)) { \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c = toupper(c); \n            c ="], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\n// (10)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1})))\n// (25)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3})))\n// (13)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6})))\n// (11)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21})))\n// (3)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7})))\n// (7)\nlong skjkasdkd(std::vector<long> lst) { \n    long max_prime = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (isPrime(lst[i])) {\n            max_prime = max(max_prime, lst[i]);\n        }\n    }\n    return sumDigits(max_prime);"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string> dict) { \n    if (dict.empty()) {\n        return false;\n    }\n    bool is_lower = true;\n    bool is_upper = true;\n    for (auto& kv : dict) {\n        if (kv.first[0] >= 'a' && kv.first[0] <= 'z') {\n            is_lower = false;\n        }\n        if (kv.first[0] >= 'A' && kv.first[0] <= 'Z') {\n            is_upper = false;\n        }\n    }\n    return is_lower || is_upper;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that takes an non-negative integer and returns a vector of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to((5))\n// (std::vector<long>({(long)2, (long)3}))\n// >>> count_up_to((11))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7}))\n// >>> count_up_to((0))\n// (std::vector<long>())\n// >>> count_up_to((20))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19}))\n// >>> count_up_to((1))\n// (std::vector<long>())\n// >>> count_up_to((18))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17}))\nstd::vector<long> count_up_to(long n) { \n    std::vector<long> primes;\n    if (n == 0) {\n        return primes;\n    }\n    for (long i = 2; i < n; i++) {\n        bool isPrime = true;\n        for (long j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push_back(i);\n        }\n    }\n    return primes;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply((148), (412))\n// (16)\n// >>> multiply((19), (28))\n// (72)\n// >>> multiply((2020), (1851))\n// (0)\n// >>> multiply((14), (-15))\n// (20)\nlong multiply(long a, long b) { \n    return (a % 10) * (b % 10); "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper((\"aBCdEf\"))\n// (1)\n// >>> count_upper((\"abcdefg\"))\n// (0)\n// >>> count_upper((\"dBBE\"))\n// (0)\nlong count_upper(std::string s) { \n    long count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            if (i % 2 == 0) {\n                count++;\n            }\n        }\n    }\n    return count;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong closest_integer(std::string value) { \n    double num = std::stod(value);\n    if (num == std::floor(num)) return static_cast<long>(num);\n    return (num > 0) ? static_cast<long>(std::ceil(num)) : static_cast<long>(std::floor(num));"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a vector, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile((3))\n// (std::vector<long>({(long)3, (long)5, (long)7}))\nstd::vector<long> make_a_pile(long n) { \n    std::vector<long> res;\n    res.push_back(n);\n    for (long i = 1; i < n; i++) {\n        if (n % 2 == 0) {\n            n += 2;\n        } else {\n            n += 1;\n        }\n        res.push_back(n);\n    }\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return a vector of the words.\n// For example:\n// >>> words_string((\"Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n// >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string s) { \n    std::vector<std::string> words;\n    std::string word;\n    for (char c : s) {\n        if (c == ',') {\n            words.push_back(word);\n            word = \"\";\n        } else {\n            word += c;\n        }\n    }\n    words.push_back(word);\n    return words;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n// >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) { \n    if (x % 2 == 0 && x <= y) return x;\n    if (y % 2 == 0 && y >= x) return y;\n    return -1;"], ["#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>> rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n// >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long n, long m) { \n    if (n > m) {\n        return Union_std_string_long(-1);\n    }\n    long sum = 0;\n    for (long i = n; i <= m; i++) {\n        sum += i;\n    }\n    long avg = sum / (m - n + 1);\n    long rounded = (avg + 0.5) / 1;\n    return Union_std_string_long(std::bitset<32>(rounded).to_string());"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long> unique_digits(std::vector<long> x) { \n    std::vector<long> result;\n    for (long i : x) {\n        bool has_even_digit = false;\n        while (i > 0) {\n            if (i % 10 % 2 == 0) {\n                has_even_digit = true;\n                break;\n            }\n            i /= 10;\n        }\n        if (!has_even_digit) {\n            result.push_back(i);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting vector, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n// (std::vector<std::string>())\n// If the vector has any strange number ignore it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n// (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string> by_length(std::vector<long> arr) { \n    std::vector<std::string> result;\n    std::vector<std::string> names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    std::vector<long> temp;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9) {\n            temp.push_back(i);\n        }\n    }\n    std::sort(temp.begin(), temp.end());\n    std::reverse(temp.begin(), temp.end());\n    for (long i : temp) {\n        result.push_back(names[i - 1]);\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Implement the function f that takes n as a parameter,\n// and returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f((5))\n// (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15}))\nstd::vector<long> f(long n) { \n    std::vector<long> result(n);\n    for (long i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            long factorial = 1;\n            for (long j = 1; j <= i; j++) {\n                factorial *= j;\n            }\n            result[i-1] = factorial;\n        } else {\n            long sum = 0;\n            for (long j = 1; j <= i; j++) {\n                sum += j;\n            }\n            result[i-1] = sum;\n        }\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome((3))\n// (std::make_tuple(1, 2))\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome((12))\n// (std::make_tuple(4, 6))\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nstd::tuple<long, long> even_odd_palindrome(long n) { \n    long even = 0, odd = 0;\n    for (long i = 1; i <= n; i++) {\n        if (is_palindrome(i)) {\n            if (i % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return std::make_tuple(even, odd);"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums which takes a vector of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1, (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1, (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) { \n    long count = 0;\n    for (auto num : arr) {\n        long sum = 0;\n        while (num != 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the vector will be randomly ordered. Your task is to determine if\n// it is possible to get a vector sorted in non-decreasing order by performing \n// the following operation on the given vector:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the vector by one\n// position in the right direction. The last element of the vector will be moved to\n// the starting position in the vector i.e. 0th index. \n// If it is possible to obtain the sorted vector by performing the above operation\n// then return true else return false.\n// If the given vector is empty then return true.\n// Note: The given vector is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2})))\n// (true)\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given vector.\n// >>> move_one_ball((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2})))\n// (false)\n// Explanation:It is not possible to get non-decreasing order for the given\n// vector by performing any number of right shift operations.\nbool move_one_ball(std::vector<long> arr) { \n    int n = arr.size();\n    if (n == 0) return true;\n    long max = *max_element(arr.begin(), arr.end());\n    long min = *min_element(arr.begin(), arr.end());\n    if (max == min) return true;\n    long diff = max - min;\n    if (diff % n == 0) return true;\n    return false;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// In this problem, you will implement a function that takes two vectors of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a vector of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (\"YES\")\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4})))\n// (\"NO\")\n// It is assumed that the input vectors will be non-empty.\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) { \n    int odd1 = 0, odd2 = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1[i] % 2 != 0) {\n            odd1++;\n        }\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n        if (lst2[i] % 2 != 0) {\n            odd2++;\n        }\n    }\n    if (odd1 + odd2 >= 2) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n// >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long> histogram(std::string test) { \n    std::map<std::string,long> m;\n    std::string s = test;\n    s = s.substr(0, s.find(\" \"));\n    while (s.size() > 0) {\n        std::string word = s.substr(0, s.find(\" \"));\n        s = s.substr(s.find(\" \") + 1);\n        m[word] += 1;\n    }\n    return m;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a tuple containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete((\"abcde\"), (\"ae\"))\n// (std::make_tuple(\"bcd\", false))\n// >>> reverse_delete((\"abcdef\"), (\"b\"))\n// (std::make_tuple(\"acdef\", false))\n// >>> reverse_delete((\"abcdedcba\"), (\"ab\"))\n// (std::make_tuple(\"cdedc\", true))\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) { \n    std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (std::find(c.begin(), c.end(), s[i]) == c.end()) {\n            result += s[i];\n        }\n    }\n    bool isPalindrome = true;\n    for (int i = 0; i < result.length() / 2; i++) {\n        if (result[i] != result[result.length() - 1 - i]) {\n            isPalindrome = false;\n            break;\n        }\n    }\n    return std::make_tuple(result, isPalindrome);"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of strings, where each string consists of only digits, return a vector.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count((std::vector<std::string>({(std::string)\"1234567\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}))\n// >>> odd_count((std::vector<std::string>({(std::string)\"3\", (std::string)\"11111111\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (std::string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"}))\nstd::vector<std::string> odd_count(std::vector<std::string> lst) { \n    std::vector<std::string> result;\n    for (auto& str : lst) {\n        int count = 0;\n        for (auto& c : str) {\n            if (c % 2 == 1) {\n                count++;\n            }\n        }\n        result.push_back(\"the number of odd elements \" + std::to_string(count) + \"n the str\" + std::to_string(count) + \" of the \" + std::to_string(count) + \"nput.\");\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n// >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1, (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums) { \n    long minSum = 0;\n    long maxSum = 0;\n    long min = 0;\n    long max = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        maxSum += nums[i];\n        max = maxSum;\n        minSum = minSum + nums[i];\n        min = minSum;\n        if (maxSum < minSum) {\n            minSum = maxSum;\n            max = min;\n        }\n    }\n    return min;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) { \n    long max_fill = 0;\n    long rows = grid.size();\n    long cols = grid[0].size();\n    for (long i = 0; i < rows; i++) {\n        long water = 0;\n        for (long j = 0; j < cols; j++) {\n            if (grid[i][j] == 1) {\n                water += 1;\n            }\n            max_fill += water;\n            if (water > capacity) {\n                max_fill++;\n                water = 0;\n            }\n        }\n    }\n    return max_fill;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to sort a vector of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6, (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long> arr) { \n    // Sort the array\n    std::sort(arr.begin(), arr.end(), [](long a, long b) {\n        // Count the number of ones in the binary representation of a\n        long ones_a = __builtin_popcountll(a);\n        // Count the number of ones in the binary representation of b\n        long ones_b = __builtin_popcountll(b);\n        // If the number of ones is the same, sort by the decimal value\n        if (ones_a == ones_b) {\n            return a < b;\n        }\n        // If the number of ones is different, sort by the number of ones\n        return ones_a < ones_b;\n    });\n    return arr;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a vector of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty vector.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\nstd::vector<std::string> select_words(std::string s, long n) { \n    std::vector<std::string> result;\n    std::string word;\n    long count = 0;\n    for (long i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            if (count == n) {\n                result.push_back(word);\n            }\n            word = \"\";\n            count = 0;\n        } else {\n            if (isVowel(s[i])) {\n                word += s[i];\n            } else {\n                count++;\n            }\n        }\n    }\n    if (count == n) {\n        result.push_back(word);\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n// (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string get_closest_vowel(std::string word) { \n    std::string vowels = \"AEIOUaeiou\";\n    int n = word.length();\n    int l = n - 1;\n    while (l >= 0 && word[l] != 'A' && word[l] != 'E' && word[l] != 'I' && word[l] != 'O' && word[l] != 'U') {\n        l--;\n    }\n    if (l < 0) {\n        return \"\";\n    }\n    int r = l + 1;\n    while (r < n && word[r] != 'A' && word[r] != 'E' && word[r] != 'I' && word[r] != 'O' && word[r] != 'U') {\n        r++;\n    }\n    if (r >= n) {\n        return \"\";\n    }\n    for (int i = l + 1; i < r; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            return word[i];\n        }\n    }\n    return \"\";"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\", (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\")\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string> lst) { \n    int n = lst.size();\n    int m = 0;\n    for (int i = 0; i < n; i++) {\n        m += lst[i].count('(') - lst[i].count(')');\n        if (m < 0) {\n            return \"No\";\n        }\n    }\n    return \"Yes\";"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers and a positive integer k, return a sorted vector \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n// Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n// Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n// 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) { \n    std::vector<long> res;\n    std::sort(arr.begin(), arr.end());\n    for (long i = 0; i < k; i++) {\n        res.push_back(arr[i]);\n    }\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution((std::vector<long>({(long)5, (long)8, (long)7, (long)1})))\n// (12)\n// >>> solution((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3})))\n// (9)\n// >>> solution((std::vector<long>({(long)30, (long)13, (long)24, (long)321})))\n// (0)\nlong solution(std::vector<long> lst) { \n    long sum = 0;\n    for (int i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long> arr, long k) { \n    long sum = 0;\n    for (long i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned vector sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz((5))\n// (std::vector<long>({(long)1, (long)5}))\nstd::vector<long> get_odd_collatz(long n) { \n    std::vector<long> v;\n    v.push_back(n);\n    while (n != 1) {\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        v.push_back(n);\n    }\n    std::vector<long> odd;\n    for (long i : v) {\n        if (i % 2 != 0) {\n            odd.push_back(i);\n        }\n    }\n    std::sort(odd.begin(), odd.end());\n    return odd;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n// >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"))\n// (false)\nbool valid_date(std::string date) { \n    int month, day, year;\n    month = std::stoi(date.substr(0, 2));\n    day = std::stoi(date.substr(3, 2));\n    year = std::stoi(date.substr(6, 4));\n    if (month < 1 || month > 12 || day < 1 || day > 31 || year < 1) {\n        return false;\n    }\n    if (month == 2) {\n        if (day > 29) {\n            return false;\n        }\n    }\n    if (month % 2 == 0 && month != 2 && day > 30) {\n        return false;\n    }\n    return true;"], ["#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string> f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Given a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string txt) { \n    std::vector<std::string> v;\n    std::string s;\n    for (char c : txt) {\n        if (c == ' ' || c == ',') {\n            if (!s.empty()) {\n                v.push_back(s);\n                s.clear();\n            }\n        } else {\n            s += c;\n        }\n    }\n    if (!s.empty()) {\n        v.push_back(s);\n    }\n    return Union_std_vector_std_string__long(v);"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long> lst) { \n    long prev = lst[0];\n    long count = 1;\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i] == prev) {\n            count++;\n            if (count > 1) return false;\n        } else {\n            prev = lst[i];\n            count = 1;\n        }\n    }\n    return true;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection((std::make_tuple(1, 2)), (std::make_tuple(2, 3)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-1, 1)), (std::make_tuple(0, 4)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5)))\n// (\"YES\")\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) { \n    long start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    long intersectionLength = 0;\n    if (start <= end2 && end >= start2) {\n        intersectionLength = std::min(end, end2) - std::max(start, start2) + 1;\n    }\n    if (intersectionLength == 0) {\n        return \"NO\";\n    }\n    bool isPrime = true;\n    for (long i = 2; i < intersectionLength; i++) {\n        if (intersectionLength % i == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    if (isPrime) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0, (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\nstd::optional<long> prod_signs(std::vector<long> arr) { \n    long prod_sign = 1;\n    long sum_magnitude = 0;\n    for (auto num : arr) {\n        if (num == 0) {\n            return std::nullopt;\n        }\n        prod_sign *= (num > 0) ? 1 : -1;\n        sum_magnitude += std::abs(num);\n    }\n    return prod_sign * sum_magnitude;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered vectors of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered vector of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3))\n// (std::vector<long>({(long)1, (long)2, (long)1}))\n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1))\n// (std::vector<long>({(long)1}))\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) { \n    long N = grid.size();\n    long M = grid[0].size();\n    long min = 1e9;\n    long minx = 0;\n    long miny = 0;\n    for (long i = 0; i < N; i++) {\n        for (long j = 0; j < M; j++) {\n            if (grid[i][j] < min) {\n                min = grid[i][j];\n                minx = i;\n                miny = j;\n            }\n        }\n    }\n    std::vector<long> ans;\n    ans.push_back(min);\n    for (long i = 1; i < k; i++) {\n        long x = minx;\n        long y = miny;\n        if (x + 1 < N) {\n            if (grid[x + 1][y] < grid[x][y + 1] && grid[x + 1][y] < grid[x + 1][y + 1]) {\n                x++;\n            } else if (grid[x + 1][y] < grid[x][y + 1]) {\n                y++;\n            } else {\n                x++;\n            }\n        } else if (y + 1 < M) {\n            y++;\n        } else {\n            if (x + 1 < N) {\n                x++;\n            } else {\n                y++;\n            }\n        }\n        ans.push_back(grid[x][y]);\n    }\n    return ans;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))\nstd::vector<long> tri(long n) { \n    std::vector<long> v;\n    v.push_back(3);\n    v.push_back(1 + n / 2);\n    for (long i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            v.push_back(1 + i / 2);\n        } else {\n            v.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n        }\n    }\n    return v;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits((1))\n// (1)\n// >>> digits((4))\n// (0)\n// >>> digits((235))\n// (15)\nlong digits(long n) { \n    long product = 1; \n    while (n > 0) { \n        int digit = n % 10; \n        if (digit % 2 == 1) { \n            product *= digit; \n        } \n        n /= 10; \n    } \n    return product; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested((\"[[]]\"))\n// (true)\n// >>> is_nested((\"[]]]]]]][[[[[]\"))\n// (false)\n// >>> is_nested((\"[][]\"))\n// (false)\n// >>> is_nested((\"[]\"))\n// (false)\n// >>> is_nested((\"[[][]]\"))\n// (true)\n// >>> is_nested((\"[[]][[\"))\n// (true)\nbool is_nested(std::string string) { \n    int count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i] == '[') {\n            count++;\n        } else {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count > 0;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of numbers.\n// You need to return the sum of squared numbers in the given vector,\n// round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n// >>> lst((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})))\n// (14)\n// >>> lst((std::vector<float>({(float)1.0f, (float)4.0f, (float)9.0f})))\n// (98)\n// >>> lst((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\n// (84)\n// >>> lst((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f})))\n// (29)\n// >>> lst((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f})))\n// (6)\nlong sum_squares(std::vector<float> lst) { \n    long sum = 0;\n    for (auto& x : lst) {\n        sum += (long)std::ceil(x) * (long)std::ceil(x);\n    }\n    return sum;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter((\"apple pie\"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"apple pi e\"))\n// (true)\n// >>> check_if_last_char_is_a_letter((\"apple pi e \"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"\"))\n// (false)\nbool check_if_last_char_is_a_letter(std::string txt) { \n    // If the string is empty, return false\n    if (txt.length() == 0) {\n        return false;\n    }\n    // Get the last character of the string\n    char last_char = txt.back();\n    // Check if the last character is an alphabetical character\n    if (isalpha(last_char)) {\n        // Check if the last character is not part of a word\n        // by checking if the previous character is a space\n        if (txt[txt.length() - 2] == ' ') {\n            return true;\n        }\n    }\n    return false;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n// (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n// (-1)\nlong can_arrange(std::vector<long> arr) { \n    long n = arr.size();\n    long max = -1;\n    for (long i = 1; i < n; i++) {\n        if (arr[i] >= arr[i-1]) {\n            max = i;\n        }\n    }\n    return max;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a vector.\n// If there is no negative or positive integers, return them as None.\n// Examples:\n// >>> largest_smallest_integers((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1))\n// >>> largest_smallest_integers((std::vector<long>()))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\n// >>> largest_smallest_integers((std::vector<long>({(long)0})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) { \n    long largest_negative = std::numeric_limits<long>::min();\n    long smallest_positive = std::numeric_limits<long>::max();\n    bool has_negative = false;\n    bool has_positive = false;\n    for (auto x : lst) {\n        if (x < 0) {\n            largest_negative = std::max(largest_negative, x);\n            has_negative = true;\n        }\n        if (x > 0) {\n            smallest_positive = std::min(smallest_positive, x);\n            has_positive = true;\n        }\n    }\n    if (!has_negative) {\n        largest_negative = std::nullopt;\n    }\n    if (!has_positive) {\n        smallest_positive = std::nullopt;\n    }\n    return std::make_tuple(largest_negative, smallest_positive);"], ["#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float_std_string{\n    long f0;\n    float f1;\n    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n    ~Union_long_float_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n};\nunion Union_long_float_std_string_std_nullopt{\n    long f0;\n    float f1;\n    std::string f2;\n    std::nullopt f3;    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}\n    ~Union_long_float_std_string_std_nullopt() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }    bool operator==(std::nullopt f) {\n        return f3 == f ;\n    }\n};\n// Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return None if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5f)\n// 2.5f\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// std::nullopt\nUnion_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) { \n    if (a.f0 > b.f0) return a;\n    if (a.f1 > b.f1) return a;\n    if (a.f2 > b.f2) return a;\n    return std::nullopt;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even((4))\n// (false)\n// >>> is_equal_to_sum_even((6))\n// (false)\n// >>> is_equal_to_sum_even((8))\n// (true)\nbool is_equal_to_sum_even(long n) { \n    return (n % 2 == 0 && n >= 8);"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nlong special_factorial(long n) { \n    long result = 1;\n    for (long i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\" Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\")\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\" Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text) { \n    std::string result = text;\n    int count = 0;\n    for (int i = 0; i < result.size(); i++) {\n        if (result[i] == ' ') {\n            count++;\n            if (count > 2) {\n                result[i] = '-';\n                while (i < result.size() && result[i] == ' ') {\n                    i++;\n                }\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string file_name_check(std::string file_name) { \n    int count = 0;\n    std::string suffix = \"txt.exe.dll\";\n    for (int i = 0; i < file_name.size(); i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n    if (count > 3 || file_name.find('.') != std::string::npos || suffix.find(file_name.substr(file_name.find('.'))) == std::string::npos || file_name.find('.') == file_name.size() - 1 || file_name.find('.') == 0 || file_name.find('.') == file_name.size() - 2) {\n        return \"No\";\n    }\n    return \"Yes\";"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// \"\n// This function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// (long({(long)1, (long)2, (long)3}))\n// >>> lst\n// (long())\n// >>> lst\n// (long({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))\nlong sum_squares(std::vector<long> lst) { \n    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            lst[i] = lst[i] * lst[i];\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string words_in_sentence(std::string sentence) { \n    std::vector<std::string> words;\n    std::string word;\n    std::istringstream iss(sentence);\n    while (iss >> word) {\n        words.push_back(word);\n    }\n    std::string result;\n    for (const auto& w : words) {\n        if (is_prime(w.length())) {\n            result += w + \" \";\n        }\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify((\"1/5\"), (\"5/1\"))\n// (true)\n// >>> simplify((\"1/6\"), (\"2/1\"))\n// (false)\n// >>> simplify((\"7/10\"), (\"10/2\"))\n// (false)\nbool simplify(std::string x, std::string n) { \n    int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1, x.length()));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1, n.length()));\n    int x_numerator_numerator = x_numerator * n_numerator;\n    int x_numerator_denominator = x_denominator * n_denominator;\n    int gcd = __gcd(x_numerator_numerator, x_numerator_denominator);\n    x_numerator_numerator /= gcd;\n    x_numerator_denominator /= gcd;\n    return x_numerator_numerator % x_numerator_denominator == 0;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which sorts the given vector of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original vector.\n// For example:\n// >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> order_by_points(std::vector<long> nums) { \n    std::vector<long> res;\n    for (auto& x : nums) {\n        res.push_back(x);\n    }\n    std::sort(res.begin(), res.end(), [](long a, long b) {\n        return (std::abs(a) + std::abs(b)) < (std::abs(a) + std::abs(b));\n    });\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector of numbers as input and returns \n// the number of elements in the vector that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long> nums) { \n    long count = 0;\n    for (long num : nums) {\n        if (num > 10 && (num % 10) % 2 == 1 && (num / 10) % 10 % 2 == 1) {\n            count++;\n        }\n    }\n    return count;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive integer n. You have to create an integer vector a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long n) { \n    long a[n+1];\n    long c[3] = {0, 0, 0};\n    for (long i = 1; i <= n; i++) {\n        a[i] = i * i - i + 1;\n        c[a[i] % 3]++;\n    }\n    long ans = c[0] * (c[0] - 1) * (c[0] - 2) / 6 + c[1] * (c[1] - 1) * (c[1] - 2) / 6 + c[2] * (c[2] - 1) * (c[2] - 2) / 6;\n    return ans;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a tuple containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty tuple if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1, std::string planet2) { \n    std::vector<std::string> planets = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n    std::vector<std::string> result;\n    if (std::find(planets.begin(), planets.end(), planet1) == planets.end() || std::find(planets.begin(), planets.end(), planet2) == planets.end()) {\n        return result;\n    }\n    auto it1 = std::find(planets.begin(), planets.end(), planet1);\n    auto it2 = std::find(planets.begin(), planets.end(), planet2);\n    if (it1 < it2) {\n        for (auto it = it1 + 1; it < it2; ++it) {\n            result.push_back(*it);\n        }\n    } else {\n        for (auto it = it2 + 1; it < it1; ++it) {\n            result.push_back(*it);\n        }\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted vector with a sorted order,\n// The vector is always a vector of strings and never a vector of numbers,\n// and it may contain duplicates.\n// The order of the vector should be ascending by length of each word, and you\n// should return the vector sorted by that rule.\n// If two words have the same length, sort the vector alphabetically.\n// The function should return a vector of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) { \n    std::vector<std::string> result;\n    for (auto& str : lst) {\n        if (str.length() % 2 == 0) {\n            result.push_back(str);\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y((7), (34), (12))\n// (34)\n// >>> x_or_y((15), (8), (5))\n// (5)\nlong x_or_y(long n, long x, long y) { \n    // Check if n is a prime number\n    if (n <= 1) return y;\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i == 0) return y;\n    }\n    return x;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1, (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1, (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9, (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n// (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) { \n    long sum = 0;\n    for (auto& num : lst) {\n        if (num % 2 != 0 && num > 0) {\n            sum += num * num;\n        }\n    }\n    return 2 * sum;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0, (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4, (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4, (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) { \n    std::vector<long> result;\n    for (int i = 0; i < game.size(); i++) {\n        result.push_back(std::abs(game[i] - guess[i]));\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the name of a class (a string) and a vector of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the vector.\n// For example, if you are given \"Slices\" as the class and a vector of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) { \n    std::string strongest_extension = extensions[0];\n    int strongest_strength = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n        int strength = 0;\n        for (int j = 0; j < extensions[i].size(); j++) {\n            if (isupper(extensions[i][j])) {\n                strength += 1;\n            } else {\n                strength -= 1;\n            }\n        }\n        if (strength > strongest_strength) {\n            strongest_strength = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check((\"abcd\"), (\"abd\"))\n// (false)\n// >>> cycpattern_check((\"hello\"), (\"ell\"))\n// (true)\n// >>> cycpattern_check((\"whassup\"), (\"psus\"))\n// (false)\n// >>> cycpattern_check((\"abab\"), (\"baa\"))\n// (true)\n// >>> cycpattern_check((\"efef\"), (\"eeff\"))\n// (false)\n// >>> cycpattern_check((\"himenss\"), (\"simen\"))\n// (true)\nbool cycpattern_check(std::string a, std::string b) { \n    int n = a.size();\n    int m = b.size();\n    for (int i = 0; i < n; i++) {\n        if (a.substr(i, m) == b) {\n            return true;\n        }\n    }\n    return false;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count((-12))\n// (std::make_tuple(1, 1))\n// >>> even_odd_count((123))\n// (std::make_tuple(1, 2))\nstd::tuple<long, long> even_odd_count(long num) { \n    long even = 0, odd = 0;\n    while (num != 0) {\n        if (num % 10 % 2 == 0)\n            even++;\n        else\n            odd++;\n        num = num / 10;\n    }\n    return std::make_tuple(even, odd);"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman((19))\n// (\"xix\")\n// >>> int_to_mini_roman((152))\n// (\"clii\")\n// >>> int_to_mini_roman((426))\n// (\"cdxxvi\")\nstd::string int_to_mini_roman(long number) { \n    std::string result = \"\"; \n    while (number > 0) { \n        if (number >= 1000) { \n            result += \"m\"; \n            number -= 1000; \n        } \n        else if (number >= 900) { \n            result += \"cm\"; \n            number -= 900; \n        } \n        else if (number >= 500) { \n            result += \"d\"; \n            number -= 500; \n        } \n        else if (number >= 400) { \n            result += \"cd\"; \n            number -= 400; \n        } \n        else if (number >= 100) { \n            result += \"c\"; \n            number -= 100; \n        } \n        else if (number >= 90) { \n            result += \"xc\"; \n            number -= 90; \n        } \n        else if (number >= 50) { \n            result += \"l\"; \n            number -= 50; \n        } \n        else if (number >= 40) { \n            result += \"xl\"; \n            number -= 40; \n        } \n        else if (number >= 10) { \n            result += \"x\"; \n            number -= 10; \n        } \n        else if (number >= 9) { \n            result += \"ix\"; \n            number -= 9; \n        } \n        else if (number >= 5) { \n            result += \"v\"; \n            number -= 5; \n        } \n        else if (number >= 4) { \n            result += \"iv\"; \n            number -= 4; \n        } \n        else if (number >= 1) { \n            result += \"i\"; \n            number -= 1; \n        } \n    } \n    return result; "], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3), (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\nbool right_angle_triangle(long a, long b, long c) { \n    // Sort the sides\n    long sides[3] = {a, b, c};\n    std::sort(sides, sides + 3);\n    // Check if the sum of squares of two sides is equal to the square of the third side\n    return (sides[0]*sides[0] + sides[1]*sides[1] == sides[2]*sides[2]);"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings.\n// The vector contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string find_max(std::vector<std::string> words) { \n    int max = 0;\n    std::string res = \"\";\n    for (auto word : words) {\n        int count = 0;\n        std::set<char> s;\n        for (auto c : word) {\n            s.insert(c);\n            count++;\n        }\n        if (count > max) {\n            max = count;\n            res = word;\n        } else if (count == max) {\n            if (word < res) {\n                res = word;\n            }\n        }\n    }\n    return res;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a vector of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat((5), (6), (10))\n// (std::vector<long>({(long)11, (long)4}))\n// >>> eat((4), (8), (9))\n// (std::vector<long>({(long)12, (long)1}))\n// >>> eat((1), (10), (10))\n// (std::vector<long>({(long)11, (long)0}))\n// >>> eat((2), (11), (5))\n// (std::vector<long>({(long)7, (long)0}))\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nstd::vector<long> eat(long number, long need, long remaining) { \n    long total = number + remaining;\n    if (total >= need) {\n        return std::vector<long>({total, total - need});\n    } else {\n        return std::vector<long>({total, 0});\n    }"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n// the second vector is a vector of integers. Use the two given vectors to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to the length of operand vector minus one.\n// Operand is a vector of of non-negative integers.\n// Operator vector has at least one operator, and operand vector has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand) { \n    long result = operand[0];\n    for (int i = 0; i < op.size(); i++) {\n        if (op[i] == \"+\") {\n            result += operand[i + 1];\n        } else if (op[i] == \"-\") {\n            result -= operand[i + 1];\n        } else if (op[i] == \"*\") {\n            result *= operand[i + 1];\n        } else if (op[i] == \"//\") {\n            result /= operand[i + 1];\n        } else if (op[i] == \"**\") {\n            result = result * operand[i + 1];\n        }\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) { \n    std::string result = \"\";\n    bool isLetter = false;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            isLetter = true;\n            if (islower(s[i])) {\n                result += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    if (!isLetter) {\n        std::reverse(result.begin(), result.end());\n    }\n    return result;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5((\"Hello world\"))\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nstd::optional<std::string> string_to_md5(std::string text) { \n    unsigned char digest[16];\n    MD5_CTX md5;\n    MD5_Init(&md5);\n    MD5_Update(&md5, text.c_str(), text.size());\n    MD5_Final(digest, &md5);\n    std::string md5_string;\n    for (int i = 0; i < 16; i++) {\n        md5_string.push_back(\"0123456789abcdef\"[digest[i] >> 4]);\n        md5_string.push_back(\"0123456789abcdef\"[digest[i] & 0xf]);\n    }\n    return md5_string;"], ["#include<assert.h>\n#include<bits/stdc++.h>\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers((2), (8))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((8), (2))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((10), (14))\n// (std::vector<long>())\nstd::vector<long> generate_integers(long a, long b) { \n    std::vector<long> result;\n    for (long i = a; i <= b; i++) {\n        if (i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n    return result;"]]
