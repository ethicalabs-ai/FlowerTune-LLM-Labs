[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\ndef remove_Occ(string, char):\n    # remove first occurrence\n    string = string.replace(char, \"\", 1)\n    # remove last occurrence\n    string = string[::-1].replace(char, \"\", 1)[::-1]\n    return string"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    return sorted(matrix, key=sum)"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\ndef count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    return sorted_word_count"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\ndef find_Volume(base, height, length):\n    return (base * height * length) / 2"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\ndef split_lowerstring(string):\n    result = []\n    current = \"\"\n    for char in string:\n        if char.islower():\n            if current:\n                result.append(current)\n                current = \"\"\n            result.append(char)\n        else:\n            current += char\n    if current:\n        result.append(current)\n    return result"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\ndef text_lowercase_underscore(text):\n    return re.findall(r'[a-z]+_[a-z]+', text)"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\ndef square_perimeter(side):\n    return side*4"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\ndef remove_dirty_chars(str1, str2):\n    return ''.join([char for char in str1 if char not in str2])"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\ndef test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\ndef is_woodall(n):\n    if n < 0:\n        return False\n    while n > 0:\n        if n % 10 != 3 and n % 10 != 8:\n            return False\n        n //= 10\n    return True"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\ndef multiples_of_num(n, m):\n    return [n*i for i in range(1,m+1)]"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\ndef find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\ndef maximum_Sum(list_of_lists):\n    max_sum = 0\n    for list in list_of_lists:\n        max_sum += max(list)\n    return max_sum"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\ndef binary_to_decimal(binary):\n    decimal = 0\n    for i, digit in enumerate(reversed(binary)):\n        decimal += int(digit) * 2**i\n    return decimal"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\ndef find_Product(arr, n):\n    # create a set to store the unique elements\n    unique_elements = set(arr)\n    # initialize the product to 1\n    product = 1\n    # iterate over the unique elements\n    for element in unique_elements:\n        # multiply the product by the element\n        product *= element\n    # return the product\n    return product"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\ndef check_k_elements(tup_list, k):\n    for tup in tup_list:\n        if len(tup) != k:\n            return False\n    return True"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\ndef remove(lst):\n    return [s for s in lst if not s.isdigit()]"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\ndef binomial_Coeff(n, k):\n    # Base Case\n    if k==0 or k==n:\n        return 1\n    # Recursive Case\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\ndef get_Odd_Occurrence(arr):\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    # Iterate through the dictionary and return the first element with an odd count\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    return None"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i] == string[j-1]:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\ndef topKFrequent(nums, k):\n    from collections import Counter\n    from heapq import nlargest\n\n    # Count the frequency of each number\n    count = Counter()\n    for sublist in nums:\n        count.update(sublist)\n\n    # Get the k most common elements\n    return nlargest(k, count.keys(), key=count.get)"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\ndef max_Prime_Factors(n):\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n //= i\n    if n > 2:\n        max_prime = n\n    return max_prime"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\ndef decimal_To_Binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\ndef find_missing(arr, missing):\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] != 1:\n            return missing\n    return missing+1"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\ndef find_rect_num(n):\n    return n * (n + 1) // 2"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\ndef find_Nth_Digit(n1, n2, N):\n    \"\"\"\n    Find the Nth digit in the proper fraction of two given numbers\n    \"\"\"\n    # convert the numbers to string\n    n1_str = str(n1)\n    n2_str = str(n2)\n    # find the length of the string\n    len_n1 = len(n1_str)\n    len_n2 = len(n2_str)\n    # find the decimal point\n    decimal_point = n1_str.index('.')\n    # find the length of the decimal part\n    len_decimal = len(n1_str) - decimal_point - 1\n    # find the Nth digit\n    if N <= len_decimal:\n        return int(n1_str[decimal_point + N])\n    else:\n        return 0"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\ndef sort_mixed_list(mixed_list):\n    int_list = [x for x in mixed_list if isinstance(x, int)]\n    str_list = [x for x in mixed_list if isinstance(x, str)]\n    return sorted(int_list) + sorted(str_list)"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\ndef div_even_odd(lst):\n    even = 0\n    odd = 0\n    for i in lst:\n        if i%2==0:\n            even = i\n        else:\n            odd = i\n    return even/odd"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\ndef rearange_string(s):\n    s = list(s)\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n    return True"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\ndef freq_element(list_of_lists):\n    from collections import Counter\n    return dict(Counter([item for sublist in list_of_lists for item in sublist]))\n"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\ndef filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\ndef find_Sum(arr, target):\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    # Find the sum of elements that appear more than once\n    sum = 0\n    for key, value in count_dict.items():\n        if value > 1 and key == target:\n            sum += key\n\n    return sum\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\ndef text_match(text):\n    match = re.search(r'([a-z]+_[a-z]+)+', text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'No match found!'"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\ndef text_match_string(text):\n    if text.startswith('python'):\n        return 'Matched!'\n    else:\n        return 'Not matched!'"], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\ndef get_gcd(arr):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = gcd(result, arr[i])\n    return result"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\ndef test_distinct(arr):\n    return len(arr) == len(set(arr))"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\ndef compute_Last_Digit(a, b):\n    if a > b:\n        return 1\n    else:\n        return compute_Last_Digit(b%10, a%10) * (b//10) % 10"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\ndef odd_bit_set_number(num):\n    return num | 0b10101010101010101010101010101010"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef extract_elements(lst, index):\n    return [row[index] for row in lst]"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\ndef min_length_list(lst):\n    return min(lst, key=lambda x: len(x))"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\ndef check_equilateral(a, b, c):\n    if a==b and b==c:\n        return True\n    else:\n        return False"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\ndef parallelogram_area(base, height):\n    return base * height"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\ndef check_Equality(string):\n    if string[0] == string[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\""], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\ndef counting_sort(arr):\n    max_val = max(arr)\n    count = [0] * (max_val + 1)\n    for num in arr:\n        count[num] += 1\n    sorted_arr = []\n    for i in range(len(count)):\n        sorted_arr += [i] * count[i]\n    return sorted_arr"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\ndef tn_gp(a, r, n):\n    return a * r**(n-1)"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\ndef check(num):\n    rev = int(str(num)[::-1])\n    return num == 2*rev - 1"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\ndef find_Max_Num(digits, n):\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    # Join the digits to form the largest number\n    return int(''.join(map(str, digits)))"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\ndef opposite_Signs(a, b):\n    if (a < 0 and b > 0) or (a > 0 and b < 0):\n        return True\n    else:\n        return False"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\ndef is_octagonal(n):\n    # The formula for the nth octagonal number is n(3n-2)\n    return n*(3*n-2) == n\n"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\ndef max_len_sub(arr, k):\n    max_len = 0\n    for i in range(len(arr)):\n        curr_len = 1\n        for j in range(i+1, len(arr)):\n            if abs(arr[j] - arr[j-1]) <= k:\n                curr_len += 1\n            else:\n                break\n        max_len = max(max_len, curr_len)\n    return max_len"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i,n):\n            sum += int(s[j])\n            if sum == j - i + 1:\n                count += 1\n    return count"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\ndef smallest_num(lst):\n    return min(lst)"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\ndef max_difference(tuples):\n    max_diff = 0\n    for t in tuples:\n        diff = abs(t[0] - t[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\ndef sort_list(lst):\n    return sorted(lst, key=lambda x: x[1])"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\ndef recursive_list_sum(lst):\n    total = 0\n    for i in lst:\n        if type(i) is list:\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\ndef pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\ndef bell_number(n):\n    bell = [[0 for x in range(n+1)] for y in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\ndef is_Monotonic(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if arr[0] > arr[1]:\n        is_decreasing = True\n    else:\n        is_decreasing = False\n    for i in range(1, n-1):\n        if is_decreasing:\n            if arr[i] > arr[i+1]:\n                is_decreasing = False\n        else:\n            if arr[i] < arr[i+1]:\n                is_decreasing = True\n    return is_decreasing"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\ndef is_sublist(list1, list2):\n    for i in range(len(list1)-len(list2)+1):\n        if list1[i:i+len(list2)]==list2:\n            return True\n    return False"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\ndef get_equal(tuples, length):\n    for tup in tuples:\n        if len(tup) != length:\n            return 'Tuples do not have same length'\n    return 'All tuples have same length'"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\ndef comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(len(lst)-gap):\n            if lst[i] > lst[i+gap]:\n                lst[i], lst[i+gap] = lst[i+gap], lst[i]\n                sorted = False\n    return lst"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\ndef dif_Square(n):\n    if n < 0:\n        return False\n    for i in range(0, n+1):\n        if (i*i - (n-i)) == n:\n            return True\n    return False"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\ndef multiple_split(s, delimiters):\n    # Create a regex pattern from the list of delimiters\n    pattern = '|'.join(map(re.escape, delimiters))\n    # Split the string using the regex pattern\n    return re.split(pattern, s)"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\ndef is_samepatterns(patterns, seq):\n    if len(patterns) != len(seq):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] != seq[i]:\n            return False\n    return True"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\ndef find_tuples(tuples, k):\n    result = []\n    for t in tuples:\n        if all(x % k == 0 for x in t):\n            result.append(t)\n    return result"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(a, b):\n    # initialize the counter\n    count = 0\n    # iterate over the rows\n    for i in range(a):\n        # iterate over the columns\n        for j in range(b):\n            # check if the current square is a square\n            if (i+1)*(j+1) == (a-b+i)*(b-j):\n                count += 1\n    return count"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\ndef is_Diff (num):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum - odd_sum"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\ndef is_odd(word):\n    return len(word) % 2 != 0"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\ndef tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) / 6"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\ndef zip_tuples(tup1, tup2):\n    return list(zip(tup1, tup2))"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n    \"\"\"\n    return (4/3) * 3.141592653589793 * radius**3"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\ndef get_Char(string):\n    char = 0\n    for i in string:\n        char += ord(i)\n    return chr(char)"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\ndef sequence(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 8\n    elif n == 7:\n        return 13\n    elif n == 8:\n        return 21\n    elif n == 9:\n        return 34\n    elif n == 10:\n        return 55\n    elif n == 11:\n        return 89\n    elif n == 12:\n        return 144\n    elif n == 13:\n        return 233\n    elif n == 14:\n        return 377\n    elif n == 15:\n        return 610\n    elif n == 16:\n        return 987\n    elif n == 17:\n        return 1597\n    elif n == 18:\n        return 2584\n    elif n == 19:\n        return 4181\n    elif n == 20:\n        return 6765\n    elif n == 21:\n        return 10946\n    elif n == 22:\n        return 17711\n    elif n == 23:\n        return 28657\n    elif n == 24:\n        return 46368\n    elif n == 25:\n        return 75025\n    elif n == 26:\n        return 121393\n    elif n == 27:\n        return 196418\n    elif n == 28:\n        return 317811\n    elif n == 29:\n        return 514229\n    elif n == 30:\n        return 832040\n    elif n == 31:\n        return 1346269\n    elif n == 32:\n        return 2178309\n    elif n == 33:\n        return 3524578\n    elif n == 34:\n        return 5702887\n    elif n == 35:\n        return 9227465\n    elif n == 36:\n        return 14930352\n    elif n == 37:\n        return 24157817\n    elif n == 38:\n        return 39088169\n    elif n == 39:\n        return 63245986\n    elif n == 40:\n        return 102334155\n    elif n == 41:\n        return 165580141\n    elif n == 42:\n        return 267914296\n    elif n == 43:\n        return 433494437\n    elif n == 44:\n        return 701408733\n    elif n == 45:\n        return 1134903170\n    elif n == 46:\n        return 1836311903\n    elif n == 47:\n        return 2971215073\n    elif n == 48:\n        return 4807526976\n    elif n == 49:\n        return 7778742049\n    elif n == 50:\n        return 12586269025\n    elif n == 51:\n        return 20365011074\n    elif n == 52:\n        return 32951280099\n    elif n == 53:\n        return 53316291173\n    elif n == 54:\n        return 86267571272\n    elif n == 55:\n        return 139583862445\n    elif n == 56:\n        return 225851433717\n    elif n == 57:\n        return 365435296162\n    elif n == 58:\n        return 591286729879\n    elif n == 59:\n        return 956722026041\n    elif n == 60:\n        return 1548008755920\n    elif n == 61:\n        return 2504730780033\n    elif n == 62:\n        return 4052739537881\n    elif n == 63:\n        return 6557470319842\n    elif n == 64:\n        return 10610209857723\n    elif n == 65:\n        return 17167680177565\n    elif n == 66:\n        return 27777890035288\n    elif n == 67:\n        return 44945570212853\n    elif n == 68:\n        return 72723460248141\n    elif n == 69:\n        return 117669030460994\n    elif n == 70:\n        return 190392490709135\n    elif n == 71:\n        return 308061521170129\n    elif n == 72:\n        return 498454011879264\n    elif n == 73:\n        return 806515533049393\n    elif n == 74:\n        return 1304969544928657\n    elif n == 75:\n        return 2111485077978050\n    elif n == 76:\n        return 3416454622906707\n    elif n == 77:\n        return 5527939700884757\n    elif n == 78:\n        return 8944394323791464\n    elif n == 79:\n        return 14472334024676221\n    elif n == 80:\n        return 23416728348467685\n    elif n == 81:\n        return 37889062373143906\n    elif n == 82:\n        return 61305790721611591\n    elif n == 83:\n        return 99194853094755497\n    elif n == 84:\n        return 160500643816367088\n    elif n == 85:\n        return 259695496911122585\n    elif n == 86:\n        return 420196140727489673\n    elif n == 87:\n        return 679891637638612258\n    elif n == 88:\n        return 1100087778366101931\n    elif n == 89:\n        return 1779979416004714189\n    elif n == 90:\n        return 2880067194370816120\n    elif n == 91:\n        return 4660046610375530309\n    elif n == 92:\n        return 7540113804746346429\n    elif n == 93:\n        return 12200160415121876738\n    elif n == 94:\n        return 19740274219868223167\n    elif n == 95:\n        return 31940434634990099905\n    elif n == 96:\n        return 51680708854858323072\n    elif n == 97:\n        return 83621143489848422977\n    elif n == 98:\n        return 135301852344706746049\n    elif n == 99:\n        return 218922995834555169026\n    elif n == 100:\n        return 354224848179261915075\n    elif n == 101:\n        return 573147844013817084101\n    elif n == 102:\n        return 927372692193078999176\n    elif n == 103:\n        return 1500520536206896083277\n    elif n == 104:\n        return 2427893228399975082453\n    elif n == 105:\n        return 4107442586374067925699\n    elif n == 106:\n        return 6798916376386122581547\n    elif n == 107:\n        return 1134903176226357457619\n    elif n == 108:\n        return 1836311903\n    elif n == 109:\n        return 2971215073\n    elif n == 110:\n        return 4807526976\n    elif n == 111:\n        return 7778742049\n    elif n == 112:\n        return 12586269025\n    elif n == 113:\n        return 20365011074\n    elif n == 114:\n        return 32951280099\n    elif n == 115:\n        return 53316291173\n    elif n == 116:\n        return 86267571272\n    elif n == 117:\n        return 139583862445\n    elif n == 118:\n        return 225851433717\n    elif n == 119:\n        return 367267407599\n    elif n == 120:\n        return 591286729879\n    elif n == 121:\n        return 956722026041\n    elif n == 122:\n        return 1548008755920\n    elif n == 123:\n        return 2504730780033\n    elif n == 124:\n        return 4052739537881\n    elif n == 125:\n        return 6557470319842\n    elif n == 126:\n        return 10610209857723\n    elif n == 127:\n        return 17167680177565\n    elif n == 128:\n        return 27777890035288\n    elif n == 129:\n        return 44945570212853\n    elif n == 130:\n        return 72723460248141\n    elif n == 131:\n        return 1134903176226357457619\n    elif n == 132:\n        return "], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\ndef surfacearea_sphere(radius):\n    return 4 * 3.141592653589793 * radius ** 2"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\ndef centered_hexagonal_number(n):\n    return n * (2 * n - 1)"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\ndef freq_count(lst):\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\ndef closest_num(n):\n    return n-1"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\ndef find_longest_word_length(words):\n    max_length = 0\n    for word in words:\n        max_length = max(max_length, len(word))\n    return max_length"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\ndef find_substring(lst,sub):\n    for i in lst:\n        if sub in i:\n            return True\n    return False"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\ndef is_undulating(num):\n    \"\"\"\n    Check whether the given number is undulating or not.\n    \"\"\"\n    # check if the number is undulating\n    if num[0] == num[-1]:\n        return False\n    for i in range(1, len(num) - 1):\n        if num[i] == num[i - 1] or num[i] == num[i + 1]:\n            return False\n    return True"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\ndef power(a, b):\n    return a ** b"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\ndef index_minimum(tuples):\n    return min(tuples, key=lambda x: x[1])[0]"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\ndef Find_Min_Length(lst):\n    min_length = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            min_length = min(min_length, j-i)\n    return min_length"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\ndef divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\ndef frequency_lists(lists):\n    freq = {}\n    for lst in lists:\n        for item in lst:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\ndef multiply_num(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product / len(nums)"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\ndef decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\ndef next_smallest_palindrome(n):\n    n_str = str(n)\n    mid = len(n_str) // 2\n    left = n_str[:mid]\n    right = n_str[mid+1:][::-1]\n    if left == right:\n        return int(n_str + n_str[::-1])\n    elif left < right:\n        return int(left + n_str[mid] + left[::-1])\n    else:\n        return int(left + n_str[mid] + right)"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\ndef kth_element(arr, k, m):\n    return arr[m-1]"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\ndef eulerian_num(n, m):\n    if m == 0:\n        return 1\n    if m == 1:\n        return n\n    return eulerian_num(n - 1, m - 1) + (n - 1) * eulerian_num(n, m - 1)"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\ndef sort_sublists(list_of_lists):\n    return list(map(lambda x: sorted(x, key=lambda y: y), list_of_lists))"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\ndef count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\ndef add_lists(lst, tup):\n    return tup + lst"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\ndef count_Hexadecimal(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if hex(i)[2:].isnumeric():\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\ndef merge_sorted_list(*args):\n    from heapq import merge\n    return list(merge(*args))"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\ndef odd_Equivalent(s):\n    count = 0\n    for i in range(len(s)):\n        if int(s[i]) % 2 != 0:\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\ndef extract_missing(ranges, start, end):\n    missing = []\n    for i in range(len(ranges)):\n        if i == 0:\n            if start < ranges[i][0]:\n                missing.append((start, ranges[i][0]))\n        elif i == len(ranges) - 1:\n            if end > ranges[i][1]:\n                missing.append((ranges[i][1], end))\n        else:\n            if start > ranges[i][1]:\n                missing.append((start, ranges[i][1]))\n            if end < ranges[i][0]:\n                missing.append((ranges[i][0], end))\n    return missing"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\ndef common_in_nested_lists(list1, list2, list3):\n    return list(set(list1) & set(list2) & set(list3))"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\ndef perimeter(radius, height):\n    return 2 * (radius + height)"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\ndef assign_freq(tuples):\n    freq = {}\n    for t in tuples:\n        if t in freq:\n            freq[t] += 1\n        else:\n            freq[t] = 1\n    return [(t, freq[t]) for t in freq]"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\ndef check_empty_dicts(dict_list):\n    for dic in dict_list:\n        if dic:\n            return False\n    return True"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\ndef tuple_to_int(tup):\n    return int(''.join(map(str, tup)))"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\ndef list_to_float(lst):\n    \"\"\"\n    Convert all possible convertible elements in the list to float.\n    \"\"\"\n    return [(float(x[0]), float(x[1])) for x in lst]"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\ndef string_to_list(string):\n    return string.split()\n"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\ndef search(arr, x):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\ndef max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0]*lst[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\ndef check_triplet(arr, x, y, z):\n    n = len(arr)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == x + y + z:\n                    return True\n    return False"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\nA smart number is a number that is divisible by the sum of its digits."], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\ndef amicable_numbers_sum(n):\n    def sum_divisors(num):\n        return sum([i for i in range(1, num) if num % i == 0])\n\n    amicable_numbers = []\n    for i in range(1, n+1):\n        sum_i = sum_divisors(i)\n        if sum_i != i and sum_divisors(sum_i) == i:\n            amicable_numbers.append(i)\n            amicable_numbers.append(sum_i)\n\n    return sum(set(amicable_numbers)) # remove duplicates\n"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\ndef angle_complex(z):\n    return cmath.phase(z)"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\ndef find_length(s, n):\n    max_diff = 0\n    curr_diff = 0\n    for i in range(n):\n        if s[i] == '0':\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        max_diff = max(max_diff, curr_diff)\n    return max_diff"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\ndef sum_of_common_divisors(a, b):\n    # Find the divisors of a and b\n    divisors_a = set()\n    divisors_b = set()\n    for i in range(1, a+1):\n        if a % i == 0:\n            divisors_a.add(i)\n    for i in range(1, b+1):\n        if b % i == 0:\n            divisors_b.add(i)\n    # Find the common divisors\n    common_divisors = divisors_a.intersection(divisors_b)\n    # Return the sum of the common divisors\n    return sum(common_divisors)"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\ndef multiply_int(a, b):\n    if b == 0:\n        return 0\n    if b > 0:\n        return a + multiply_int(a, b-1)\n    if b < 0:\n        return -multiply_int(a, -b)"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\ndef long_words(n,words):\n    # create an empty list to store the long words\n    long_words = []\n    # iterate over the words\n    for word in words:\n        # check if the word is longer than n\n        if len(word) > n:\n            # add the word to the long_words list\n            long_words.append(word)\n    # return the long_words list\n    return long_words"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\ndef magic_square_test(magic_square):\n    # check if the magic square is a square\n    if len(magic_square) != len(magic_square[0]):\n        return False\n    # check if the magic square is a magic square\n    magic_sum = sum(magic_square[0])\n    for row in magic_square:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(len(magic_square)):\n        if sum(magic_square[row][col] for row in range(len(magic_square))) != magic_sum:\n            return False\n    diag1 = sum(magic_square[i][i] for i in range(len(magic_square)))\n    diag2 = sum(magic_square[i][len(magic_square)-1-i] for i in range(len(magic_square)))\n    if diag1 != magic_sum or diag2 != magic_sum:\n        return False\n    return True"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\ndef max_occurrences(lst):\n    # create a dictionary to store the frequency of each element\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    # find the item with maximum frequency\n    max_item = max(freq, key=freq.get)\n    max_freq = freq[max_item]\n    return max_item, max_freq"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\ndef reverse_vowels(string):\n    vowels = 'aeiouAEIOU'\n    string_list = list(string)\n    left, right = 0, len(string_list) - 1\n    while left < right:\n        if string_list[left] in vowels and string_list[right] in vowels:\n            string_list[left], string_list[right] = string_list[right], string_list[left]\n            left += 1\n            right -= 1\n        elif string_list[left] in vowels:\n            right -= 1\n        elif string_list[right] in vowels:\n            left += 1\n        else:\n            left += 1\n            right -= 1\n    return ''.join(string_list)"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\ndef tup_string(tup):\n    return ''.join(tup)"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\ndef sum_negativenum(numbers):\n    return sum(map(lambda x: x if x < 0 else 0, numbers))\n"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\ndef check_last(arr, p, op):\n    for _ in range(p):\n        if op == 1:\n            arr[-1] += 1\n        elif op == 2:\n            arr[-1] -= 1\n    return \"EVEN\" if arr[-1] % 2 == 0 else \"ODD\""], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\ndef hexagonal_num(n):\n    return n * (2 * n - 1)"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\ndef cal_electbill(kwh):\n    \"\"\"\n    Calculate electricity bill\n    \"\"\"\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount of electricity used in kWh\n    # kwh is the amount"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\ndef zero_count(arr):\n    count = 0\n    for i in arr:\n        if i == 0:\n            count += 1\n    return count/len(arr)"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n < 1:\n        return False\n    while n > 0:\n        if n % 2 == 1:\n            return False\n        n = n // 2\n    return True"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\ndef circle_circumference(radius):\n    pi = 3.141592653589793\n    return 2 * pi * radius"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\ndef extract_singly(tuples):\n    result = []\n    for t in tuples:\n        for i in t:\n            if t.count(i) == 1:\n                result.append(i)\n    return result"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\ndef pancake_sort(arr):\n    def flip(arr, k):\n        start = 0\n        while start < k:\n            arr[start], arr[k] = arr[k], arr[start]\n            start += 1\n            k -= 1\n\n    for curr_size in range(len(arr), 1, -1):\n        max_index = 0\n        for i in range(1, curr_size):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        if max_index != curr_size - 1:\n            flip(arr, max_index)\n            flip(arr, curr_size - 1)\n\n    return arr"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\ndef count_samepair(list1,list2,list3):\n    count=0\n    for i in list1:\n        for j in list2:\n            if i==j:\n                count+=1\n    for i in list1:\n        for j in list3:\n            if i==j:\n                count+=1\n    for i in list2:\n        for j in list3:\n            if i==j:\n                count+=1\n    return count"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\ndef find_lists(tup):\n    return len(tup)"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\ndef sum_Pairs(arr, k):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sum += abs(arr[i] - arr[j])\n    return sum"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\ndef max_Abs_Diff(arr, n):\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_diff = max(max_diff, abs(arr[i]-arr[j]))\n    return max_diff"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\ndef ascii_value_string(string):\n    return sum(ord(c) for c in string)"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\ndef max_path_sum(triangle, row, col):\n    if row == len(triangle) - 1:\n        return triangle[row][col]\n    left = max_path_sum(triangle, row + 1, col)\n    right = max_path_sum(triangle, row + 1, col + 1)\n    return triangle[row][col] + max(left, right)"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\ndef sum_digits_twoparts(n):\n    # base case\n    if n < 10:\n        return n\n\n    # initialize the maximum sum of digits\n    max_sum = 0\n\n    # iterate through all possible split points\n    for i in range(1, n):\n        # calculate the sum of digits of the two parts\n        sum1 = sum_digits_twoparts(i)\n        sum2 = sum_digits_twoparts(n - i)\n\n        # update the maximum sum of digits\n        max_sum = max(max_sum, sum1 + sum2)\n\n    return max_sum"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\ndef longest_subseq_with_diff_one(arr, k):\n    max_length = 0\n    for i in range(len(arr)):\n        curr_length = 1\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) == 1:\n                curr_length += 1\n                i = j\n        max_length = max(max_length, curr_length)\n    return max_length"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\ndef does_Contain_B(a, b, c):\n    if a == b:\n        return True\n    if a > b:\n        return False\n    return does_Contain_B(a+c, b+c, c)"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\ndef is_coprime(a, b):\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    return gcd(a, b) == 1"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\ndef merge_sort(arr):\n    if len(arr) == 1:\n        return arr\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    left = merge_sort(left)\n    right = merge_sort(right)\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    while left and right:\n        if left[0] < right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    result.extend(left)\n    result.extend(right)\n    return result"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\ndef parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    y = a * x**2 + b * x + c\n    return (x, y)"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\ndef extract_elements(two_dimensional_list, index):\n    extracted_elements = []\n    for row in two_dimensional_list:\n        extracted_elements.append(row[index])\n    return extracted_elements\n"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\ndef even_bit_toggle_number(num):\n    # Initialize the result\n    result = 0\n    # Iterate over the bits\n    for i in range(32):\n        # Check if the ith bit is even\n        if (num & (1 << i)) != 0:\n            # Toggle the ith bit\n            result |= (1 << i)\n    return result"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\ndef tuple_int_str(tup):\n    return tuple(int(i) for i in tup)"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\ndef reflect_rle(lst):\n    rle = []\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            count += 1\n        else:\n            rle.append([count, lst[i-1]])\n            count = 1\n    rle.append([count, lst[-1]])\n    return rle"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\ndef min_Ops(arr, k, n):\n    if k >= n:\n        return 0\n    if len(set(arr)) == 1:\n        return 0\n    if len(set(arr)) == 2:\n        if arr.count(arr[0]) == n:\n            return 0\n        elif arr.count(arr[0]) == n-1 and arr.count(arr[1]) == 1:\n            return 1\n        elif arr.count(arr[1]) == n-1 and arr.count(arr[0]) == 1:\n            return 1\n        else:\n            return 2\n    if len(set(arr)) == 3:\n        if arr.count(arr[0]) == n:\n            return 0\n        elif arr.count(arr[0]) == n-1 and arr.count(arr[1]) == 1 and arr.count(arr[2]) == 1:\n            return 1\n        elif arr.count(arr[0]) == n-1 and arr.count(arr[2]) == 1 and arr.count(arr[1]) == 1:\n            return 1\n        elif arr.count(arr[1]) == n-1 and arr.count(arr[0]) == 1 and arr.count(arr[2]) == 1:\n            return 1\n        elif arr.count(arr[1]) == n-1 and arr.count(arr[2]) == 1 and arr.count(arr[0]) == 1:\n            return 1\n        elif arr.count(arr[2]) == n-1 and arr.count(arr[0]) == 1 and arr.count(arr[1]) == 1:\n            return 1\n        elif arr.count(arr[2]) == n-1 and arr.count(arr[1]) == 1 and arr.count(arr[0]) == 1:\n            return 1\n        else:\n            return 3\n    return -1"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\ndef month_season(month,day):\n    if month in ['January','February','December']:\n        if day <= 15:\n            return 'winter'\n        elif day <= 31:\n            return 'winter'\n        else:\n            return 'spring'\n    elif month in ['March','April','May']:\n        if day <= 15:\n            return 'spring'\n        elif day <= 31:\n            return 'spring'\n        else:\n            return 'summer'\n    elif month in ['June','July','August']:\n        if day <= 15:\n            return 'summer'\n        elif day <= 31:\n            return 'summer'\n        else:\n            return 'fall'\n    elif month in ['September','October','November']:\n        if day <= 15:\n            return 'fall'\n        elif day <= 31:\n            return 'fall'\n        else:\n            return 'winter'\n    else:\n        return 'Invalid month'"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\ndef solution(a, b, n):\n    x = 0\n    y = 0\n    while x * a + y * b != n:\n        if x * a + y * b < n:\n            y += 1\n        else:\n            x += 1\n    return 'x = ' + str(x) + ', y = ' + str(y)"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\ndef remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\ndef sum_series(n):\n    total = 0\n    x = 0\n    while n - x >= 0:\n        total += n - x\n        x += 2\n    return total"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\ndef area_polygon(n,side):\n    return (n*side**2)/(4*math.tan(math.pi/n))"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\ndef areEquivalent(num1, num2):\n    def sumOfDivisors(num):\n        sum = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                sum += i\n        return sum\n\n    return sumOfDivisors(num1) == sumOfDivisors(num2)"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\ndef count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].lower() == chr(97 + count):\n            count += 1\n    return count"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\ndef find_even_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\ndef frequency(arr, num):\n    count = 0\n    for i in arr:\n        if i == num:\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\ndef get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_pell(n-1) + 2*get_pell(n-2) + 3*get_pell(n-3) + 4*get_pell(n-4) + 5*get_pell(n-5) + 6*get_pell(n-6) + 7*get_pell(n-7) + 8*get_pell(n-8) + 9*get_pell(n-9) + 10*get_pell(n-10) + 11*get_pell(n-11) + 12*get_pell(n-12)"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\ndef sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\ndef perimeter_pentagon(side):\n    return 5*side"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\ndef count_occurance(string):\n    count = 0\n    for char in string:\n        if char == 'std':\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\ndef remove_splchar(string):\n    return ''.join(e for e in string if e.isalnum())"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\ndef group_keyvalue(seq):\n    d = {}\n    for k, v in seq:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\ndef is_valid_parenthese(s):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in s:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\ndef perimeter_triangle(a, b, c):\n    return a + b + c"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\ndef answer(lcm_min, lcm_max):\n    # initialize the answer\n    answer = []\n    # iterate over the range of numbers\n    for i in range(1, lcm_max+1):\n        for j in range(i+1, lcm_max+1):\n            # check if the lcm of the two numbers is within the given range\n            if lcm(i, j) >= lcm_min and lcm(i, j) <= lcm_max:\n                answer.append((i, j))\n    return answer\n\ndef lcm(a, b):\n    return abs(a*b) // gcd(a, b)\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\ndef search_string(string, string_literals):\n    for literal in string_literals:\n        if literal in string:\n            return 'Matched!'\n    return 'Not Matched!'\n"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\nA keith number is a number that is the sum of its digits raised to the power of the number of digits.\nFor example, 14 is a keith number because 1^2 + 4^2 = 17, and 17 is the number of digits in 14."], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\ndef distance_lat_long(lat1, long1, lat2, long2):\n    # Radius of the Earth in km\n    R = 6371.0\n\n    # Convert latitude and longitude from degrees to radians\n    lat1 = math.radians(lat1)\n    long1 = math.radians(long1)\n    lat2 = math.radians(lat2)\n    long2 = math.radians(long2)\n\n    # Difference in latitude and longitude\n    dlat = lat2 - lat1\n    dlong = long2 - long1\n\n    # Haversine formula\n    a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlong / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    # Distance in km\n    distance = R * c\n\n    return distance"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\ndef common_prefix(strs, k):\n    if not strs:\n        return \"\"\n    prefix = strs[0]\n    for s in strs:\n        while s[:len(prefix)] != prefix and len(prefix) > 0:\n            prefix = prefix[0:len(prefix)-1]\n        if len(prefix) == 0:\n            return \"\"\n    return prefix"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\ndef find_character(string):\n    upper = []\n    lower = []\n    special = []\n    numeric = []\n    for char in string:\n        if char.isupper():\n            upper.append(char)\n        elif char.islower():\n            lower.append(char)\n        elif char.isdigit():\n            numeric.append(char)\n        elif char in string.punctuation:\n            special.append(char)\n    return upper, lower, special, numeric"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\ndef count_pairs(arr, k, x):\n    count = 0\n    seen = set()\n    for i in arr:\n        if x - i in seen:\n            count += 1\n        seen.add(i)\n    return count"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\ndef greater_specificnum(lst, num):\n    return [x for x in lst if x > num]"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\ndef parabola_focus(a, b, c):\n    x = -b/(2*a)\n    y = (4*a*c-b**2)/(4*a)\n    return (x, y)"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\ndef check_literals(string, literals):\n    for literal in literals:\n        if re.search(literal, string):\n            return 'Matched!'\n    return 'Not Matched!'\n"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\ndef longest_common_subsequence(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    # Create a table to store results of subproblems\n    L = [[None]*(n+1) for i in range(m+1)]\n    # Fill the table in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                L[i][j] = L[i-1][j-1]+1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\ndef prod_Square(n):\n    \"\"\"\n    Function to check whether the given number can be represented by product of two squares or not.\n    \"\"\"\n    for i in range(1, int(n**0.5) + 1):\n        if n % (i*i) == 0:\n            return True\n    return False\n"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\ndef first_Missing_Positive(nums, n):\n    # Create a set of all positive numbers\n    positive_nums = set([num for num in nums if num > 0])\n    \n    # Iterate through the numbers from 1 to n\n    for i in range(1, n+1):\n        # If the number is not in the set, return it\n        if i not in positive_nums:\n            return i\n    # If all numbers are present, return n+1\n    return n+1"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\ndef count_Intgral_Points(x1, y1, x2, y2):\n    return abs(x2-x1+1)*abs(y2-y1+1)"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\ndef check_monthnumber(monthname):\n    monthdays = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    return monthdays.get(monthname, 0) == 30"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\ndef check_String(string):\n    has_letter = False\n    has_number = False\n    for char in string:\n        if char.isalpha():\n            has_letter = True\n        if char.isdigit():\n            has_number = True\n    return has_letter and has_number"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\ndef remove_tuple(tup):\n    return tuple(set(tup))"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\ndef octal_To_Decimal(octal):\n    decimal = 0\n    octal = str(octal)\n    length = len(octal)\n    for i in range(length):\n        decimal += int(octal[i]) * pow(8, length - i - 1)\n    return decimal"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\ndef first(arr, x, n):\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\ndef remove_tuples(tuples, k):\n    return [t for t in tuples if len(t) != k]"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\ndef find_exponentio(tuple1, tuple2):\n    return tuple(map(lambda x, y: x ** y, tuple1, tuple2))"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\ndef largest_triangle(a,b):\n    #largest triangle inscribed in an ellipse is a right triangle\n    #with the hypotenuse as the major axis of the ellipse\n    #and the other two sides as the minor axis of the ellipse\n    #the area of the triangle is (1/2)*base*height\n    #base = 2*b\n    #height = sqrt(a^2 - b^2)\n    #area = (1/2)*2*b*sqrt(a^2 - b^2)\n    #area = b*sqrt(a^2 - b^2)\n    #return area\n    return b*math.sqrt(a**2 - b**2)"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\ndef position_max(lst):\n    max_val = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_val]"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\ndef chkList(lst):\n    return lst.count(lst[0]) == len(lst)"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\ndef remove_even(string):\n    return string[::2]"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\ndef hamming_Distance(x, y):\n    # Convert the integers to binary\n    x_bin = bin(x)[2:]\n    y_bin = bin(y)[2:]\n    # Pad the shorter binary string with leading zeros\n    max_len = max(len(x_bin), len(y_bin))\n    x_bin = x_bin.zfill(max_len)\n    y_bin = y_bin.zfill(max_len)\n    # Count the number of positions where the bits are different\n    return sum(bit1 != bit2 for bit1, bit2 in zip(x_bin, y_bin))"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\ndef count(string, char):\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\ndef inversion_elements(tup):\n    inversions = []\n    for i in range(len(tup)):\n        for j in range(i+1, len(tup)):\n            if tup[i] > tup[j]:\n                inversions.append(tup[i])\n                inversions.append(tup[j])\n    return tuple(inversions)"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\ndef concatenate_elements(tuples):\n    result = []\n    for i in range(len(tuples) - 1):\n        result.append(tuples[i] + tuples[i + 1])\n    return result"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\ndef find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if s[i-1] == s[j-1] and i != j:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    return dp[n][n]"], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\ndef is_decimal(s):\n    return re.match(r'^\\d+\\.\\d{2}$', s) is not None"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, item):\n    # delete the smallest element\n    heap.remove(min(heap))\n    # insert the new item\n    heap.append(item)\n    # heapify\n    heap.sort()\n    return heap"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\ndef is_allowed_specific_char(string):\n    regex = r'^[a-z0-9]+$'\n    return bool(re.match(regex, string))"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\ndef count_Num(n):\n    count = 0\n    for i in range(1, n+1):\n        if (i & (i-1)) == 0:\n            count += 1\n    return count"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\ndef concatenate_strings(tuple1, tuple2):\n    return tuple(a + ' ' + b for a, b in zip(tuple1, tuple2))\n"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\ndef degree_radian(radian):\n    return radian * 180 / 3.141592653589793"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\ndef decode_list(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend([item[1]] * item[0])\n        else:\n            result.append(item)\n    return result"], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\ndef check_subset_list(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    for i in range(len(list1)):\n        if not set(list1[i]).issubset(set(list2[i])):\n            return False\n    return True"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\ndef first_repeated_char(string):\n    seen = set()\n    for char in string:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\ndef min_Operations(x, y):\n    if x == y:\n        return 0\n    if x > y:\n        x, y = y, x\n    return 1 + min_Operations(x*2, y-1) or min_Operations(x+1, y-1)"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\ndef extract_min_max(tup, k):\n    # Sort the tuple\n    tup = sorted(tup)\n    # Extract the first k elements\n    min_elements = tup[:k]\n    # Extract the last k elements\n    max_elements = tup[-k:]\n    # Return the min and max elements\n    return min_elements, max_elements"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\ndef replace_max_specialchar(s, n):\n    #split the string into words\n    words = s.split()\n    #replace the first n special characters in each word\n    for i in range(len(words)):\n        special_chars = [char for char in words[i] if char in [' ', ',', '.']]\n        for j in range(min(n, len(special_chars))):\n            words[i] = words[i].replace(special_chars[j], ':')\n    #join the words back into a string\n    return ' '.join(words)"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\ndef first_even(lst):\n    for num in lst:\n        if num % 2 == 0:\n            return num\n    return None"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\ndef check_type(tup):\n    # check if all elements in tuple have same data type\n    return len(set(map(type, tup))) == 1"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\ndef is_majority(arr, k, x):\n    \"\"\"\n    Check for majority element in the given sorted array.\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count > k:\n            return True\n    return False"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\ndef count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\ndef find_Min(arr,low,high):\n    if low == high:\n        return arr[low]\n    if low + 1 == high:\n        return min(arr[low],arr[high])\n    mid = (low + high) // 2\n    if arr[mid] > arr[high]:\n        return find_Min(arr,mid,high)\n    return find_Min(arr,low,mid)"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\ndef odd_values_string(string):\n    return string[::2]\n"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\ndef min_of_three(a,b,c):\n    return min(a,b,c)"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\ndef all_Bits_Set_In_The_Given_Range(n, l, r):\n    return (n & ((1 << r) - 1) ^ ((1 << l) - 1)) == 0"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\ndef re_arrange_array(arr, n):\n    # Initialize two pointers\n    left = 0\n    right = n - 1\n\n    # Traverse the array\n    while left < right:\n        # Move left pointer until we find a positive number\n        while arr[left] < 0 and left < right:\n            left += 1\n        # Move right pointer until we find a negative number\n        while arr[right] >= 0 and left < right:\n            right -= 1\n        # Swap the elements\n        arr[left], arr[right] = arr[right], arr[left]\n\n    return arr"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\ndef replace_blank(string, char):\n    return string.replace(' ',char)"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\ndef max_sum(triangle, n):\n    if n == 1:\n        return triangle[0][0]\n    else:\n        return triangle[n-1][n-1] + max(max_sum(triangle, n-1)[n-1], max_sum(triangle, n-1)[n-2])"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\ndef larg_nnum(dataset, n):\n    return sorted(dataset, reverse=True)[:n]"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\ndef lateralsuface_cylinder(radius, height):\n    return 2 * 3.141592653589793 * radius * height"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\ndef volume_cube(side):\n    return side**3"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\ndef even_bit_set_number(n):\n    # Create a mask to set even bits\n    mask = 0b1010101010101010101010101010101010101010101010101010101010101010\n    # Use bitwise OR to set even bits\n    return n | mask"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(n, k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return 1\n    if k == 2:\n        return 3\n    if k == 3:\n        return 6\n    if k == 4:\n        return 10\n    if k == 5:\n        return 15\n    if k == 6:\n        return 21\n    if k == 7:\n        return 28\n    if k == 8:\n        return 36\n    if k == 9:\n        return 45\n    if k == 10:\n        return 55\n    if k == 11:\n        return 66\n    if k == 12:\n        return 78\n    if k == 13:\n        return 91\n    if k == 14:\n        return 105\n    if k == 15:\n        return 120\n    if k == 16:\n        return 136\n    if k == 17:\n        return 153\n    if k == 18:\n        return 171\n    if k == 19:\n        return 190\n    if k == 20:\n        return 210\n    if k == 21:\n        return 231\n    if k == 22:\n        return 253\n    if k == 23:\n        return 276\n    if k == 24:\n        return 300\n    if k == 25:\n        return 325\n    if k == 26:\n        return 351\n    if k == 27:\n        return 378\n    if k == 28:\n        return 406\n    if k == 29:\n        return 435\n    if k == 30:\n        return 465\n    if k == 31:\n        return 496\n    if k == 32:\n        return 529\n    if k == 33:\n        return 563\n    if k == 34:\n        return 598\n    if k == 35:\n        return 633\n    if k == 36:\n        return 669\n    if k == 37:\n        return 706\n    if k == 38:\n        return 743\n    if k == 39:\n        return 781\n    if k == 40:\n        return 820\n    if k == 41:\n        return 859\n    if k == 42:\n        return 899\n    if k == 43:\n        return 940\n    if k == 44:\n        return 983\n    if k == 45:\n        return 1026\n    if k == 46:\n        return 1071\n    if k == 47:\n        return 1117\n    if k == 48:\n        return 1164\n    if k == 49:\n        return 1211\n    if k == 50:\n        return 1260\n    if k == 51:\n        return 1311\n    if k == 52:\n        return 1362\n    if k == 53:\n        return 1413\n    if k == 54:\n        return 1466\n    if k == 55:\n        return 1521\n    if k == 56:\n        return 1576\n    if k == 57:\n        return 1633\n    if k == 58:\n        return 1690\n    if k == 59:\n        return 1749\n    if k == 60:\n        return 1808\n    if k == 61:\n        return 1871\n    if k == 62:\n        return 1936\n    if k == 63:\n        return 2001\n    if k == 64:\n        return 2068\n    if k == 65:\n        return 2135\n    if k == 66:\n        return 2204\n    if k == 67:\n        return 2275\n    if k == 68:\n        return 2346\n    if k == 69:\n        return 2419\n    if k == 70:\n        return 2492\n    if k == 71:\n        return 2567\n    if k == 72:\n        return 2642\n    if k == 73:\n        return 2717\n    if k == 74:\n        return 2792\n    if k == 75:\n        return 2867\n    if k == 76:\n        return 2942\n    if k == 77:\n        return 3017\n    if k == 78:\n        return 3092\n    if k == 79:\n        return 3167\n    if k == 80:\n        return 3242\n    if k == 81:\n        return 3317\n    if k == 82:\n        return 3392\n    if k == 83:\n        return 3467\n    if k == 84:\n        return 3542\n    if k == 85:\n        return 3617\n    if k == 86:\n        return 3692\n    if k == 87:\n        return 3767\n    if k == 88:\n        return 3842\n    if k == 89:\n        return 3917\n    if k == 90:\n        return 3992\n    if k == 91:\n        return 4067\n    if k == 92:\n        return 4142\n    if k == 93:\n        return 4217\n    if k == 94:\n        return 4292\n    if k == 95:\n        return 4367\n    if k == 96:\n        return 4442\n    if k == 97:\n        return 4517\n    if k == 98:\n        return 4592\n    if k == 99:\n        return 4667\n    if k == 100:\n        return 4742\n    if k == 101:\n        return 4817\n    if k == 102:\n        return 4892\n    if k == 103:\n        return 4967\n    if k == 104:\n        return 5042\n    if k == 105:\n        return 5117\n    if k == 106:\n        return 5192\n    if k == 107:\n        return 5267\n    if k == 108:\n        return 5342\n    if k == 109:\n        return 5417\n    if k == 110:\n        return 5492\n    if k == 111:\n        return 5567\n    if k == 112:\n        return 5642\n    if k == 113:\n        return 5717\n    if k == 114:\n        return 5792\n    if k == 115:\n        return 5867\n    if k == 116:\n        return 5942\n    if k == 117:\n        return 6017\n    if k == 118:\n        return 6092\n    if k == 119:\n        return 6167\n    if k == 120:\n        return 6242\n    if k == 121:\n        return 6317\n    if k == 122:\n        return 6392\n    if k == 123:\n        return 6467\n    if k == 124:\n        return 6542\n    if k == 125:\n        return 6617\n    if k == 126:\n        return 6692\n    if k == 127:\n        return 6767\n    if k == 128:\n        return 6842\n    if k == 129:\n        return 6917\n    if k == 130:\n        return 6992\n    if k == 131:\n        return 7067\n    if k == 132:\n        return 7142\n    if k == 133:\n        return 7217\n    if k == 134:\n        return 7292\n    if k == 135:\n        return 7367\n    if k == 136:\n        return 7442\n    if k == 137:\n        return 7517\n    if k == 138:\n        return 7592\n    if k == 139:\n        return 7667\n    if k == 140:\n        return 7742\n    if k == 141:\n        return 7817\n    if k == 142:\n        return 7892\n    if k == 143:\n        return 7967\n    if k == 144:\n        return 8042\n    if k == 145:\n        return 8117\n    if k == 146:\n        return 8192\n    if k == 147:\n        return 8267\n    if k == 148:\n        return 8342\n    if k == 149:\n        return 8417\n    if k == 150:\n        return 8492\n    if k == 151:\n        return 8567\n    if k == 152:\n        return 8642\n    if k == 153:\n        return 8717\n    if k == 154:\n        return 8792\n    if k == 155:\n        return 8867\n    if k == 156:\n        return 8942\n    if k"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\ndef check_occurences(tuples):\n    dict = {}\n    for tup in tuples:\n        if tup in dict:\n            dict[tup] += 1\n        else:\n            dict[tup] = 1\n    return dict"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\ndef number_of_substrings(s):\n    n = len(s)\n    return n*(n+1)//2"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    if n == 1:\n        return 1\n    if n == 2:\n        return m\n    total = 0\n    for i in range(1, m+1):\n        total += get_total_number_of_sequences(n-1, i*2)\n    return total\n"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\ndef replace_list(lst, new_lst):\n    lst[-1] = new_lst\n    return lst"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\ndef array_3d(m, n, p):\n    return [[['*' for _ in range(p)] for _ in range(n)] for _ in range(m)]"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\ndef count_charac(string):\n    return len(string)"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\ndef sort_on_occurence(lst):\n    # create a dictionary to store the count of each first element\n    count_dict = {}\n    for item in lst:\n        if item[0] in count_dict:\n            count_dict[item[0]] += 1\n        else:\n            count_dict[item[0]] = 1\n\n    # sort the list based on the count of each first element\n    lst.sort(key=lambda x: count_dict[x[0]], reverse=True)\n\n    # create a new list to store the sorted tuples\n    sorted_lst = []\n    for item in lst:\n        sorted_lst.append(item)\n        sorted_lst.append(count_dict[item[0]])\n\n    return sorted_lst"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\ndef next_Perfect_Square(num):\n    # Find the square root of the given number\n    root = int(num**0.5)\n    # Find the next perfect square\n    next_square = (root + 1) ** 2\n    return next_square\n"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\ndef max_sum(arr, n):\n    max_sum = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            max_sum = max(max_sum, arr[i] + arr[j])\n    return max_sum"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\ndef babylonian_squareroot(n):\n    x = n\n    while True:\n        x1 = (x + n/x) / 2\n        if abs(x1 - x) < 0.00001:\n            return x1\n        x = x1"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\ndef lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]"], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\ndef harmonic_sum(n):\n    if n == 1:\n        return 1\n    return 1/n + harmonic_sum(n-1)"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\ndef count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\ndef insert_element(lst, element):\n    return [element] + lst"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\ndef convert(c):\n    r = abs(c)\n    theta = cmath.phase(c)\n    return (r, theta)"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\ndef count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\ndef words_ae(string):\n    words = string.split()\n    return [word for word in words if word[0] in ('a', 'e')]"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\ndef combinations_colors(colors, n):\n    if n==0:\n        return [()]\n    if n==1:\n        return [(color,) for color in colors]\n    result = []\n    for i in range(len(colors)):\n        for j in combinations_colors(colors, n-1):\n            result.append((colors[i],) + j)\n    return result"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\ndef count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n, i):\n                primes[j] = False\n    return sum(primes)"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\ndef swap_numbers(a, b):\n    return b, a"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\ndef count_odd(lst):\n    return len(list(filter(lambda x: x%2!=0, lst)))"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\ndef maximize_elements(tuple1, tuple2):\n    # Create a list of tuples\n    list1 = list(tuple1)\n    list2 = list(tuple2)\n    # Sort the lists\n    list1.sort()\n    list2.sort()\n    # Create a new list to store the maximized tuples\n    maximized_list = []\n    # Iterate over the lists\n    for i in range(len(list1)):\n        # Append the maximum of the two elements to the new list\n        maximized_list.append((max(list1[i][0], list2[i][0]), max(list1[i][1], list2[i][1])))\n    # Return the maximized list as a tuple\n    return tuple(maximized_list)"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\ndef newman_prime(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 7\n    else:\n        return newman_prime(n-1) + 2*newman_prime(n-2) + 3*newman_prime(n-3)"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\ndef division_elements(tup1, tup2):\n    return tuple(map(lambda x, y: x / y, tup1, tup2))"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\ndef split_two_parts(lst, n):\n    return lst[:n], lst[n:]"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\ndef merge_dict(dict1, dict2):\n    \"\"\"\n    Merge two dictionaries\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    return merged_dict"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\ndef dog_age(age):\n    return age*7"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\ndef list_split(lst, n):\n    return [lst[i::n] for i in range(n)]"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\ndef lateralsurface_cube(side):\n    return 4 * side * side"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\ndef find_star_num(n):\n    star_num = 0\n    for i in range(1, n+1):\n        star_num += (2*i - 1) * (2*i)\n    return star_num"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\ndef ascii_value(char):\n    return ord(char)"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\ndef sum_even_and_even_index(arr, n):\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\ndef rear_extract(records):\n    return [record[2] for record in records[::-1]]"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\ndef substract_elements(tup1, tup2):\n    return tuple(a - b for a, b in zip(tup1, tup2))"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\ndef even_binomial_Coeff_Sum(n):\n    # Initialize the sum\n    sum = 0\n    # Loop through the even indices\n    for i in range(0, n+1, 2):\n        # Calculate the binomial coefficient\n        binomial_Coeff = 1\n        for j in range(1, i+1):\n            binomial_Coeff = binomial_Coeff * (n-j+1) // j\n        # Add the binomial coefficient to the sum\n        sum += binomial_Coeff\n    return sum"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\ndef get_Position(arr, x, k):\n    # Find the last removed element\n    last_removed = arr[-1]\n    # Remove the last element\n    arr.pop()\n    # Return the position of the last removed element\n    return arr.index(last_removed)"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder.\n    \"\"\"\n    return 3.141592653589793238 * radius**2 * height\n"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\ndef dict_filter(dictionary, min_value):\n    return {key: value for key, value in dictionary.items() if value >= min_value}"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\ndef count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            count += count_first_elements(i)\n        else:\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\ndef is_num_decagonal(n):\n    \"\"\"\n    Returns True if the given number is a decagonal number, False otherwise.\n    \"\"\"\n    if n < 1:\n        return False\n    k = 1\n    while True:\n        decagonal = 5 * k * k - 4 * k\n        if decagonal == n:\n            return True\n        elif decagonal > n:\n            return False\n        k += 1\n"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\ndef sequential_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return (True, i)\n    return (False, -1)"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\ndef all_unique(lst):\n    \"\"\"\n    Check if all elements in a list are unique\n    \"\"\"\n    return len(lst) == len(set(lst))"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\ndef sub_list(list1, list2):\n    return list(map(lambda x,y: x-y, list1, list2))"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\ndef validate(num):\n    freq = [0] * 10\n    while num > 0:\n        freq[num % 10] += 1\n        num //= 10\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\ndef check_element(lst, str):\n    for i in lst:\n        if i != str:\n            return False\n    return True"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_two_three(text):\n    if len(text) < 3:\n        return 'Not matched!'\n    if text[0] == 'a' and text[1] == 'b' and text[2] == 'b':\n        return 'Matched!'\n    elif text[0] == 'a' and text[1] == 'b' and text[2] == 'b' and text[3] == 'b':\n        return 'Matched!'\n    elif text[0] == 'a' and text[1] == 'b' and text[2] == 'b' and text[3] == 'b' and text[4] == 'b':\n        return 'Matched!'\n    else:\n        return 'Not matched!'"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\ndef max_sub_array_sum_repeated(arr, k, n):\n    max_sum = 0\n    curr_sum = 0\n    for i in range(k*n):\n        curr_sum += arr[i%n]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**2\n    return sum"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\ndef modular_inverse(arr, p, m):\n    count = 0\n    for i in arr:\n        if (i * i) % p == 1:\n            count += 1\n    return count"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\ndef odd_Days(year):\n    # Number of days in a year\n    days = 365\n    # Number of leap years in a year\n    leap_years = year // 4\n    # Number of odd days\n    odd_days = (days + leap_years) % 7\n    return odd_days"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length(lst):\n    max_len = 0\n    max_list = []\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_list = l\n    return max_len, max_list"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\ndef count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * k\n    for i in range(3, n + 1):\n        dp[i] = k * (dp[i - 1] + dp[i - 2])\n    return dp[n]"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\ndef find(a, b):\n    return a // b"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\ndef otherside_rightangle(otherside1,otherside2):\n    return (otherside1**2 + otherside2**2)**0.5"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\ndef max_val(lst):\n    max_val = lst[0]\n    for i in lst:\n        if type(i) == int or type(i) == float:\n            if i > max_val:\n                max_val = i\n    return max_val"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\ndef sum_div(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\ndef get_Inv_Count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\ndef flatten_list(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\ndef intersection_nested_lists(list1, list2):\n    result = []\n    for sublist in list2:\n        temp = []\n        for item in sublist:\n            if item in list1:\n                temp.append(item)\n        if temp:\n            result.append(temp)\n    return result"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\ndef max_aggregate(lst):\n    max_aggregate = 0\n    max_aggregate_name = ''\n    for name, score in lst:\n        if score > max_aggregate:\n            max_aggregate = score\n            max_aggregate_name = name\n    return max_aggregate_name, max_aggregate"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\ndef count_binary_seq(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return 2 * count_binary_seq(n-1) + count_binary_seq(n-2)"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\ndef dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\ndef set_Bit_Number(n):\n    m = 1\n    while m <= n:\n        if n & m == m:\n            return m\n        m = m << 1\n    return 0"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\ndef solve(arr, n):\n    count1 = 0\n    count2 = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count1 += 1\n            if arr[i] < arr[j]:\n                count2 += 1\n    return count1 == count2"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\ndef find_Element(arr, rotations, index, k):\n    # Number of rotations\n    rotations = rotations % len(arr)\n    # New index after rotations\n    new_index = (index + rotations) % len(arr)\n    return arr[new_index]"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\ndef start_withp(words):\n    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return tuple(result)"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, k, i):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    max_sum = arr[0]\n    for j in range(1, n):\n        dp[j] = arr[j]\n        for x in range(j):\n            if arr[x] < arr[j]:\n                dp[j] = max(dp[j], dp[x] + arr[j])\n        max_sum = max(max_sum, dp[j])\n    return max_sum\n"], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\ndef colon_tuplex(tupl, index, value):\n    return tupl[:index] + (value,) + tupl[index+1:]"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef large_product(list1, list2, n):\n    # create a list of tuples\n    list_of_tuples = [(list1[i], list2[i]) for i in range(len(list1))]\n    # sort the list of tuples in descending order\n    list_of_tuples.sort(key = lambda x: x[0]*x[1], reverse = True)\n    # return the first n elements of the list\n    return [x[0]*x[1] for x in list_of_tuples[:n]]\n\n"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\ndef maximum(a, b):\n    return a if a > b else b"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\ndef string_to_tuple(string):\n    return tuple(string)"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\ndef set_left_most_unset_bit(n):\n    return n | (n + 1)"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n    \"\"\"\n    return (1/3) * math.pi * radius**2 * height\n"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\ndef pos_nos(lst):\n    return [x for x in lst if x > 0]"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\ndef max_sum_rectangular_grid(grid, n):\n    # initialize the dp array\n    dp = [[0 for _ in range(n+1)] for _ in range(2)]\n    # fill the dp array\n    for i in range(2):\n        for j in range(n):\n            if j == 0:\n                dp[i][j] = grid[i][j]\n            else:\n                dp[i][j] = max(dp[i][j-1], grid[i][j] + dp[1-i][j-2])\n    return dp[0][n-1]"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\ndef find_Max_Len_Even(str):\n    max_len = 0\n    for word in str.split():\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n    return max_len"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\ndef find_last_occurrence(arr, target):\n    \"\"\"\n    Find the index of the last occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left - 1"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\ndef modified_encode(lst):\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    if lst[0] == lst[1]:\n        return [lst[0], 2] + modified_encode(lst[2:])\n    else:\n        return [lst[0]] + modified_encode(lst[1:])"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\ndef max_volume(sum_of_sides):\n    max_volume = 0\n    for x in range(1, sum_of_sides//3 + 1):\n        for y in range(x, (sum_of_sides-x)//2 + 1):\n            z = sum_of_sides - x - y\n            if x*y*z > max_volume:\n                max_volume = x*y*z\n    return max_volume"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\ndef find_long_word(string):\n    # regex pattern to find five characters long word\n    pattern = r'\\b\\w{5}\\b'\n    # find all matches\n    matches = re.findall(pattern, string)\n    return matches"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\ndef sum_difference(n):\n    sum_n = 0\n    sum_squared_n = 0\n    for i in range(1,n+1):\n        sum_n += i\n        sum_squared_n += i*i\n    return sum_n**2 - sum_squared_n\n"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\ndef find_demlo(num):\n    \"\"\"\n    Find the Demlo number for the given number.\n    \"\"\"\n    demlo = \"\"\n    for i in range(1, len(num)+1):\n        demlo += str(i) * i\n    return demlo"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\ndef position_min(lst):\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\ndef re_arrange(arr, n):\n    pos = []\n    neg = []\n    for i in arr:\n        if i >= 0:\n            pos.append(i)\n        else:\n            neg.append(i)\n    res = []\n    for i in range(n):\n        if i % 2 == 0:\n            res.append(pos.pop(0))\n        else:\n            res.append(neg.pop(0))\n    return res"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\ndef sum_of_alternates(tup):\n    return (sum(tup[::2]), sum(tup[1::2]))\n\n"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\ndef get_Min_Squares(n):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = i\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n    return dp[n]"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\ndef most_occurrences(strings):\n    # create a dictionary to store the count of each word\n    word_count = {}\n    # iterate over the strings\n    for string in strings:\n        # split the string into words\n        words = string.split()\n        # iterate over the words\n        for word in words:\n            # if the word is already in the dictionary, increment its count\n            if word in word_count:\n                word_count[word] += 1\n            # otherwise, add the word to the dictionary with a count of 1\n            else:\n                word_count[word] = 1\n    # find the word with the highest count\n    max_count = 0\n    max_word = ''\n    for word, count in word_count.items():\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\ndef check_isosceles(a,b,c):\n    if a==b or b==c or c==a:\n        return True\n    else:\n        return False"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\ndef rotate_left(lst, n, k):\n    return lst[k:] + lst[:k]"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\ndef neg_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\ndef find_char(string):\n    \"\"\"\n    This function takes a string as an argument and returns all the three, four, five characters long words in the given string.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w{3,5}\\b', string)"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\ndef count_unset_bits(n):\n    count = 0\n    while n:\n        count += 1\n        n &= (n - 1)\n    return count"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\ndef char_frequency(str1):\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\ndef Sort(lst):\n    return sorted(lst, key=lambda x: x[1])"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\ndef check_Validity(a, b, c):\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        return True\n    else:\n        return False"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\ndef ap_sum(a, d, n):\n    return (n/2)*(2*a + (n-1)*d)"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\ndef check_monthnum(monthname):\n    monthnum = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    return monthnum.get(monthname, 0) == 28"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\ndef text_match_word(text, word):\n    if text.endswith(word):\n        return 'Found a match!'\n    return 'No match found.'"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\ndef count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i] == string[j]:\n                count += 1\n    return count"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\ndef find_Divisor(start, end):\n    max_divisor = 0\n    for i in range(start, end+1):\n        for j in range(1, i+1):\n            if i % j == 0 and j > max_divisor:\n                max_divisor = j\n    return max_divisor"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\ndef sum_three_smallest_nums(nums):\n    nums.sort()\n    return sum(nums[:3])"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\ndef set_to_tuple(s):\n    return tuple(sorted(s))"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\ndef find_minimum_range(arrays):\n    # Sort all the arrays\n    arrays = [sorted(array) for array in arrays]\n    # Initialize the minimum range\n    min_range = float('inf')\n    # Initialize the start and end of the minimum range\n    start, end = 0, 0\n    # Initialize the count of the minimum range\n    count = 0\n    # Initialize the current minimum and maximum\n    min_val, max_val = float('inf'), float('-inf')\n    # Iterate through all the arrays\n    for array in arrays:\n        # Update the current minimum and maximum\n        min_val = min(min_val, array[0])\n        max_val = max(max_val, array[-1])\n        # Update the count\n        count += 1\n        # Update the start and end of the minimum range\n        while start < len(array) and array[start] <= min_val:\n            min_val = min(min_val, array[start])\n            start += 1\n        while end < len(array) and array[end] <= max_val:\n            max_val = max(max_val, array[end])\n            end += 1\n        # Update the minimum range\n        min_range = min(min_range, max_val - min_val)\n    return min_range"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\ndef dig_let(string):\n    digits = 0\n    letters = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (digits,letters)"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\ndef count_Odd_Squares(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if i % 2 != 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\ndef diff_consecutivenums(lst):\n    return [lst[i+1] - lst[i] for i in range(len(lst)-1)]"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\ndef zigzag(n, k):\n    if k == 1:\n        return n\n    elif k == 2:\n        return n + 1\n    elif k == 3:\n        return n + 2\n    elif k == 4:\n        return n + 3\n    elif k == 5:\n        return n + 4\n    elif k == 6:\n        return n + 5\n    elif k == 7:\n        return n + 6\n    elif k == 8:\n        return n + 7\n    elif k == 9:\n        return n + 8\n    elif k == 10:\n        return n + 9\n    elif k == 11:\n        return n + 10\n    elif k == 12:\n        return n + 11\n    elif k == 13:\n        return n + 12\n    elif k == 14:\n        return n + 13\n    elif k == 15:\n        return n + 14\n    elif k == 16:\n        return n + 15\n    elif k == 17:\n        return n + 16\n    elif k == 18:\n        return n + 17\n    elif k == 19:\n        return n + 18\n    elif k == 20:\n        return n + 19\n    elif k == 21:\n        return n + 20\n    elif k == 22:\n        return n + 21\n    elif k == 23:\n        return n + 22\n    elif k == 24:\n        return n + 23\n    elif k == 25:\n        return n + 24\n    elif k == 26:\n        return n + 25\n    elif k == 27:\n        return n + 26\n    elif k == 28:\n        return n + 27\n    elif k == 29:\n        return n + 28\n    elif k == 30:\n        return n + 29\n    elif k == 31:\n        return n + 30\n    elif k == 32:\n        return n + 31\n    elif k == 33:\n        return n + 32\n    elif k == 34:\n        return n + 33\n    elif k == 35:\n        return n + 34\n    elif k == 36:\n        return n + 35\n    elif k == 37:\n        return n + 36\n    elif k == 38:\n        return n + 37\n    elif k == 39:\n        return n + 38\n    elif k == 40:\n        return n + 39\n    elif k == 41:\n        return n + 40\n    elif k == 42:\n        return n + 41\n    elif k == 43:\n        return n + 42\n    elif k == 44:\n        return n + 43\n    elif k == 45:\n        return n + 44\n    elif k == 46:\n        return n + 45\n    elif k == 47:\n        return n + 46\n    elif k == 48:\n        return n + 47\n    elif k == 49:\n        return n + 48\n    elif k == 50:\n        return n + 49\n    elif k == 51:\n        return n + 50\n    elif k == 52:\n        return n + 51\n    elif k == 53:\n        return n + 52\n    elif k == 54:\n        return n + 53\n    elif k == 55:\n        return n + 54\n    elif k == 56:\n        return n + 55\n    elif k == 57:\n        return n + 56\n    elif k == 58:\n        return n + 57\n    elif k == 59:\n        return n + 58\n    elif k == 60:\n        return n + 59\n    elif k == 61:\n        return n + 60\n    elif k == 62:\n        return n + 61\n    elif k == 63:\n        return n + 62\n    elif k == 64:\n        return n + 63\n    elif k == 65:\n        return n + 64\n    elif k == 66:\n        return n + 65\n    elif k == 67:\n        return n + 66\n    elif k == 68:\n        return n + 67\n    elif k == 69:\n        return n + 68\n    elif k == 70:\n        return n + 69\n    elif k == 71:\n        return n + 70\n    elif k == 72:\n        return n + 71\n    elif k == 73:\n        return n + 72\n    elif k == 74:\n        return n + 73\n    elif k == 75:\n        return n + 74\n    elif k == 76:\n        return n + 75\n    elif k == 77:\n        return n + 76\n    elif k == 78:\n        return n + 77\n    elif k == 79:\n        return n + 78\n    elif k == 80:\n        return n + 79\n    elif k == 81:\n        return n + 80\n    elif k == 82:\n        return n + 81\n    elif k == 83:\n        return n + 82\n    elif k == 84:\n        return n + 83\n    elif k == 85:\n        return n + 84\n    elif k == 86:\n        return n + 85\n    elif k == 87:\n        return n + 86\n    elif k == 88:\n        return n + 87\n    elif k == 89:\n        return n + 88\n    elif k == 90:\n        return n + 89\n    elif k == 91:\n        return n + 90\n    elif k == 92:\n        return n + 91\n    elif k == 93:\n        return n + 92\n    elif k == 94:\n        return n + 93\n    elif k == 95:\n        return n + 94\n    elif k == 96:\n        return n + 95\n    elif k == 97:\n        return n + 96\n    elif k == 98:\n        return n + 97\n    elif k == 99:\n        return n + 98\n    elif k == 100:\n        return n + 99\n    elif k == 101:\n        return n + 100\n    elif k == 102:\n        return n + 101\n    elif k == 103:\n        return n + 102\n    elif k == 104:\n        return n + 103\n    elif k == 105:\n        return n + 104\n    elif k == 106:\n        return n + 105\n    elif k == 107:\n        return n + 106\n    elif k == 108:\n        return n + 107\n    elif k == 109:\n        return n + 108\n    elif k == 110:\n        return n + 109\n    elif k == 111:\n        return n + 110\n    elif k == 112:\n        return n + 111\n    elif k == 113:\n        return n + 112\n    elif k == 114:\n        return n + 113\n    elif k == 115:\n        return n + 114\n    elif k == 116:\n        return n + 115\n    elif k == 117:\n        return n + 116\n    elif k == 118:\n        return n + 117\n    elif k == 119:\n        return n + 118\n    elif k == 120:\n        return n + 119\n    elif k == 121:\n        return n + 120\n    elif k == 122:\n        return n + 121\n    elif k == 123:\n        return n + 122\n    elif k == 124:\n        return n + 123\n    elif k == 125:\n        return n + 124\n    elif k == 126:\n        return n + 125\n    elif k == 127:\n        return n + 126\n    elif k == 128:\n        return n + 127\n    elif k == 129:\n        return n + 128\n    elif k == 130:\n        return n + 129\n    elif k == 131:\n        return n + 130\n    elif k == 132:\n        return n + 131\n    elif k == 133:\n        return n + 132\n    elif k == 134:\n        return n + 133\n    elif k == 135:\n        return n + 134\n    elif k == 136:\n        return n + 135\n    elif k == 137:\n        return n + 136\n    elif k == 138:\n        return n + 137\n    elif k == 139:\n        return n + 138\n    elif k == 140:\n        return n + 139\n    elif k == 141:\n        return n + 140\n    elif k == 142:\n        return n + 141\n    elif k == 143:\n        return n + 142\n    elif k == 144:\n        return n + 143\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\ndef count_Squares(width, height):\n    if width == 0 or height == 0:\n        return 0\n    return (width * height) + count_Squares(width-1, height) + count_Squares(width, height-1) - count_Squares(width-1, height-1)"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\ndef find_ways(n):\n    # dp[i][j] = number of ways to generate a sequence of length i with sum j\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(n + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= 1:\n                dp[i][j] += dp[i - 1][j - 1]\n            if j >= 2:\n                dp[i][j] += dp[i - 1][j - 2]\n            if j >= 3:\n                dp[i][j] += dp[i - 1][j - 3]\n            if j >= 4:\n                dp[i][j] += dp[i - 1][j - 4]\n    return dp[n][n]\n"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\ndef check(string):\n    for char in string:\n        if char not in \"01\":\n            return \"No\"\n    return \"Yes\""], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\ndef minimum_Length(s):\n    min_length = len(s)\n    for i in range(len(s)):\n        temp = s[:i] + s[i+1:]\n        min_length = min(min_length, len(temp))\n    return min_length"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\ndef first_Element(arr, k, n):\n    count = 0\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if arr[i] == arr[j]:\n                count += 1\n        if count == k:\n            return arr[i]\n    return -1"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\ndef unique_Characters(string):\n    \"\"\"\n    This function checks whether all the characters in a given string are unique.\n    \"\"\"\n    # create a set of characters\n    char_set = set(string)\n    # check if the length of the set is equal to the length of the string\n    if len(char_set) == len(string):\n        return True\n    else:\n        return False"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\ndef remove_column(nested_list, col):\n    return [row[:col] + row[col+1:] for row in nested_list]"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\ndef tn_ap(a, d, n):\n    return a + (n-1)*d"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\ndef count_Rectangles(r):\n    # The number of rectangles that can be formed in a circle of radius r is given by the formula:\n    # 4 * r^2\n    return 4 * r**2"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\ndef find_angle(angle1,angle2):\n    return 180-(angle1+angle2)"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\ndef find_max(records):\n    max_val = records[0][1]\n    for record in records:\n        if record[1] > max_val:\n            max_val = record[1]\n    return max_val"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\ndef moddiv_list(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\ndef Check_Solution(a, b, c):\n    # calculate the roots of the quadratic equation\n    root1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    root2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n    # check if one root is twice the other\n    if root1 == 2*root2 or root2 == 2*root1:\n        return \"Yes\"\n    else:\n        return \"No\""], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\ndef get_carol(n):\n    return 3 * n * (n + 1) + 1"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\ndef remove_empty(list_of_lists):\n    return [list for list in list_of_lists if list]"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\ndef max_occurrences(lst):\n    max_item = lst[0]\n    max_count = 0\n    for item in lst:\n        count = lst.count(item)\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\ndef add_K_element(tup, K):\n    return [(x + K for x in tup)]\n"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\ndef min_flip_to_make_string_alternate(s):\n    # Initialize the number of flips\n    flips = 0\n    # Iterate through the string\n    for i in range(len(s)):\n        # Check if the current character is the same as the previous one\n        if i > 0 and s[i] == s[i-1]:\n            # Increment the number of flips\n            flips += 1\n    # Return the number of flips\n    return flips"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\ndef count_Digit(n):\n    count = 0\n    while n > 0:\n        count += 1\n        n //= 10\n    return count"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\ndef adjacent_num_product(lst):\n    max_product = 0\n    for i in range(len(lst)-1):\n        max_product = max(max_product, lst[i]*lst[i+1])\n    return max_product"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\ndef is_tree_balanced(root):\n    def check_height(node):\n        if not node:\n            return 0\n        left_height = check_height(node.left)\n        if left_height == -1:\n            return -1\n        right_height = check_height(node.right)\n        if right_height == -1:\n            return -1\n        if abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n\n    return check_height(root) != -1"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\ndef repeat_tuples(tup, n):\n    return [tup] * n"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\ndef lateralsurface_cuboid(length, breadth, height):\n    return 2*(length*breadth+breadth*height+length*height) "], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\ndef float_sort(tup):\n    return sorted(tup, key=lambda x: float(x[1]))"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\ndef smallest_missing(arr, start, end):\n    if start > end:\n        return end + 1\n    mid = (start + end) // 2\n    if arr[mid] != mid:\n        return mid\n    if mid == 0 or arr[mid - 1] == mid - 1:\n        return smallest_missing(arr, mid + 1, end)\n    return smallest_missing(arr, start, mid - 1)"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\ndef heap_assending(lst):\n    # Create a heap\n    heap = []\n    for element in lst:\n        heapq.heappush(heap, element)\n    # Pop elements from the heap and return them\n    return [heapq.heappop(heap) for _ in range(len(heap))]\n"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\ndef volume_cuboid(length, width, height):\n    return length * width * height"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\ndef permute_string(s):\n    if len(s) == 1:\n        return [s]\n    l = []\n    for i, c in enumerate(s):\n        for p in permute_string(s[:i]+s[i+1:]):\n            l.append(c+p)\n    return l"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\ndef round_num(num, multiple):\n    return round(num/multiple)*multiple"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\ndef remove_replica(tup):\n    from collections import Counter\n    c = Counter(tup)\n    return tuple('MSP' if c[x] > 1 else x for x in tup)"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\ndef remove_Char(string, char):\n    return string.replace(char, \"\")"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\ndef move_first(lst):\n    if len(lst) == 0:\n        return lst\n    return [lst[-1]] + lst[:-1]"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\ndef surfacearea_cuboid(length, width, height):\n    return 2 * (length * width + width * height + height * length)"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\ndef multi_list(m, n):\n    return [[i * j for j in range(n)] for i in range(m)]"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef sort_list_of_lists(list_of_lists, index):\n    return sorted(list_of_lists, key=lambda x: x[index])\n"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\ndef find_rotation_count(arr):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return low"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\ndef even_bit_toggle_number(n):\n    # Initialize the result\n    result = 0\n    # Iterate over the bits\n    for i in range(32):\n        # Check if the ith bit is odd\n        if (n & (1 << i)) != 0:\n            # Toggle the ith bit\n            result |= (1 << i)\n    return result"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\ndef frequency_Of_Smallest(arr):\n    if len(arr) == 0:\n        return 0\n    smallest = min(arr)\n    return arr.count(smallest)"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\ndef get_perrin(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2) + get_perrin(n-3) + get_perrin(n-4) + get_perrin(n-5) + get_perrin(n-6) + get_perrin(n-7) + get_perrin(n-8) + get_perrin(n-9) + get_perrin(n-10) + get_perrin(n-11) + get_perrin(n-12) + get_perrin(n-13) + get_perrin(n-14) + get_perrin(n-15) + get_perrin(n-16) + get_perrin(n-17) + get_perrin(n-18) + get_perrin(n-19) + get_perrin(n-20) + get_perrin(n-21) + get_perrin(n-22) + get_perrin(n-23) + get_perrin(n-24) + get_perrin(n-25) + get_perrin(n-26) + get_perrin(n-27) + get_perrin(n-28) + get_perrin(n-29) + get_perrin(n-30) + get_perrin(n-31) + get_perrin(n-32) + get_perrin(n-33) + get_perrin(n-34) + get_perrin(n-35) + get_perrin(n-36) + get_perrin(n-37) + get_perrin(n-38) + get_perrin(n-39) + get_perrin(n-40) + get_perrin(n-41) + get_perrin(n-42) + get_perrin(n-43) + get_perrin(n-44) + get_perrin(n-45) + get_perrin(n-46) + get_perrin(n-47) + get_perrin(n-48) + get_perrin(n-49) + get_perrin(n-50) + get_perrin(n-51) + get_perrin(n-52) + get_perrin(n-53) + get_perrin(n-54) + get_perrin(n-55) + get_perrin(n-56) + get_perrin(n-57) + get_perrin(n-58) + get_perrin(n-59) + get_perrin(n-60) + get_perrin(n-61) + get_perrin(n-62) + get_perrin(n-63) + get_perrin(n-64) + get_perrin(n-65) + get_perrin(n-66) + get_perrin(n-67) + get_perrin(n-68) + get_perrin(n-69) + get_perrin(n-70) + get_perrin(n-71) + get_perrin(n-72) + get_perrin(n-73) + get_perrin(n-74) + get_perrin(n-75) + get_perrin(n-76) + get_perrin(n-77) + get_perrin(n-78) + get_perrin(n-79) + get_perrin(n-80) + get_perrin(n-81) + get_perrin(n-82) + get_perrin(n-83) + get_perrin(n-84) + get_perrin(n-85) + get_perrin(n-86) + get_perrin(n-87) + get_perrin(n-88) + get_perrin(n-89) + get_perrin(n-90) + get_perrin(n-91) + get_perrin(n-92) + get_perrin(n-93) + get_perrin(n-94) + get_perrin(n-95) + get_perrin(n-96) + get_perrin(n-97) + get_perrin(n-98) + get_perrin(n-99) + get_perrin(n-100) + get_perrin(n-101) + get_perrin(n-102) + get_perrin(n-103) + get_perrin(n-104) + get_perrin(n-105) + get_perrin(n-106) + get_perrin(n-107) + get_perrin(n-108) + get_perrin(n-109) + get_perrin(n-110) + get_perrin(n-111) + get_perrin(n-112) + get_perrin(n-113) + get_perrin(n-114) + get_perrin(n-115) + get_perrin(n-116) + get_perrin(n-117) + get_perrin(n-118) + get_perrin(n-119) + get_perrin(n-120) + get_perrin(n-121) + get_perrin(n-122) + get_perrin(n-123) + get_perrin(n-124) + get_perrin(n-125) + get_perrin(n-126) + get_perrin(n-127) + get_perrin(n-128) + get_perrin(n-129) + get_perrin(n-130) + get_perrin(n-131) + get_perrin(n-132) + get_perrin(n-133) + get_perrin(n-134) + get_perrin(n-135) + get_perrin(n-136) + get_perrin(n-137) + get_perrin(n-138) + get_perrin(n-139) + get_perrin(n-140) + get_perrin(n-141) + get_perrin(n-142) + get_perrin(n-143) + get_perrin(n-144) + get_perrin(n-145) + get_perrin(n-146) + get_perrin(n-147) + get_perrin(n-148) + get_perrin(n-149) + get_perrin(n-150) + get_perrin(n-151) + get_perrin(n-152) + get_perrin(n-153) + get_perrin(n-154) + get_perrin(n-155) + get_perrin(n-156) + get_perrin(n-157) + get_perrin(n-158) + get_perrin(n-159) + get_perrin(n-160) + get_perrin(n-161) + get_perrin(n-162) + get_perrin(n-163) + get_perrin(n-164) + get_perrin(n-165) + get_perrin(n-166) + get_perrin(n-167) + get_perrin(n-168) + get_perrin(n-169) + get_perrin(n-170) + get_perrin(n-171) + get_perrin(n-172) + get_perrin(n-173) + get_perrin(n-174) + get_perrin(n-175) + get_perrin(n-176) + get_perrin(n-177) + get_perrin(n-178) + get_perrin(n-179) + get_perrin(n-180) + get_perrin(n-181) + get_perrin(n-182) + get_perrin(n-183) + get_perrin(n-184) + get_perrin(n-185) + get_perrin(n-186) + get_perrin(n-187) + get_perrin(n-188) + get_perrin(n-189) + get_perrin(n-190) + get_perrin(n-191) + get_perrin(n-192) + get_perrin(n-193) + get_perrin(n-194) + get_perrin(n-195) + get_perrin(n-196) + get_perrin(n-197) + get_perrin(n-198) + get_perrin(n-199) + get_perrin(n-200) + get_perrin(n-201) + get_perrin(n-202) + get_perrin(n-203) + get_perrin(n-204) + get_perrin(n-205) + get_perrin(n-206) + get_perrin(n-207) + get_perrin(n-208) + get_perrin(n-209) + get_perrin(n-210) + get_perrin(n-211) + get_perrin(n-212) + get_perrin(n-213) + get_perrin(n-214) + get_perrin(n-215) + get_perrin(n-216) + get_perrin(n-217) + get_perrin(n-218) + get_perrin(n-219) + get_perrin(n-220) + get_perrin(n-221) + get_perrin(n-222) + get_perrin(n-223) + get_perrin(n-224) + get_perrin(n-225) + get_perrin(n-226) + get_perrin(n-227) + get_perrin(n-228) + get_perrin(n-229) + get_perrin(n-230) + get_perrin(n-231) + get_perrin(n-232) + get_perrin(n-233) + get_perrin(n-234) + get_perrin(n-235) + get_perrin(n-236) + get_perrin(n-237) + get_perrin(n-238) + get_perrin(n-239) + get_perrin(n-240) + get_perrin(n-241) + get_perrin(n-242) + get_perrin(n-243) + get_perrin(n-244) + get_perrin(n-245) + get_perrin(n-246) + get_perrin(n-247) + get_perrin(n-248) + get_per"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\ndef swap_count(s):\n    stack = []\n    count = 0\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if len(stack) == 0:\n                count += 1\n            else:\n                stack.pop()\n    return count"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\ndef even_or_odd(hex_num):\n    # Convert hex number to decimal\n    decimal_num = int(hex_num, 16)\n    # Check if the decimal number is even or odd\n    if decimal_num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\ndef highest_Power_of_2(n):\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\ndef find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\ndef add_string(lst, str):\n    return [str+str(i) for i in lst]"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\ndef convert_list_dictionary(names,places,values):\n    dict_list = []\n    for i in range(len(names)):\n        dict_list.append({names[i]: {places[i]:values[i]}})\n    return dict_list\n"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\ndef get_max_sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\ndef max_length_list(lst):\n    return max(lst, key=lambda x: len(x))"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\ndef check_distinct(tup):\n    return len(tup) == len(set(tup))"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\ndef first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    return None"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\ndef check_char(s):\n    if re.match(r'^\\w.*\\w$', s):\n        return \"Valid\"\n    else:\n        return \"Invalid\""], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\ndef median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of the three numbers.\n    \"\"\"\n    if a > b:\n        if a > c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    else:\n        if b > c:\n            return b\n        elif a > c:\n            return a\n        else:\n            return c"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\ndef sum_of_digits(lst):\n    return sum([sum([int(digit) for digit in str(num)]) for num in lst])"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\ndef bitwise_xor(tup1, tup2):\n    return tuple(a ^ b for a, b in zip(tup1, tup2))"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\ndef extract_freq(lst):\n    freq = {}\n    for tup in lst:\n        if tup not in freq:\n            freq[tup] = 1\n        else:\n            freq[tup] += 1\n    return len(freq)"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\ndef add_nested_tuples(t1, t2):\n    return tuple(tuple(a + b for a, b in zip(t1[i], t2[i])) for i in range(len(t1)))"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\ndef ncr_modp(n, r, p):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    return (ncr_modp(n-1, r-1, p) * n // r) % p\n"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\ndef is_valid_URL(url):\n    regex = r'^(http|https)://[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(/\\S*)?$'\n    if re.match(regex, url):\n        return True\n    return False"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\ndef minimum(a, b):\n    return a if a < b else b"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\ndef check_tuplex(tup, element):\n    return element in tup"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\""], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\ndef rearrange_bigger(num):\n    num_list = list(str(num))\n    num_list.sort(reverse=True)\n    return int(''.join(num_list))"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\ndef k_smallest_pairs(arr1, arr2, k):\n    arr1.sort()\n    arr2.sort()\n    pairs = []\n    for i in range(k):\n        pairs.append([arr1[i], arr2[i]])\n    return pairs"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\ndef min_product_tuple(lst):\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            min_product = min(min_product, lst[i][0]*lst[j][1])\n    return min_product"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\ndef min_val(lst):\n    min_val = lst[0]\n    for i in lst:\n        if i < min_val:\n            min_val = i\n    return min_val"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\ndef snake_to_camel(snake_str):\n    return ''.join(word.title() for word in snake_str.split('_'))"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\ndef remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\ndef extract_nth_element(lst, n):\n    return [x[n] for x in lst]\n"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\ndef overlapping(seq1, seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\ndef max_product(arr):\n    max1 = max2 = max3 = max4 = -float('inf')\n    min1 = min2 = min3 = min4 = float('inf')\n    for num in arr:\n        if num > max1:\n            max4 = max3\n            max3 = max2\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max4 = max3\n            max3 = max2\n            max2 = num\n        elif num > max3:\n            max4 = max3\n            max3 = num\n        elif num > max4:\n            max4 = num\n        if num < min1:\n            min4 = min3\n            min3 = min2\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min4 = min3\n            min3 = min2\n            min2 = num\n        elif num < min3:\n            min4 = min3\n            min3 = num\n        elif num < min4:\n            min4 = num\n    return (max1, max2, max3, max4, min1, min2, min3, min4)"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\ndef breakSum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return max(n, n-1+breakSum(n-1), n-2+breakSum(n-2))"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\ndef group_tuples(tuples):\n    # create a dictionary to store the first element of each tuple as key\n    # and the corresponding second elements as values\n    d = {}\n    for t in tuples:\n        if t[0] in d:\n            d[t[0]].append(t[1])\n        else:\n            d[t[0]] = [t[1]]\n    # create a list of tuples with the first element and the corresponding values\n    result = []\n    for k, v in d.items():\n        result.append((k, *v))\n    return result"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\ndef Find_Max(lst):\n    max_len = 0\n    max_list = []\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_list"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\ndef round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total = sum(rounded_numbers)\n    return total * len(numbers)"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**3\n    return sum"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\ndef concatenate_tuple(tup):\n    return '-'.join(map(str, tup))"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\ndef get_maxgold(goldmine, row, col):\n    if row == len(goldmine) - 1 and col == len(goldmine[0]) - 1:\n        return goldmine[row][col]\n    if row == len(goldmine) - 1:\n        return goldmine[row][col] + get_maxgold(goldmine, row, col + 1)\n    if col == len(goldmine[0]) - 1:\n        return goldmine[row][col] + get_maxgold(goldmine, row + 1, col)\n    return goldmine[row][col] + max(get_maxgold(goldmine, row + 1, col), get_maxgold(goldmine, row, col + 1))"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\ndef extract_rear(tup):\n    return [word[-1] for word in tup]"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\ndef count_element_in_list(lst,element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\ndef filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\ndef change_date_format(date):\n    # regex pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # match the pattern\n    match = re.match(pattern, date)\n    if match:\n        # extract the year, month, and day\n        year, month, day = match.groups()\n        # return the date in dd-mm-yyyy format\n        return f'{day}-{month}-{year}'\n    else:\n        return None"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\ndef shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\ndef extract_elementwise_and_tuples(tuple1, tuple2):\n    \"\"\"\n    Extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    return tuple((x - y) for x, y in zip(tuple1, tuple2))\n"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\ndef parabola_directrix(a, b, c):\n    return -b/(2*a)"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\ndef median_trapezium(a, b, c):\n    return (a + c) / 2"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\ndef check_greater(arr, num):\n    for i in arr:\n        if num > i:\n            return 'Yes, entered number is greater than those in the array'\n    return 'No, entered number is less than those in the array'"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\ndef text_match_one(text):\n    if text[0] == 'a' and text[1] == 'b':\n        return 'Matched'\n    else:\n        return 'Not matched!'"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\ndef last_Digit(n):\n    return n % 10"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\ndef print_neg_nos(lst):\n    neg_nos = []\n    for i in lst:\n        if i < 0:\n            neg_nos.append(i)\n    return neg_nos"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\ndef remove_odd(string):\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            new_string += string[i]\n    return new_string"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\ndef count_bidirectional(tuples):\n    count = 0\n    for t in tuples:\n        if t[::-1] in tuples:\n            count += 1\n    return count"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\ndef multiple_to_single(lst):\n    return int(''.join(map(str, lst)))"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\ndef find_adverb_position(sentence):\n    adverbs = []\n    for i, word in enumerate(sentence.split()):\n        if word.endswith('ly'):\n            adverbs.append((i, word))\n    return adverbs"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\ndef surfacearea_cube(side):\n    return 6*side*side"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\ndef positive_count(arr):\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count / len(arr)"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\ndef largest_neg(lst):\n    \"\"\"\n    Returns the largest negative number from the given list\n    \"\"\"\n    # Initialize the largest negative number as None\n    largest = None\n    # Iterate over the list\n    for num in lst:\n        # Check if the number is negative\n        if num < 0:\n            # If the number is larger than the current largest negative number\n            if largest is None or num > largest:\n                # Update the largest negative number\n                largest = num\n    # Return the largest negative number\n    return largest"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\ndef trim_tuple(tuples, k):\n    return [tuple(x[k:]) for x in tuples]"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\ndef index_multiplication(tup1, tup2):\n    result = []\n    for i in range(len(tup1)):\n        result.append((tup1[i][0] * tup2[i][0], tup1[i][1] * tup2[i][1]))\n    return result"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(tup, lst):\n    count = 0\n    for i in lst:\n        count += tup.count(i)\n    return count"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\ndef cube_nums(nums):\n    return list(map(lambda x: x**3, nums))"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\ndef cal_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 10\n    elif n == 5:\n        return 15\n    elif n == 6:\n        return 21\n    elif n == 7:\n        return 28\n    elif n == 8:\n        return 36\n    elif n == 9:\n        return 45\n    else:\n        return cal_sum(n-1) + cal_sum(n-2) + cal_sum(n-3) + cal_sum(n-4) + cal_sum(n-5) + cal_sum(n-6) + cal_sum(n-7) + cal_sum(n-8) + cal_sum(n-9) + cal_sum(n-10) + cal_sum(n-11) + cal_sum(n-12) + cal_sum(n-13) + cal_sum(n-14) + cal_sum(n-15) + cal_sum(n-16) + cal_sum(n-17) + cal_sum(n-18) + cal_sum(n-19) + cal_sum(n-20) + cal_sum(n-21) + cal_sum(n-22) + cal_sum(n-23) + cal_sum(n-24) + cal_sum(n-25) + cal_sum(n-26) + cal_sum(n-27) + cal_sum(n-28) + cal_sum(n-29) + cal_sum(n-30) + cal_sum(n-31) + cal_sum(n-32) + cal_sum(n-33) + cal_sum(n-34) + cal_sum(n-35) + cal_sum(n-36) + cal_sum(n-37) + cal_sum(n-38) + cal_sum(n-39) + cal_sum(n-40) + cal_sum(n-41) + cal_sum(n-42) + cal_sum(n-43) + cal_sum(n-44) + cal_sum(n-45) + cal_sum(n-46) + cal_sum(n-47) + cal_sum(n-48) + cal_sum(n-49) + cal_sum(n-50) + cal_sum(n-51) + cal_sum(n-52) + cal_sum(n-53) + cal_sum(n-54) + cal_sum(n-55) + cal_sum(n-56) + cal_sum(n-57) + cal_sum(n-58) + cal_sum(n-59) + cal_sum(n-60) + cal_sum(n-61) + cal_sum(n-62) + cal_sum(n-63) + cal_sum(n-64) + cal_sum(n-65) + cal_sum(n-66) + cal_sum(n-67) + cal_sum(n-68) + cal_sum(n-69) + cal_sum(n-70) + cal_sum(n-71) + cal_sum(n-72) + cal_sum(n-73) + cal_sum(n-74) + cal_sum(n-75) + cal_sum(n-76) + cal_sum(n-77) + cal_sum(n-78) + cal_sum(n-79) + cal_sum(n-80) + cal_sum(n-81) + cal_sum(n-82) + cal_sum(n-83) + cal_sum(n-84) + cal_sum(n-85) + cal_sum(n-86) + cal_sum(n-87) + cal_sum(n-88) + cal_sum(n-89) + cal_sum(n-90) + cal_sum(n-91) + cal_sum(n-92) + cal_sum(n-93) + cal_sum(n-94) + cal_sum(n-95) + cal_sum(n-96) + cal_sum(n-97) + cal_sum(n-98) + cal_sum(n-99) + cal_sum(n-100) + cal_sum(n-101) + cal_sum(n-102) + cal_sum(n-103) + cal_sum(n-104) + cal_sum(n-105) + cal_sum(n-106) + cal_sum(n-107) + cal_sum(n-108) + cal_sum(n-109) + cal_sum(n-110) + cal_sum(n-111) + cal_sum(n-112) + cal_sum(n-113) + cal_sum(n-114) + cal_sum(n-115) + cal_sum(n-116) + cal_sum(n-117) + cal_sum(n-118) + cal_sum(n-119) + cal_sum(n-120) + cal_sum(n-121) + cal_sum(n-122) + cal_sum(n-123) + cal_sum(n-124) + cal_sum(n-125) + cal_sum(n-126) + cal_sum(n-127) + cal_sum(n-128) + cal_sum(n-129) + cal_sum(n-130) + cal_sum(n-131) + cal_sum(n-132) + cal_sum(n-133) + cal_sum(n-134) + cal_sum(n-135) + cal_sum(n-136) + cal_sum(n-137) + cal_sum(n-138) + cal_sum(n-139) + cal_sum(n-140) + cal_sum(n-141) + cal_sum(n-142) + cal_sum(n-143) + cal_sum(n-144) + cal_sum(n-145) + cal_sum(n-146) + cal_sum(n-147) + cal_sum(n-148) + cal_sum(n-149) + cal_sum(n-150) + cal_sum(n-151) + cal_sum(n-152) + cal_sum(n-153) + cal_sum(n-154) + cal_sum(n-155) + cal_sum(n-156) + cal_sum(n-157) + cal_sum(n-158) + cal_sum(n-159) + cal_sum(n-160) + cal_sum(n-161) + cal_sum(n-162) + cal_sum(n-163) + cal_sum(n-164) + cal_sum(n-165) + cal_sum(n-166) + cal_sum(n-167) + cal_sum(n-168) + cal_sum(n-169) + cal_sum(n-170) + cal_sum(n-171) + cal_sum(n-172) + cal_sum(n-173) + cal_sum(n-174) + cal_sum(n-175) + cal_sum(n-176) + cal_sum(n-177) + cal_sum(n-178) + cal_sum(n-179) + cal_sum(n-180) + cal_sum(n-181) + cal_sum(n-182) + cal_sum(n-183) + cal_sum(n-184) + cal_sum(n-185) + cal_sum(n-186) + cal_sum(n-187) + cal_sum(n-188) + cal_sum(n-189) + cal_sum(n-190) + cal_sum(n-191) + cal_sum(n-192) + cal_sum(n-193) + cal_sum(n-194) + cal_sum(n-195) + cal_sum(n-196) + cal_sum(n-197) + cal_sum(n-198) + cal_sum(n-199) + cal_sum(n-200) + cal_sum(n-201) + cal_sum(n-202) + cal_sum(n-203) + cal_sum(n-204) + cal_sum(n-205) + cal_sum(n-206) + cal_sum(n-207) + cal_sum(n-208) + cal_sum(n-209) + cal_sum(n-210) + cal_sum(n-211) + cal_sum(n-212) + cal_sum(n-213) + cal_sum(n-214) + cal_sum(n-215) + cal_sum(n-216) + cal_sum(n-217) + cal_sum(n-218) + cal_sum(n-219) + cal_sum(n-220) + cal_sum(n-221) + cal_sum(n-222) + cal_sum(n-223) + cal_sum(n-224) + cal_sum(n-225) + cal_sum(n-226) + cal_sum(n-227) + cal_sum(n-228) + cal_sum(n-229) + cal_sum(n-230) + cal_sum(n-231) + cal_sum(n-232) + cal_sum(n-233) + cal_sum(n-234) + cal_sum(n-235) + cal_sum(n-236) + cal_sum(n-237) + cal_sum(n-238) + cal_sum(n-239) + cal_sum(n-240) + cal_sum(n-241) + cal_sum(n-242) + cal_sum(n-243) + cal_sum(n-244) + cal_sum(n-245) + cal_sum(n-246) + cal_sum(n-247) + cal_sum(n-248) + cal_sum(n-249) + cal_sum(n-250) + cal_sum(n-251) + cal_sum(n-252) + cal_sum(n-253) + cal_sum(n-254) + cal_sum(n-255) + cal_sum(n-256) + cal_sum(n-257) + cal_sum(n-258) + cal_sum(n-259) + cal_sum(n-260) + cal_sum(n-261) + cal_sum(n-262) + cal_sum(n-263) + cal_sum(n-264) + cal_sum(n-265) + cal_sum(n-266) + cal_sum(n-267) + cal_sum(n-268) + cal_sum(n-269) + cal_sum(n-270) + cal_sum(n-"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    This function checks whether the triangle is valid or not\n    \"\"\"\n    # calculate the length of the sides\n    a = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    b = ((x3 - x2)**2 + (y3 - y2)**2)**0.5\n    c = ((x1 - x3)**2 + (y1 - y3)**2)**0.5\n\n    # check if the triangle is valid\n    if a + b > c and b + c > a and c + a > b:\n        return 'Yes'\n    else:\n        return 'No'"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\ndef extract_string(lst, size):\n    return [s for s in lst if len(s) == size]"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\ndef remove_whitespaces(string):\n    return re.sub(r'\\s+', '', string)"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\ndef loss_amount(amount, loss):\n    if amount > loss:\n        return amount - loss\n    else:\n        return None"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\ndef text_match_wordz(text):\n    if 'z' in text:\n        return 'Found a match!'\n    else:\n        return 'No match found'"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\ndef check_monthnumb_number(month_number):\n    month_number = int(month_number)\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number in [4, 6, 9, 11]:\n        return False\n    else:\n        return False"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\ndef reverse_string_list(string_list):\n    return [string[::-1] for string in string_list]"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\ndef Find_Min(lst):\n    min_length = float('inf')\n    min_list = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_list = sublist\n    return min_list"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\ndef rectangle_area(length, width):\n    return length * width"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\ndef remove_uppercase(string):\n    return re.sub(r'[A-Z]+', '', string)"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\ndef Extract(lst):\n    return [sublist[0] for sublist in lst]"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\ndef upper_ctr(str):\n    ctr = 0\n    for char in str:\n        if char.isupper():\n            ctr += 1\n    return ctr"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\ndef combinations_list(lst):\n    result = [[]]\n    for item in lst:\n        result += [curr + [item] for curr in result]\n    return result"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\ndef max_subarray_product(arr):\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\ndef check_value(dictionary, value):\n    for key in dictionary:\n        if dictionary[key] != value:\n            return False\n    return True"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\ndef drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\ndef find_peak(arr, n):\n    if n == 1:\n        return 0\n    mid = n // 2\n    if arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n        return mid\n    elif arr[mid] < arr[mid - 1] and arr[mid] < arr[mid + 1]:\n        return find_peak(arr, mid)\n    elif arr[mid] < arr[mid - 1]:\n        return find_peak(arr, mid - 1)\n    else:\n        return find_peak(arr, mid + 1)"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\ndef decimal_to_Octal(n):\n    if n == 0:\n        return 0\n    octal = 0\n    i = 0\n    while n != 0:\n        octal += (n % 8) * (10 ** i)\n        n //= 8\n        i += 1\n    return octal"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\ndef max_product(arr, n):\n    max_product = 1\n    for i in range(n):\n        max_product = max(max_product, arr[i])\n    return max_product"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\ndef max_profit(prices, k):\n    if not prices or k == 0:\n        return 0\n\n    n = len(prices)\n    dp = [[0] * n for _ in range(k + 1)]\n\n    for i in range(1, k + 1):\n        max_diff = -prices[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff)\n            max_diff = max(max_diff, dp[i - 1][j] - prices[j])\n\n    return dp[k][n - 1]"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\ndef add_pairwise(tup):\n    return tuple(map(lambda x, y: x + y, tup[:-1], tup[1:]))"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\ndef find_remainder(arr, n, m):\n    # calculate the product of all elements in the array\n    product = 1\n    for num in arr:\n        product *= num\n\n    # calculate the remainder of the product divided by n and m\n    remainder = (product % n) % m\n\n    return remainder"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\ndef check_Consecutive(lst):\n    # sort the list\n    lst.sort()\n    # check if the difference between consecutive elements is 1\n    for i in range(len(lst)-1):\n        if lst[i+1] - lst[i] != 1:\n            return False\n    return True"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\ndef tuple_intersection(tuple_list1, tuple_list2):\n    set1 = set(tuple_list1)\n    set2 = set(tuple_list2)\n    return set1 & set2"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\ndef replace_char(string,old_char, new_char):\n    return string.replace(old_char, new_char)"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\ndef big_sum(arr):\n    return max(arr) + min(arr)"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\ndef to_lower(string):\n    return string.lower()"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\ndef remove_lowercase(string):\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char\n    return new_string"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\ndef first_Digit(n):\n    return int(str(n)[0])"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\ndef get_max_occuring_char(string):\n    max_char = \"\"\n    max_count = 0\n    for char in string:\n        count = string.count(char)\n        if count > max_count:\n            max_count = count\n            max_char = char\n    return max_char"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\ndef is_subset_sum(arr, n, sum):\n    # Base Cases\n    if sum == 0:\n        return True\n    if n == 0:\n        return False\n\n    # If last element is greater than sum\n    if arr[n-1] > sum:\n        return is_subset_sum(arr, n-1, sum)\n\n    # Check if sum can be obtained by any of the following\n    # (a) including the last element\n    # (b) excluding the last element\n    return is_subset_sum(arr, n-1, sum) or is_subset_sum(arr, n-1, sum-arr[n-1])"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\ndef find_sequences(string):\n    import re\n    return bool(re.search(r'[A-Z][a-z]+', string))"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\ndef first_Factorial_Divisible_Number(x):\n    n = 1\n    while True:\n        if math.factorial(n) % x == 0:\n            return n\n        n += 1"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\ndef remove_matching_tuple(t1, t2):\n    return [x for x in t1 if x not in t2]"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\ndef largest_palindrome(arr, n):\n    max_palindrome = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            num = arr[i] * arr[j]\n            if str(num) == str(num)[::-1]:\n                max_palindrome = max(max_palindrome, num)\n    return max_palindrome"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Compute binomial probability for the given number.\n    \"\"\"\n    from math import comb\n    return comb(n, k) * p**k * (1-p)**(n-k)"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\ndef sort_tuple(tuples):\n    return sorted(tuples, key=lambda x: x[-1]) # sort by last element"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\ndef area_pentagon(side):\n    \"\"\"\n    Calculate the area of a regular pentagon given the length of a side.\n    \"\"\"\n    return 1.25 * side**2 * (1 / math.tan(math.pi / 5))"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\ndef frequency_Of_Largest(arr):\n    max_val = max(arr)\n    return arr.count(max_val)"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\ndef extract_symmetric(tup_list):\n    symmetric = set()\n    for tup in tup_list:\n        if tup[::-1] in tup_list:\n            symmetric.add(tup)\n    return symmetric"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\ndef sum_gp(a, r, n):\n    return a * (r**n - 1) / (r - 1)"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\ndef calculate_polygons(x, y, w, h, s):\n    # calculate the hexagon center\n    cx = x + w / 2\n    cy = y + h / 2\n    # calculate the hexagon vertices\n    vertices = []\n    for i in range(6):\n        angle = 2 * math.pi / 6 * i\n        x_vertex = cx + s * math.cos(angle)\n        y_vertex = cy + s * math.sin(angle)\n        vertices.append((x_vertex, y_vertex))\n    # create the hexagon grid\n    grid = []\n    for i in range(3):\n        row = []\n        for j in range(3):\n            x_offset = j * 2 * s\n            y_offset = i * 2 * s * math.sqrt(3) / 2\n            hexagon = []\n            for vertex in vertices:\n                x_vertex = vertex[0] + x_offset\n                y_vertex = vertex[1] + y_offset\n                hexagon.append((x_vertex, y_vertex))\n            row.append(hexagon)\n        grid.append(row)\n    return grid"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\ndef binary_to_integer(binary_tuple):\n    binary_string = ''.join(str(bit) for bit in binary_tuple)\n    return int(binary_string, 2)"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\ndef remove_lowercase(string):\n    return re.sub(r'[a-z]+', '', string)"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\ndef heap_queue_smallest(numbers, k):\n    heapq.heapify(numbers)\n    return [heapq.heappop(numbers) for _ in range(k)]"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\ndef surfacearea_cone(radius, height):\n    slant_height = math.sqrt(radius**2 + height**2)\n    base_area = math.pi * radius**2\n    lateral_area = math.pi * radius * slant_height\n    return base_area + lateral_area"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\ndef diameter_circle(radius):\n    return 2 * radius"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\ndef concatenate_elements(lst):\n    return ' '.join(lst)"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\ndef num_comm_div(a, b):\n    # Find the common divisor between two numbers\n    for i in range(1, min(a, b)+1):\n        if a % i == 0 and b % i == 0:\n            return i\n    return 1"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\ndef find(a, b):\n    return a % b"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\ndef add_consecutive_nums(nums):\n    result = []\n    for i in range(len(nums)-1):\n        result.append(nums[i] + nums[i+1])\n    return result"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\ndef sum_Of_Series(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\ndef re_order(arr):\n    # create two pointers\n    left, right = 0, 0\n    while left < len(arr):\n        if arr[left] != 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            right += 1\n        left += 1\n    return arr"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of p(n, k)\n    \"\"\"\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return factorial(n) // factorial(n-k)"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\ndef remove_words(words, to_remove):\n    return [word for word in words if word not in to_remove]"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\ndef same_order(list1, list2):\n    # check if the length of the lists is the same\n    if len(list1) != len(list2):\n        return False\n    # check if the elements are the same\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    return True"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\ndef average_Odd(n):\n    if n % 2 == 0:\n        return \"Input should be an odd number\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1, 2):\n        sum += i\n        count += 1\n    return sum / count"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\ndef no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * (k + 1)\n    dp[1] = 1\n    for i in range(n):\n        for j in range(k, 0, -1):\n            if j % arr[i] == 0:\n                dp[j] += dp[j // arr[i]]\n    return sum(dp[1:]) - 1"]]
