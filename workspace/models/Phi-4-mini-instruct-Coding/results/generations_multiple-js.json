[["//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){ \n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    let diff = max - min;\n    let threshold_diff = threshold * diff;\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < threshold_diff) {\n                return true;\n            }\n        }\n    }\n    return false;\n}"], ["//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){ \n    let result = [];\n    let open_paren = 0;\n    let close_paren = 0;\n    let start = 0;\n    let end = 0;\n    let paren_string = paren_string.replace(/\\s/g, \"\");\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === \"(\") {\n            open_paren++;\n            if (close_paren === 0) {\n                start = i;\n            }\n        }\n        if (paren_string[i] === \")\") {\n            close_paren++;\n            if (open_paren === 0) {\n                end = i;\n                result.push(paren_string.slice(start, end + 1));\n                start = end + 1;\n                close_paren = 0;\n                open_paren = 0;\n            }\n        }\n    }\n    return result;\n}"], ["//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){ \n    return number % 1;\n}"], ["//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){ \n    let balance = 0;\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}"], ["//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){ \n    let sum = 0;\n    let mean = 0;\n    let count = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        count++;\n    }\n    mean = sum / count;\n    let mad = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        mad += Math.abs(numbers[i] - mean);\n    }\n    mad = mad / count;\n    return mad;\n} \n"], ["//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){ \n    return numbers.reduce((acc, cur, index, arr) => {\n        if (index !== 0) {\n            acc.push(delimeter);\n        }\n        acc.push(cur);\n        return acc;\n    }, []);\n} \n"], ["//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){ \n    let paren_list = paren_string.split(' '); \n    let max_depth = 0; \n    let current_depth = 0; \n    let depths = []; \n    for (let paren of paren_list) { \n        current_depth = 0; \n        for (let char of paren) { \n            if (char === '(') { \n                current_depth++; \n            } \n            if (char === ')') { \n                current_depth--; \n            } \n            max_depth = Math.max(max_depth, current_depth); \n        } \n        depths.push(max_depth); \n    } \n    return depths; \n} "], ["//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){ \n    let filtered = [];\n    for (let i = 0; i < strings.length; i++) {\n        if (strings[i].includes(substring)) {\n            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n}"], ["//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){ \n    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}"], ["//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){ \n    let max = 0;\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        max = Math.max(max, numbers[i]);\n        result.push(max);\n    }\n    return result;\n}"], ["//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){ \n    let prefix = \"\";\n    let suffix = \"\";\n    let i = 0;\n    let j = string.length - 1;\n    while (i < j) {\n        if (string[i] == string[j]) {\n            suffix = string.substring(i, j + 1);\n            break;\n        }\n        i++;\n        j--;\n    }\n    prefix = string.substring(0, i);\n    return prefix + suffix + prefix.split(\"\").reverse().join(\"\");\n}"], ["//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){ \n    let result = \"\";\n    for (let i = 0; i < a.length; i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return result;\n}"], ["//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){ \n    if (strings.length === 0) return undefined;\n    let max = strings[0];\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length > max.length) {\n            max = strings[i];\n        }\n    }\n    return max;\n}"], ["//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){ \n    if (b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n}"], ["//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){ \n    let prefixes = [];\n    for (let i = 0; i < string.length; i++) {\n        prefixes.push(string.slice(0, i + 1));\n    }\n    return prefixes;\n}"], ["//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){ \n    let str = \"\";\n    for (let i = 0; i <= n; i++) {\n        str += i + \" \";\n    }\n    return str;\n}"], ["//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){ \n    let charSet = new Set();\n    for (let char of string.toLowerCase()) {\n        charSet.add(char);\n    }\n    return charSet.size;\n}"], ["//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){ \n    let music_array = music_string.split(' ');\n    let music_int = [];\n    for (let i = 0; i < music_array.length; i++) {\n        if (music_array[i] === 'o') {\n            music_int.push(4);\n        } else if (music_array[i] === 'o|') {\n            music_int.push(2);\n        } else if (music_array[i] === '.|') {\n            music_int.push(1);\n        }\n    }\n    return music_int;\n} \n\nparse_music(\"o o| .| o| o| .| .| .| .| o o\") // [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"], ["//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){ \n    let count = 0;\n    let index = 0;\n    while (index < string.length) {\n        let found = string.indexOf(substring, index);\n        if (found != -1) {\n            count++;\n            index = found + 1;\n        } else {\n            break;\n        }\n    }\n    return count;\n}"], ["//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){ \n    let arr = numbers.split(' '); \n    arr.sort((a, b) => {\n        let numA = parseInt(a, 10);\n        let numB = parseInt(b, 10);\n        return numA - numB;\n    });\n    return arr.join(' ');\n} \n\nsort_numbers(\"three one five\"); // \"one three five\""], ["//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){ //find closest elements\n    let closest = [numbers[0], numbers[1]];\n    let minDiff = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < minDiff) {\n                minDiff = diff;\n                closest = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest;\n}"], ["//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){ \n    let min = Math.min(...numbers);\n    let max = Math.max(...numbers);\n    return numbers.map(num => (num - min) / (max - min));\n} \n\nlet rescaled = rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]);"], ["//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){ \n    return values.filter(function(value){\n        return Number.isInteger(value);\n    });\n}"], ["//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){ \n    let length = 0;\n    while (string[length] !== undefined) {\n        length++;\n    }\n    return length;\n} \n"], ["//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){ \n    let largest = 0;\n    for(let i = 1; i < n; i++){\n        if(n % i == 0){\n            largest = i;\n        }\n    }\n    return largest;\n} \n"], ["//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){ \n    let factors = [];\n    let divisor = 2;\n    while (n >= 2) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n            n = n / divisor;\n        } else {\n            divisor++;\n        }\n    }\n    return factors;\n}"], ["//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){ \n    let seen = new Set();\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (!seen.has(numbers[i])) {\n            seen.add(numbers[i]);\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}"], ["//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){ \n    let newString = \"\";\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === string[i].toUpperCase()) {\n            newString += string[i].toLowerCase();\n        } else {\n            newString += string[i].toUpperCase();\n        }\n    }\n    return newString;\n}\n"], ["//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){ \n    return strings.join(\"\");\n} \n"], ["//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){ \n    let filtered = [];\n    for (let i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)) {\n            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n}"], ["//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){ \n    return l.filter(function(x){ \n        return x > 0;\n    });\n}"], ["//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){ \n    if(n <= 1) return false;\n    for(let i = 2; i < n; i++) {\n        if(n % i === 0) return false;\n    }\n    return true;\n}"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){ \n    let l_prime = l.slice();\n    let l_prime_divisible_by_three = l_prime.filter((_, i) => i % 3 === 0);\n    l_prime_divisible_by_three.sort((a, b) => a - b);\n    let l_prime_sorted = l_prime.filter((_, i) => i % 3 !== 0);\n    l_prime_divisible_by_three.forEach((value, i) => {\n        l_prime_sorted.splice(i, 0, value);\n    });\n    return l_prime;\n}"], ["//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){ \n    return l.sort().filter(function(i, pos, ary){ \n        return ary.indexOf(i) == pos;\n    });\n}"], ["//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){return Math.max.apply(null,l);}"], ["//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){ // eslint-disable-line no-unused-vars\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let str = i.toString();\n      for (let j = 0; j < str.length; j++) {\n        if (str[j] === '7') {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){ \n    let l_even = l.filter((_, i) => i % 2 === 0);\n    let l_odd = l.filter((_, i) => i % 2 !== 0);\n    l_even.sort((a, b) => a - b);\n    return l_odd.concat(l_even);\n}"], ["//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){let fibs = [1, 1];let i = 2;let j = 0;while (j < n){let fib = fibs[i-1] + fibs[i-2];fibs.push(fib);if (isPrime(fib)) return fib; i++;j++}return -1};function isPrime(num){for (let i = 2; i <= Math.sqrt(num); i++) if (num % i === 0) return false;return true};prime_fib(5) // 89"], ["//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){let n = l.length;\n    if (n < 3) return false;\n    l.sort((a, b) => a - b);\n    for (let i = 0; i < n - 2; i++) {\n        let j = i + 1;\n        let k = n - 1;\n        while (j < k) {\n            let sum = l[i] + l[j] + l[k];\n            if (sum === 0) return true;\n            if (sum < 0) j++;\n            else k--;\n        }\n    }\n    return false;}"], ["//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){ \n    return Math.floor(n/2);\n}"], ["//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){ \n    return l.map(function(x){return x+1})\n}"], ["//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){let seen = new Set(); for (let i = 0; i < l.length; i++) {let complement = -l[i]; if (seen.has(complement)) return true; seen.add(l[i]);} return false;}"], ["//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){ \n    let result = \"\";\n    while(x > 0){\n        let remainder = x % base;\n        result = remainder.toString() + result;\n        x = Math.floor(x / base);\n    }\n    return result;\n}"], ["//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){ \n    return 0.5 * a * h;\n} \n\nlet area = triangle_area(5, 3);"], ["//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){ \n    let fib4 = [0, 0, 2, 0];\n    for(let i = 4; i <= n; i++){\n        fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n    }\n    return fib4[n];\n}"], ["//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){ \n    l.sort(function(a, b){return a-b});\n    let mid = Math.floor(l.length/2);\n    if(l.length % 2 == 0){\n        return (l[mid-1] + l[mid])/2;\n    }else{\n        return l[mid];\n    }\n}"], ["//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){ \n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}"], ["//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){return Math.pow(2, n) % p;}\n"], ["//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){ \n    return text.replace(/[aeiou]/gi, '');\n}"], ["//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){ \n  return l.every(function(x){return x < t;});\n}"], ["//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){return x + y}"], ["//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){ \n    let s0_chars = new Set(s0);\n    let s1_chars = new Set(s1);\n    return s0_chars.size == s1_chars.size && s0_chars.size == s0.length;\n}"], ["//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){ \n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}"], ["//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){ // eslint-disable-line no-unused-vars\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(\"<\");\n        } else if (brackets[i] === \">\") {\n            if (stack.length === 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}"], ["//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){ //check if array is monotonic\n    let isIncreasing = true;\n    let isDecreasing = true;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > l[i - 1]) isDecreasing = false;\n        if (l[i] < l[i - 1]) isIncreasing = false;\n    }\n    return isIncreasing || isDecreasing;\n}"], ["//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){ //l1 and l2 are arrays\n    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let commonSet = new Set([...set1].filter(x => set2.has(x)));\n    return [...commonSet].sort((a, b) => a - b);\n}"], ["//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){let largest = 0;let i = 2;while(i <= n){if(n % i == 0){largest = i;while(n % i == 0){n = n / i;}i++;}return largest;}return largest;}let largest = largest_prime_factor(13195);console.log(largest);let largest = largest_prime_factor(2048);console.log(largest);let largest = largest_prime_factor(600851475143);console.log(largest);"], ["//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){return n*(n+1)/2}"], ["//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){ \n    let stack = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i] === \")\" && stack.length > 0) {\n            stack.pop();\n        } else {\n            return false;\n        }\n    }\n    return stack.length === 0;\n}"], ["//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){ // xs[0] + xs[1] * x + xs[2] * x^2 + ...."], ["//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){ \n    let a = 0, b = 0, c = 1;\n    for (let i = 2; i <= n; i++) {\n        let d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}"], ["//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){ //s is the given word\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y'){\n            count++;\n        }\n    }\n    return count;\n}"], ["//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){ \n    let str = x.toString();\n    let len = str.length;\n    let shift = shift % len;\n    let result = str.slice(len - shift) + str.slice(0, len - shift);\n    return result;\n}"], ["//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){ \n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}"], ["//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){ \n    let splitString = s.split(\" and \");\n    let apples = splitString[0].split(\" \")[0];\n    let oranges = splitString[1].split(\" \")[0];\n    let mangoes = n - parseInt(apples) - parseInt(oranges);\n    return mangoes;\n}"], ["//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){ \n    let min = Infinity;\n    let minIndex = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < min) {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n}"], ["//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){ \n    let count = {};\n    let max = -1;\n    for (let i = 0; i < lst.length; i++) {\n        let num = lst[i];\n        if (count[num] == null) {\n            count[num] = 1;\n        } else {\n            count[num]++;\n        }\n        if (count[num] >= num && num > max) {\n            max = num;\n        }\n    }\n    return max;\n}"], ["//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){ \n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let result = [];\n    let isMin = true;\n    while (lst.length > 0) {\n        if (isMin) {\n            result.push(min);\n            lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n        } else {\n            result.push(max);\n            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n        }\n        isMin = !isMin;\n    }\n    return result;\n}"], ["//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){ \n    if (a + b > c && a + c > b && b + c > a) {\n        let s = (a + b + c) / 2;\n        let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        return Math.round(area * 100) / 100;\n    }\n    return -1;\n}"], ["//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){ \n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    return (sum <= w) && (q.join('') === q.reverse().join(''));\n}"], ["//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){ \n    let count = 0;\n    let n = arr.length;\n    for (let i = 0; i < n/2; i++){\n        if (arr[i] != arr[n-i-1]){\n            count++;\n        }\n    }\n    return count;\n}"], ["//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){ \n    let total1 = 0;\n    let total2 = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n    }\n    if (total1 < total2) {\n        return lst1;\n    } else if (total1 > total2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}"], ["//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){ \n    let prime = 0;\n    let prime2 = 0;\n    let prime3 = 0;\n    for (let i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            prime = i;\n            break;\n        }\n    }\n    for (let i = 2; i <= prime; i++) {\n        if (prime % i == 0) {\n            prime2 = i;\n            break;\n        }\n    }\n    for (let i = 2; i <= prime2; i++) {\n        if (prime2 % i == 0) {\n            prime3 = i;\n            break;\n        }\n    }\n    return (prime * prime2 * prime3 == a);\n}"], ["//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){ \n    if (x == 1) return true;\n    if (n == 1) return false;\n    let power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return power == x;\n}"], ["//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){ \n    return Math.round(Math.pow(a, 1/3)) ** 3 === a;\n}"], ["//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){ \n    let count = 0;\n    let hexDigits = num.split('');\n    for (let i = 0; i < hexDigits.length; i++) {\n        let hexDigit = hexDigits[i];\n        if (hexDigit === '2' || hexDigit === '3' || hexDigit === '5' || hexDigit === '7' || hexDigit === 'B' || hexDigit === 'D') {\n            count++;\n        }\n    }\n    return count;\n}"], ["//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){ \n    let binary = \"\";\n    let remainder;\n    let i = 0;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n        binary = remainder + binary;\n        decimal = Math.floor(decimal / 2);\n        i++;\n    }\n    return \"db\" + binary + \"db\";\n}"], ["//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){ \n    if(s.length < 3){\n        return false;\n    }\n    for(let i=0; i<s.length-2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    return true;\n} \n"], ["//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){ \n    let grades_letter = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n            grades_letter.push(\"A+\");\n        }\n        else if(grades[i] >= 3.7){\n            grades_letter.push(\"A\");\n        }\n        else if(grades[i] >= 3.3){\n            grades_letter.push(\"A-\");\n        }\n        else if(grades[i] >= 3.0){\n            grades_letter.push(\"B+\");\n        }\n        else if(grades[i] >= 2.7){\n            grades_letter.push(\"B\");\n        }\n        else if(grades[i] >= 2.3){\n            grades_letter.push(\"B-\");\n        }\n        else if(grades[i] >= 2.0){\n            grades_letter.push(\"C+\");\n        }\n        else if(grades[i] >= 1.7){\n            grades_letter.push(\"C\");\n        }\n        else if(grades[i] >= 1.3){\n            grades_letter.push(\"C-\");\n        }\n        else if(grades[i] >= 1.0){\n            grades_letter.push(\"D+\");\n        }\n        else if(grades[i] >= 0.7){\n            grades_letter.push(\"D\");\n        }\n        else if(grades[i] >= 0.0){\n            grades_letter.push(\"D-\");\n        }\n        else{\n            grades_letter.push(\"E\");\n        }\n    }\n    return grades_letter;\n} "], ["//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){ \n    let length = string.length;\n    if (length < 2) return false;\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) return false;\n    }\n    return true;\n}"], ["//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){ \n    let count = 0;\n    for (let i = 1; i < Math.pow(10, n); i++) {\n        let str = i.toString();\n        if (str[0] === '1' || str[str.length - 1] === '1') {\n            count++;\n        }\n    }\n    return count;\n} \n"], ["//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){ \n    let sum = 0;\n    while (N > 0) {\n        sum += N % 2;\n        N = Math.floor(N / 2);\n    }\n    return sum.toString(2);\n}"], ["//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){ \n    let sum = 0;\n    for(let i = 1; i < lst.length; i += 2){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n} \n\nadd([4, 2, 6, 7]); // 2\nadd([1, 2, 3, 4, 5, 6]); // 6\nadd([1, 2, 3, 4, 5, 6, 7, 8]); // 12\nadd([2, 4, 6, 8]); // 12\nadd([1, 3, 5, 7]); // 0\nadd([2, 4, 6, 8, 10]); // 18\nadd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // 30\nadd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]); // 0\nadd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]); // 90\nadd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]); // 110\nadd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]); // 150\nadd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]); // 180\nadd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]); // 210\nadd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]); // 240\nadd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]); // 270\nadd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]); // 300\nadd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36]); // 330\nadd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38]); // 360\nadd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]); // 400\nadd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42]); // 440\nadd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44]); // 480\nadd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,"], ["//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){ \n    return s.split(' ').map(word => word.split('').sort().join('')).join(' ');\n}"], ["//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){ \n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == x) {\n                result.push([i, j]);\n            }\n        }\n    }\n    result.sort((a, b) => {\n        if (a[0] == b[0]) {\n            return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n    return result;\n}"], ["//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){ \n    let sum = array[0] + array[array.length - 1];\n    if (sum % 2 === 0) {\n        array.sort((a, b) => b - a);\n    } else {\n        array.sort((a, b) => a - b);\n    }\n    return array;\n}"], ["//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){ \n    let result = \"\";\n    for(let i = 0; i < s.length; i++){\n        let charCode = s.charCodeAt(i);\n        if(charCode >= 97 && charCode <= 122){\n            result += String.fromCharCode(((charCode - 97 + 2) % 26) + 97);\n        } else if(charCode >= 65 && charCode <= 90){\n            result += String.fromCharCode(((charCode - 65 + 2) % 26) + 65);\n        } else {\n            result += s.charAt(i);\n        }\n    }\n    return result;\n}"], ["//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){ \n    if (lst.length < 2) return undefined;\n    let min = Math.min(...lst);\n    let secondMin = Number.MAX_SAFE_INTEGER;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < secondMin && lst[i] > min) {\n            secondMin = lst[i];\n        }\n    }\n    return secondMin === Number.MAX_SAFE_INTEGER ? undefined : secondMin;\n}"], ["//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){let count = 0;let words = S.split(' ');for(let i = 0; i < words.length; i++){if(words[i] === 'I'){count++}}return count;}console.log(is_bored(\"The sky is blue. The sun is shining. I love this weather\")); // 1"], ["//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){ \n    return (x + y === z || x + z === y || y + z === x) && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n}"], ["//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){ \n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        let char = message[i];\n        if (char === char.toUpperCase()) {\n            char = char.toLowerCase();\n        } else {\n            char = char.toUpperCase();\n        }\n        if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n            char = String.fromCharCode(char.charCodeAt(0) + 2);\n        }\n        encodedMessage += char;\n    }\n    return encodedMessage;\n} \n"], ["//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){ \n    let maxPrime = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i]) && lst[i] > maxPrime) {\n            maxPrime = lst[i];\n        }\n    }\n    return maxPrime.toString().split('').reduce((sum, digit) => sum + Number(digit), 0);\n}\n"], ["//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){ \n    if (Object.keys(dict).length === 0) return false;\n    let isLowerCase = true;\n    let isUpperCase = true;\n    for (let key in dict) {\n        if (typeof key !== 'string') return false;\n        if (key.toLowerCase() !== key) isLowerCase = false;\n        if (key.toUpperCase() !== key) isUpperCase = false;\n    }\n    return isLowerCase || isUpperCase;\n}"], ["//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){ \n    let primes = [];\n    for(let i = 2; i < n; i++){\n        let isPrime = true;\n        for(let j = 2; j < i; j++){\n            if(i % j === 0){\n                isPrime = false;\n                break;\n            }\n        }\n        if(isPrime){\n            primes.push(i);\n        }\n    }\n    return primes;\n}"], ["//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){ \n    return Math.abs(a % 10 * b % 10);\n}"], ["//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){ \n    let count = 0;\n    for(let i = 0; i < s.length; i+=2){\n        if(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){\n            count++;\n        }\n    }\n    return count;\n}"], ["//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){ \n    return Math.round(value);\n}"], ["//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){ \n    let pile = [];\n    let level = 1;\n    let stones = n;\n    while (level <= n) {\n        pile.push(stones);\n        if (stones % 2 == 0) {\n            stones += 2;\n        } else {\n            stones += 2;\n            stones += 1;\n        }\n        level++;\n    }\n    return pile;\n} \n"], ["//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){ \n    return s.split(/[\\s,]+/);\n}"], ["//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){ \n    let max = Math.max(x, y);\n    let min = Math.min(x, y);\n    if (max % 2 === 0 && min % 2 === 0) {\n        return max;\n    } else if (max % 2 !== 0 && min % 2 !== 0) {\n        return min;\n    } else {\n        return -1;\n    }\n}"], ["//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){ \n    if (n > m) return -1;\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n    return avg.toString(2);\n}"], ["//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){ \n    let result = [];\n    for (let i = 0; i < x.length; i++) {\n        let num = x[i];\n        let hasEvenDigit = false;\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit % 2 == 0) {\n                hasEvenDigit = true;\n                break;\n            }\n            num = Math.floor(num / 10);\n        }\n        if (!hasEvenDigit) {\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n}"], ["//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){ \n    let result = [];\n    let str = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            str += arr[i] + \" \";\n        }\n    }\n    str = str.split(\" \");\n    str.reverse();\n    for (let i = 0; i < str.length; i++) {\n        switch (str[i]) {\n            case \"1\":\n                result.push(\"One\");\n                break;\n            case \"2\":\n                result.push(\"Two\");\n                break;\n            case \"3\":\n                result.push(\"Three\");\n                break;\n            case \"4\":\n                result.push(\"Four\");\n                break;\n            case \"5\":\n                result.push(\"Five\");\n                break;\n            case \"6\":\n                result.push(\"Six\");\n                break;\n            case \"7\":\n                result.push(\"Seven\");\n                break;\n            case \"8\":\n                result.push(\"Eight\");\n                break;\n            case \"9\":\n                result.push(\"Nine\");\n                break;\n        }\n    }\n    return result;\n}"], ["//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){ \n    let arr = [];\n    for(let i = 1; i <= n; i++){\n        if(i % 2 == 0){\n            let factorial = 1;\n            for(let j = 1; j <= i; j++){\n                factorial *= j;\n            }\n            arr.push(factorial);\n        }else{\n            let sum = 0;\n            for(let j = 1; j <= i; j++){\n                sum += j;\n            }\n            arr.push(sum);\n        }\n    }\n    return arr;\n}"], ["//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){ \n    let even = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n        let str = i.toString();\n        let rev = str.split('').reverse().join('');\n        if (str === rev) {\n            if (i % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return [even, odd];\n}"], ["//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){ \n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let sum = 0;\n        let isNegative = false;\n        let num = Math.abs(arr[i]);\n        while (num > 0) {\n            let digit = num % 10;\n            if (digit < 0) {\n                isNegative = true;\n                digit = Math.abs(digit);\n            }\n            sum += digit;\n            num = Math.floor(num / 10);\n        }\n        if (sum > 0 || isNegative) {\n            count++;\n        }\n    }\n    return count;\n}"], ["//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){ \n    let n = arr.length;\n    let max = Math.max(...arr);\n    let min = Math.min(...arr);\n    let maxIndex = arr.indexOf(max);\n    let minIndex = arr.indexOf(min);\n    if (maxIndex > minIndex) {\n        return false;\n    }\n    let temp = arr[maxIndex];\n    for (let i = 0; i < n; i++) {\n        arr[i] = arr[i + 1];\n    }\n    arr[n] = temp;\n    return arr.join('') === arr.slice().sort().join('');\n}"], ["//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){ \n    let evenCount = 0;\n    let oddCount = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    let oddCountInLst2 = 0;\n    for (let i = 0; i < lst2.length; i++) {\n        if (lst2[i] % 2 !== 0) {\n            oddCountInLst2++;\n        }\n    }\n    if (oddCount > 0 && oddCountInLst2 > 0) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}"], ["//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){ \n    let result = {};\n    let max = 0;\n    let maxLetters = [];\n    let letters = test.split(' ');\n    for(let i = 0; i < letters.length; i++){\n        let letter = letters[i];\n        let count = 0;\n        for(let j = 0; j < letters.length; j++){\n            if(letters[j] === letter){\n                count++;\n            }\n        }\n        if(count > max){\n            max = count;\n            maxLetters = [letter];\n        }\n        else if(count === max){\n            maxLetters.push(letter);\n        }\n        result[letter] = count;\n    }\n    return maxLetters.length > 1 ? maxLetters : maxLetters[0];\n}"], ["//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){ \n    let result = \"\";\n    let isPalindrome = true;\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (c.indexOf(char) === -1) {\n            result += char;\n        }\n    }\n    for (let i = 0; i < result.length / 2; i++) {\n        if (result[i] !== result[result.length - 1 - i]) {\n            isPalindrome = false;\n            break;\n        }\n    }\n    return [result, isPalindrome];\n}"], ["//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){ // eslint-disable-line no-unused-vars\n  return lst.map(str => {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] % 2 !== 0) {\n        count++;\n      }\n    }\n    return `the number of odd elements ${count}n the str${count}ng ${count} of the ${count}nput.`;\n  });\n}"], ["//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){ \n    let minSum = Infinity;\n    let currentSum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        currentSum += nums[i];\n        minSum = Math.min(minSum, currentSum);\n        if (currentSum > 0) {\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}"], ["//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){ \n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        let row = grid[i];\n        let j = 0;\n        while (j < row.length) {\n            if (row[j] == 1) {\n                let k = j;\n                while (k < row.length && row[k] == 1) {\n                    k++;\n                }\n                let num = k - j;\n                if (num > capacity) {\n                    count += Math.floor(num / capacity);\n                    j += num % capacity;\n                } else {\n                    j = k;\n                }\n            } else {\n                j++;\n            }\n        }\n    }\n    return count;\n}"], ["//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){ // write your code here\n    return arr.sort((a, b) => {\n        let countA = a.toString(2).split('').filter(x => x === '1').length;\n        let countB = b.toString(2).split('').filter(x => x === '1').length;\n        if(countA === countB){\n            return a - b;\n        }\n        return countA - countB;\n    });\n}"], ["//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){ \n    let words = s.split(' '); \n    let result = []; \n    for (let i = 0; i < words.length; i++) { \n        let count = 0; \n        for (let j = 0; j < words[i].length; j++) { \n            let char = words[i][j].toLowerCase(); \n            if (char >= 'a' && char <= 'z') { \n                if (char != 'a' && char != 'e' && char != 'i' && char != 'o' && char != 'u') { \n                    count++; \n                } \n            } \n        } \n        if (count == n) { \n            result.push(words[i]); \n        } \n    } \n    return result; \n} "], ["//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){ \n    let vowels = \"AEIOUaeiou\";\n    let closest_vowel = \"\";\n    let last_consonant = false;\n    for (let i = word.length - 1; i >= 0; i--) {\n        let char = word[i];\n        if (vowels.indexOf(char) > -1) {\n            if (last_consonant) {\n                closest_vowel = char;\n                break;\n            }\n        } else {\n            last_consonant = true;\n        }\n    }\n    return closest_vowel;\n}"], ["//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){ \n    let str1 = lst[0];\n    let str2 = lst[1];\n    let str1count = 0;\n    let str2count = 0;\n    let str1open = 0;\n    let str2open = 0;\n    let str1close = 0;\n    let str2close = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] == '(') {\n            str1open++;\n        } else {\n            str1close++;\n        }\n    }\n    for (let i = 0; i < str2.length; i++) {\n        if (str2[i] == '(') {\n            str2open++;\n        } else {\n            str2close++;\n        }\n    }\n    if (str1open + str2open == str1close + str2close) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}"], ["//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){ \n    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    let result = [];\n    for (let i = 0; i < k; i++) {\n        result.push(arr[maxIndex]);\n        arr[maxIndex] = -1;\n        maxIndex = arr.indexOf(Math.max(...arr));\n    }\n    return result;\n}"], ["//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){ \n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        if (lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}"], ["//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){ \n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}"], ["//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){ \n    let collatz = [n];\n    while (n != 1) {\n        if (n % 2 == 0) {\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n        collatz.push(n);\n    }\n    return collatz.filter(num => num % 2 != 0).sort((a, b) => a - b);\n}"], ["//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){ \n    let month = date.split(\"-\")[0];\n    let day = date.split(\"-\")[1];\n    let year = date.split(\"-\")[2];\n    let days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if (month < 1 || month > 12 || day < 1 || day > days[month-1] || year < 1) {\n        return false;\n    }\n    return true;\n}"], ["//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){ \n    let words = txt.split(/\\s+/);\n    if (words.length > 0) {\n        return words;\n    }\n    let words = txt.split(/,/);\n    if (words.length > 0) {\n        return words;\n    }\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n        if (txt[i].toLowerCase().charCodeAt(0) % 2 !== 0) {\n            count++;\n        }\n    }\n    return count;\n}"], ["//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){ \n    let prev = lst[0];\n    let count = 1;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < prev) {\n            return false;\n        }\n        if (lst[i] === prev) {\n            count++;\n            if (count > 1) {\n                return false;\n            }\n        }\n        prev = lst[i];\n    }\n    return true;\n}"], ["//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){ \n    let start = Math.max(interval1[0], interval2[0]);\n    let end = Math.min(interval1[1], interval2[1]);\n    let length = end - start;\n    if (length <= 1) return \"NO\";\n    for (let i = 2; i < length; i++) {\n        if (length % i == 0) return \"NO\";\n    }\n    return \"YES\";\n}"], ["//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){ \n    if (arr.length === 0) {\n        return undefined;\n    }\n    let prod_sign = 1;\n    let sum_magnitude = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n            return 0;\n        }\n        prod_sign *= Math.sign(arr[i]);\n        sum_magnitude += Math.abs(arr[i]);\n    }\n    return prod_sign * sum_magnitude;\n}"], ["//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){ \n    let min = Infinity;\n    let minPath = [];\n    let n = grid.length;\n    let m = grid[0].length;\n    let path = [];\n    let visited = new Array(n).fill(false).map(() => new Array(m).fill(false));\n    let directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < m; j++){\n            let path = [];\n            path.push(grid[i][j]);\n            let x = i;\n            let y = j;\n            let count = 1;\n            while(count < k){\n                let minVal = Infinity;\n                let minIndex = -1;\n                for(let d of directions){\n                    let nx = x + d[0];\n                    let ny = y + d[1];\n                    if(nx >= 0 && nx < n && ny >= 0 && ny < m && !visited[nx][ny]){\n                        if(grid[nx][ny] < minVal){\n                            minVal = grid[nx][ny];\n                            minIndex = d;\n                        }\n                    }\n                }\n                if(minIndex == -1){\n                    break;\n                }\n                x += minIndex[0];\n                y += minIndex[1];\n                path.push(grid[x][y]);\n                count++;\n            }\n            if(count == k){\n                let pathStr = path.join(\"\");\n                if(minPath.length == 0 || pathStr < minPath.join(\"\")) {\n                    minPath = path;\n                    min = pathStr;\n                }\n            }\n        }\n    }\n    return minPath;\n}"], ["//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){ \n    let arr = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            arr.push(1 + i / 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}"], ["//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){ \n    let product = 1;\n    let isEven = false;\n    while (n > 0) {\n        let digit = n % 10;\n        if (digit % 2 == 0) {\n            isEven = true;\n        }\n        if (!isEven) {\n            product *= digit;\n        }\n        n = Math.floor(n / 10);\n    }\n    return isEven ? 0 : product;\n}"], ["//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){ \n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            count++;\n        } else if (string[i] === ']') {\n            count--;\n        }\n        if (count < 0) {\n            return false;\n        }\n    }\n    return count > 0;\n}"], ["//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){ \n    return lst.map(Math.ceil).map(x => x * x).reduce((a, b) => a + b, 0);\n}"], ["//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){ \n    let last_char = txt.slice(-1);\n    let last_word = txt.split(\" \").pop();\n    return last_char.match(/[a-zA-Z]/) && last_word.indexOf(last_char) === -1;\n}"], ["//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){ \n    let max = -1;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] >= arr[i-1]) {\n            max = i;\n        }\n    }\n    return max;\n}"], ["//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){ \n    let a = undefined;\n    let b = undefined;\n    let max = -Infinity;\n    let min = Infinity;\n    lst.forEach(num => {\n        if (num < 0 && num > max) {\n            max = num;\n            a = max;\n        }\n        if (num > 0 && num < min) {\n            min = num;\n            b = min;\n        }\n    });\n    return [a, b];\n}"], ["//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){ \n    if (typeof a === 'string' && typeof b === 'string') {\n        return a > b ? a : b;\n    } else if (typeof a === 'string' && typeof b === 'number') {\n        return a > b ? a : b;\n    } else if (typeof a === 'number' && typeof b === 'string') {\n        return a > b ? a : b;\n    } else if (typeof a === 'number' && typeof b === 'number') {\n        return a > b ? a : b;\n    } else {\n        return undefined;\n    }\n}"], ["//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){ \n    if (n % 2 != 0) return false;\n    if (n < 8) return false;\n    return true;\n}"], ["//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){ \n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}"], ["//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){ \n    let result = text.replace(/ +/g, '_');\n    result = result.replace(/ ++/g, '-');\n    return result;\n} \n"], ["//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){ \n    let count = 0;\n    let dot = file_name.indexOf('.');\n    let beforeDot = file_name.substring(0, dot);\n    let afterDot = file_name.substring(dot + 1);\n    let isValid = true;\n    for (let i = 0; i < file_name.length; i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if (count > 3) {\n            isValid = false;\n            break;\n        }\n    }\n    if (count <= 3 && dot > -1 && afterDot === 'txt' || afterDot === 'exe' || afterDot === 'dll' && beforeDot.length > 0 && beforeDot[0] >= 'a' && beforeDot[0] <= 'z' && beforeDot[0] >= 'A' && beforeDot[0] <= 'Z') {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}"], ["//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){ \n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            lst[i] = Math.pow(lst[i], 2);\n        } else if (i % 4 === 0 && i % 3 !== 0) {\n            lst[i] = Math.pow(lst[i], 3);\n        }\n        sum += lst[i];\n    }\n    return sum;\n}"], ["//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){ \n    let words = sentence.split(\" \");\n    let result = \"\";\n    for (let word of words) {\n        let length = word.length;\n        let isPrime = true;\n        for (let i = 2; i < length; i++) {\n            if (length % i === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            result += word + \" \";\n        }\n    }\n    return result.trim();\n}"], ["//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){ \n    let [x_numerator, x_denominator] = x.split(\"/\");\n    let [n_numerator, n_denominator] = n.split(\"/\");\n\n    let x_numerator = parseInt(x_numerator);\n    let x_denominator = parseInt(x_denominator);\n    let n_numerator = parseInt(n_numerator);\n    let n_denominator = parseInt(n_denominator);\n\n    let numerator = x_numerator * n_numerator;\n    let denominator = x_denominator * n_denominator;\n\n    return (numerator % denominator === 0);\n}"], ["//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){ \n    let result = nums.slice(); \n    result.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc, c) => acc + Number(c), 0);\n        let sumB = b.toString().split('').reduce((acc, c) => acc + Number(c), 0);\n        return sumA - sumB || result.indexOf(a) - result.indexOf(b);\n    });\n    return result;\n}"], ["//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){ \n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        let num = Math.abs(nums[i]);\n        let firstDigit = Math.floor(Math.abs(num) / Math.pow(10, Math.floor(Math.log10(num))));\n        let lastDigit = Math.floor(num % 10);\n        if (num > 10 && firstDigit % 2 !== 0 && lastDigit % 2 !== 0) {\n            count++;\n        }\n    }\n    return count;\n}"], ["//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){ \n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n} \n"], ["//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){ \n    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n    if(planet1Index == -1 || planet2Index == -1){\n        return [];\n    }\n    let start = Math.min(planet1Index, planet2Index);\n    let end = Math.max(planet1Index, planet2Index);\n    let result = [];\n    for(let i = start+1; i < end; i++){\n        result.push(planets[i]);\n    }\n    return result;\n}"], ["//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){ \n    let new_list = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length % 2 == 0) {\n            new_list.push(lst[i]);\n        }\n    }\n    new_list.sort();\n    return new_list;\n}"], ["//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){ \n    // write your code here\n    let isPrime = true;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            isPrime = false;\n        }\n    }\n    return isPrime ? x : y;\n}"], ["//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){ \n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (Number.isInteger(lst[i]) && lst[i] > 0) {\n            sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum * 2;\n}"], ["//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){ \n    let result = [];\n    for (let i = 0; i < game.length; i++) {\n        if (game[i] === guess[i]) {\n            result.push(0);\n        } else {\n            result.push(Math.abs(game[i] - guess[i]));\n        }\n    }\n    return result;\n}"], ["//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){ \n    let max_strength = -1;\n    let strongest_extension = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let strength = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n                strength += 1;\n            } else {\n                strength -= 1;\n            }\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n}"], ["//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){ \n    let str = a;\n    let str2 = b;\n    let len = str2.length;\n    for (let i = 0; i < len; i++) {\n        str2 = str2 + str2;\n    }\n    return str.includes(str2);\n}"], ["//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){ \n    let even = 0;\n    let odd = 0;\n    let str = String(Math.abs(num));\n    for (let i = 0; i < str.length; i++) {\n        let digit = str.charAt(i);\n        if (digit % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [even, odd];\n}"], ["//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){ \n    let romanNumerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    };\n    let result = '';\n    for (let key in romanNumerals) {\n        while (number >= key) {\n            result += romanNumerals[key];\n            number -= key;\n        }\n    }\n    return result;\n}"], ["//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){ \n    // Sort the sides\n    let sides = [a, b, c].sort((a, b) => a - b);\n    // Check if the sum of the squares of the two smaller sides is equal to the square of the largest side\n    return sides[0] * sides[0] + sides[1] * sides[1] === sides[2] * sides[2];\n}"], ["//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){ \n    let max_word = \"\";\n    let max_count = 0;\n    for (let word of words) {\n        let count = new Set(word).size;\n        if (count > max_count || (count == max_count && word < max_word)) {\n            max_word = word;\n            max_count = count;\n        }\n    }\n    return max_word;\n}"], ["//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){ \n    return [number + need, remaining - need];\n}"], ["//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){ \n    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        let op = operator[i];\n        let num = operand[i + 1];\n        if (op == '+') {\n            result += num;\n        } else if (op == '-') {\n            result -= num;\n        } else if (op == '*') {\n            result *= num;\n        } else if (op == '/') {\n            result /= num;\n        } else if (op == '**') {\n            result **= num;\n        }\n    }\n    return result;\n}"], ["//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){ \n    let result = \"\";\n    let isLetter = false;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-zA-Z]/)) {\n            isLetter = true;\n            if (s[i] === s[i].toUpperCase()) {\n                result += s[i].toLowerCase();\n            } else {\n                result += s[i].toUpperCase();\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    if (!isLetter) {\n        result = result.split('').reverse().join('');\n    }\n    return result;\n}"], ["//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){ \n    if (text === \"\") return undefined;\n    return crypto.createHash('md5').update(text).digest('hex');\n}"], ["//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){ \n    let result = [];\n    for (let i = a; i <= b; i++) {\n        let num = i.toString();\n        for (let j = 0; j < num.length; j++) {\n            let digit = num[j];\n            if (digit % 2 === 0) {\n                result.push(parseInt(digit));\n            }\n        }\n    }\n    return result;\n}"]]
